From b0e9e56d41eed36013dae97957d3e6bf1392af57 Mon Sep 17 00:00:00 2001
From: thoughtcrime <shane.the.timwaster@gmail.com>
Date: Thu, 8 Dec 2016 03:02:05 -0600
Subject: [PATCH] Revert "Revert "adds alpha and beta development directories,
 renames file structure to match TTS structure, and adds a dist folder for
 publication-ready code for workshop deployment.""

This reverts commit 416c8f030aaa8b1400d968f932044590bfbfd82e.
---
 Dist/Admin Button                                  |   34 -
 Dist/Admin Console                                 |  229 ---
 Dist/Gear Sheet (Esk)                              |  355 ----
 Dist/Gear Sheet (Nog)                              |  398 ----
 Dist/Global                                        | 1892 --------------------
 Dist/Level Marker (Hunt)                           |   46 -
 Dist/Level Marker (Showdown)                       |   46 -
 Dist/Monster Board                                 |  369 ----
 Dist/README.md                                     |    3 -
 Dist/Settlement Sheet (Nognoth)                    |  522 ------
 Dist/Speed Token                                   |   14 -
 Dist/Story Board Left                              |  496 -----
 Dist/Story Board Top                               |  496 -----
 Dist/Survivor Sheet-Full (Esk)                     |  643 -------
 Dist/Survivor Sheet-Full (Esk-People of the Stars) |  666 -------
 Dist/Survivor Sheet-Full (Esk-People of the Sun)   |  648 -------
 Dist/Survivor Sheet-Full (Nog)                     |  630 -------
 Dist/Survivor Sheet-Mini (Nog)                     |  509 ------
 Dist/Survivor Sheet-MiniMid (Esk)                  |  553 ------
 ...urvivor Sheet-MiniMid (Esk-People of the Stars) |  553 ------
 .../Survivor Sheet-MiniMid (Esk-People of the Sun) |  554 ------
 Dist/Survivor Sheet-MiniMin (Esk)                  |  491 -----
 ...urvivor Sheet-MiniMin (Esk-People of the Stars) |  491 -----
 .../Survivor Sheet-MiniMin (Esk-People of the Sun) |  491 -----
 Dist/placeholder script                            |   14 -
 Lua/Admin Button.a12e8c.lua                        |   34 -
 Lua/Admin Console.e00199.lua                       |  229 ---
 Lua/Custom Token.ba32c7.lua                        |  522 ------
 Lua/Global.-1.lua                                  | 1892 --------------------
 Lua/Level Marker.302128.lua                        |   46 -
 Lua/Level Marker.df1a46.lua                        |   46 -
 Lua/Monster Board.24f67c.lua                       |  369 ----
 Lua/Nemesis Monsters.0f3f64.lua                    |   29 -
 Lua/P1.1a3b6e.lua                                  |  398 ----
 Lua/P2.b5d9e8.lua                                  |  398 ----
 Lua/P3.c4017e.lua                                  |  398 ----
 Lua/P4.3aadbe.lua                                  |  398 ----
 Lua/Quarries.9abd27.lua                            |   29 -
 Lua/Speed Token.943c9d.lua                         |   14 -
 Lua/Story Board Left.40ac46.lua                    |  496 -----
 Lua/Story Board Top.fece67.lua                     |  496 -----
 Lua/Timeline Events.92b95e.lua                     |   29 -
 Lua/Unnamed Survivor.2f95db.lua                    |  630 -------
 Lua/Unnamed Survivor.42d42b.lua                    |  630 -------
 Lua/Unnamed Survivor.87d89b.lua                    |  630 -------
 Lua/Unnamed Survivor.aa7e77.lua                    |  630 -------
 Lua/deckAbilities.625f68.lua                       |   14 -
 Lua/deckBasicHunt.4e9d9e.lua                       |   14 -
 Lua/deckBasicResources.4b6997.lua                  |   14 -
 Lua/deckDisorders.3a5452.lua                       |   14 -
 Lua/deckFightingArts.515434.lua                    |   14 -
 Lua/deckSecretFightingArs.b6c374.lua               |   14 -
 Lua/deckSevereInjuries.421db1.lua                  |   14 -
 Lua/deckSpecialHunt.148b16.lua                     |   14 -
 Lua/deckStrangeResources.7aadc0.lua                |   14 -
 Lua/deckVermin.8c28ba.lua                          |   14 -
 README.md                                          |    3 +
 alpha/README.lua                                   |    2 +
 beta/Admin Button.a12e8c.lua                       |   34 +
 beta/Admin Console.e00199.lua                      |  229 +++
 beta/Custom Token.ba32c7.lua                       |  522 ++++++
 beta/Global.-1.lua                                 | 1892 ++++++++++++++++++++
 beta/Level Marker.302128.lua                       |   46 +
 beta/Level Marker.df1a46.lua                       |   46 +
 beta/Monster Board.24f67c.lua                      |  369 ++++
 beta/Nemesis Monsters.0f3f64.lua                   |   29 +
 beta/P1.1a3b6e.lua                                 |  398 ++++
 beta/P2.b5d9e8.lua                                 |  398 ++++
 beta/P3.c4017e.lua                                 |  398 ++++
 beta/P4.3aadbe.lua                                 |  398 ++++
 beta/Quarries.9abd27.lua                           |   29 +
 beta/Speed Token.943c9d.lua                        |   14 +
 beta/Story Board Left.40ac46.lua                   |  496 +++++
 beta/Story Board Top.fece67.lua                    |  496 +++++
 beta/Timeline Events.92b95e.lua                    |   29 +
 beta/Unnamed Survivor.2f95db.lua                   |  630 +++++++
 beta/Unnamed Survivor.42d42b.lua                   |  630 +++++++
 beta/Unnamed Survivor.87d89b.lua                   |  630 +++++++
 beta/Unnamed Survivor.aa7e77.lua                   |  630 +++++++
 beta/deckAbilities.625f68.lua                      |   14 +
 beta/deckBasicHunt.4e9d9e.lua                      |   14 +
 beta/deckBasicResources.4b6997.lua                 |   14 +
 beta/deckDisorders.3a5452.lua                      |   14 +
 beta/deckFightingArts.515434.lua                   |   14 +
 beta/deckSecretFightingArs.b6c374.lua              |   14 +
 beta/deckSevereInjuries.421db1.lua                 |   14 +
 beta/deckSpecialHunt.148b16.lua                    |   14 +
 beta/deckStrangeResources.7aadc0.lua               |   14 +
 beta/deckVermin.8c28ba.lua                         |   14 +
 dist/README.lua                                    |    3 +
 90 files changed, 8491 insertions(+), 19626 deletions(-)
 delete mode 100644 Dist/Admin Button
 delete mode 100644 Dist/Admin Console
 delete mode 100644 Dist/Gear Sheet (Esk)
 delete mode 100644 Dist/Gear Sheet (Nog)
 delete mode 100644 Dist/Global
 delete mode 100644 Dist/Level Marker (Hunt)
 delete mode 100644 Dist/Level Marker (Showdown)
 delete mode 100644 Dist/Monster Board
 delete mode 100644 Dist/README.md
 delete mode 100644 Dist/Settlement Sheet (Nognoth)
 delete mode 100644 Dist/Speed Token
 delete mode 100644 Dist/Story Board Left
 delete mode 100644 Dist/Story Board Top
 delete mode 100644 Dist/Survivor Sheet-Full (Esk)
 delete mode 100644 Dist/Survivor Sheet-Full (Esk-People of the Stars)
 delete mode 100644 Dist/Survivor Sheet-Full (Esk-People of the Sun)
 delete mode 100644 Dist/Survivor Sheet-Full (Nog)
 delete mode 100644 Dist/Survivor Sheet-Mini (Nog)
 delete mode 100644 Dist/Survivor Sheet-MiniMid (Esk)
 delete mode 100644 Dist/Survivor Sheet-MiniMid (Esk-People of the Stars)
 delete mode 100644 Dist/Survivor Sheet-MiniMid (Esk-People of the Sun)
 delete mode 100644 Dist/Survivor Sheet-MiniMin (Esk)
 delete mode 100644 Dist/Survivor Sheet-MiniMin (Esk-People of the Stars)
 delete mode 100644 Dist/Survivor Sheet-MiniMin (Esk-People of the Sun)
 delete mode 100644 Dist/placeholder script
 delete mode 100644 Lua/Admin Button.a12e8c.lua
 delete mode 100644 Lua/Admin Console.e00199.lua
 delete mode 100644 Lua/Custom Token.ba32c7.lua
 delete mode 100644 Lua/Global.-1.lua
 delete mode 100644 Lua/Level Marker.302128.lua
 delete mode 100644 Lua/Level Marker.df1a46.lua
 delete mode 100644 Lua/Monster Board.24f67c.lua
 delete mode 100644 Lua/Nemesis Monsters.0f3f64.lua
 delete mode 100644 Lua/P1.1a3b6e.lua
 delete mode 100644 Lua/P2.b5d9e8.lua
 delete mode 100644 Lua/P3.c4017e.lua
 delete mode 100644 Lua/P4.3aadbe.lua
 delete mode 100644 Lua/Quarries.9abd27.lua
 delete mode 100644 Lua/Speed Token.943c9d.lua
 delete mode 100644 Lua/Story Board Left.40ac46.lua
 delete mode 100644 Lua/Story Board Top.fece67.lua
 delete mode 100644 Lua/Timeline Events.92b95e.lua
 delete mode 100644 Lua/Unnamed Survivor.2f95db.lua
 delete mode 100644 Lua/Unnamed Survivor.42d42b.lua
 delete mode 100644 Lua/Unnamed Survivor.87d89b.lua
 delete mode 100644 Lua/Unnamed Survivor.aa7e77.lua
 delete mode 100644 Lua/deckAbilities.625f68.lua
 delete mode 100644 Lua/deckBasicHunt.4e9d9e.lua
 delete mode 100644 Lua/deckBasicResources.4b6997.lua
 delete mode 100644 Lua/deckDisorders.3a5452.lua
 delete mode 100644 Lua/deckFightingArts.515434.lua
 delete mode 100644 Lua/deckSecretFightingArs.b6c374.lua
 delete mode 100644 Lua/deckSevereInjuries.421db1.lua
 delete mode 100644 Lua/deckSpecialHunt.148b16.lua
 delete mode 100644 Lua/deckStrangeResources.7aadc0.lua
 delete mode 100644 Lua/deckVermin.8c28ba.lua
 create mode 100644 README.md
 create mode 100644 alpha/README.lua
 create mode 100644 beta/Admin Button.a12e8c.lua
 create mode 100644 beta/Admin Console.e00199.lua
 create mode 100644 beta/Custom Token.ba32c7.lua
 create mode 100644 beta/Global.-1.lua
 create mode 100644 beta/Level Marker.302128.lua
 create mode 100644 beta/Level Marker.df1a46.lua
 create mode 100644 beta/Monster Board.24f67c.lua
 create mode 100644 beta/Nemesis Monsters.0f3f64.lua
 create mode 100644 beta/P1.1a3b6e.lua
 create mode 100644 beta/P2.b5d9e8.lua
 create mode 100644 beta/P3.c4017e.lua
 create mode 100644 beta/P4.3aadbe.lua
 create mode 100644 beta/Quarries.9abd27.lua
 create mode 100644 beta/Speed Token.943c9d.lua
 create mode 100644 beta/Story Board Left.40ac46.lua
 create mode 100644 beta/Story Board Top.fece67.lua
 create mode 100644 beta/Timeline Events.92b95e.lua
 create mode 100644 beta/Unnamed Survivor.2f95db.lua
 create mode 100644 beta/Unnamed Survivor.42d42b.lua
 create mode 100644 beta/Unnamed Survivor.87d89b.lua
 create mode 100644 beta/Unnamed Survivor.aa7e77.lua
 create mode 100644 beta/deckAbilities.625f68.lua
 create mode 100644 beta/deckBasicHunt.4e9d9e.lua
 create mode 100644 beta/deckBasicResources.4b6997.lua
 create mode 100644 beta/deckDisorders.3a5452.lua
 create mode 100644 beta/deckFightingArts.515434.lua
 create mode 100644 beta/deckSecretFightingArs.b6c374.lua
 create mode 100644 beta/deckSevereInjuries.421db1.lua
 create mode 100644 beta/deckSpecialHunt.148b16.lua
 create mode 100644 beta/deckStrangeResources.7aadc0.lua
 create mode 100644 beta/deckVermin.8c28ba.lua
 create mode 100644 dist/README.lua

diff --git a/Dist/Admin Button b/Dist/Admin Button
deleted file mode 100644
index 18aae2f..0000000
--- a/Dist/Admin Button	
+++ /dev/null
@@ -1,34 +0,0 @@
---------------------
---KDM Admin Button
--------------------
-
--------------------
---Variables
-------------------
-
--------------------
---Init
---------------------
-function onLoad()
-
-	--show admin
-	self.createButton({
-		click_function = 'showAdmin',
-		function_owner = self,
-		label = 'Show Admin Console',
-		position = {0,0.5,0},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-
-end
-
---------------------
---Fcns
---------------------
-
-function showAdmin()
-	Global.call('showAdmin')
-end
diff --git a/Dist/Admin Console b/Dist/Admin Console
deleted file mode 100644
index 3c59efe..0000000
--- a/Dist/Admin Console	
+++ /dev/null
@@ -1,229 +0,0 @@
---------------------
---KDM Admin Console
--------------------
-
--------------------
---Variables
-------------------
-
--------------------
---Init
---------------------
-function onLoad()
-
-	local label = {}
-	if Global.getVar('autoHunt') == false then
-		label.huntLabel = 'Auto-Hunt is OFF'
-	elseif Global.getVar('autoHunt') == true then
-		label.huntLabel = 'Auto-Hunt is ON'
-	end
-	if Global.getVar('autoShowdown') == false then
-		label.showdownLabel = 'Auto-Showdown is OFF'
-	elseif Global.getVar('autoShowdown') == true then
-		label.showdownLabel = 'Auto-Showdown is ON'
-	end
-	if Global.getVar('devMode') == true then
-		label.devLabel = 'Dev Mode is ON'
-	elseif Global.getVar('devMode') == false then
-		label.devLabel = 'Dev Mode is OFF'
-	end
-	if Global.getVar('autoDeckRefresh') == true then
-		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
-	elseif Global.getVar('autoDeckRefresh') == false then
-		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
-	end
-	if Global.getVar('autoMonsterDeck') == true then
-		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
-	elseif Global.getVar('autoMonsterDeck') == false then
-		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
-	end
-
-
-	--reset saved data
-	self.createButton({
-		click_function = 'clearSavedData',
-		function_owner = self,
-		label = 'Reset Script Variables',
-		position = {4,1,-1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--dev mode(unlock statics)
-	self.createButton({
-		click_function = 'devModeToggle',
-		function_owner = self,
-		label = label.devLabel,
-		position = {4,1,-3},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto hunt
-	self.createButton({
-		click_function = 'autoHuntToggle',
-		function_owner = self,
-		label = label.huntLabel,
-		position = {-4,1,-5},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto showdown
-	self.createButton({
-		click_function = 'autoShowdownToggle',
-		function_owner = self,
-		label = label.showdownLabel,
-		position = {-4,1,-3},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto showdown deck build (inactive)
-	self.createButton({
-		click_function = 'autoShowdownDeckBuildToggle',
-		function_owner = self,
-		label = label.monsterDeckLabel,
-		position = {-4,1,-1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto deck refresh (inactive)
-	self.createButton({
-		click_function = 'autoDeckRefreshToggle',
-		function_owner = self,
-		label = label.deckRefreshLabel,
-		position = {-4,1,1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--hide
-	self.createButton({
-		click_function = 'hideConsole',
-		function_owner = self,
-		label = 'Hide Console',
-		position = {4,1,-5},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-
-end
-
---------------------
---Fcns
---------------------
-
-
-function updateLabels()
-	local buttonList = {}
-	buttonList = self.getButtons()
-	btns = {}
-	for k,v in pairs(buttonList) do
-		local index = v.index
-		local key = v.click_function
-		btns[key] = index
-	end
-
-	params = {}
-	if Global.getVar('autoHunt') == false then
-		params.index = btns.autoHuntToggle
-		params.label = 'Auto-Hunt is OFF'
-		self.editButton(params)
-	elseif Global.getVar('autoHunt') == true then
-		params.index = btns.autoHuntToggle
-		params.label = 'Auto-Hunt is ON'
-		self.editButton(params)
-	end
-	if Global.getVar('autoShowdown') == false then
-		params.index = btns.autoShowdownToggle
-		params.label = 'Auto-Showdown is OFF'
-		self.editButton(params)
-	elseif Global.getVar('autoShowdown') == true then
-		params.index = btns.autoShowdownToggle
-		params.label = 'Auto-Showdown is ON'
-		self.editButton(params)
-	end
-	if Global.getVar('devMode') == true then
-		params.index = btns.devModeToggle
-		params.label = 'Dev Mode is ON'
-		self.editButton(params)
-	elseif Global.getVar('devMode') == false then
-		params.index = btns.devModeToggle
-		params.label = 'Dev Mode is OFF'
-		self.editButton(params)
-	end
-	if Global.getVar('autoDeckRefresh') == true then
-		params.index = btns.autoDeckRefreshToggle
-		params.label = 'Essential Deck Refresh (INACTIVE)'
-		self.editButton(params)
-	elseif Global.getVar('autoDeckRefresh') == false then
-		params.index = btns.autoDeckRefreshToggle
-		params.label = 'Essential Deck Refresh (INACTIVE)'
-		self.editButton(params)
-	end
-	if Global.getVar('autoMonsterDeck') == true then
-		params.index = btns.autoShowdownDeckBuildToggle
-		params.label = 'Showdown Deckbuilder (INACTIVE)'
-		self.editButton(params)
-	elseif Global.getVar('autoMonsterDeck') == false then
-		params.index = btns.autoShowdownDeckBuildToggle
-		params.label = 'Showdown Deckbuilder (INACTIVE)'
-		self.editButton(params)
-	end
-end
-
-function clearSavedData()
-	Global.setVar('clearSavedData', true)
-	printToAll('Saved scripted variables have been cleared.',{0,0.8,0})
-	printToAll('IMPORTANT, Manually delete any remaining hunt/showdown components that would normally be cleaned up or you may trigger errors in future auto setups.',{0.8,0,0})
-	printToAll('Save and reload the game to complete variable reset.',{0,0.8,0})
-end
-
-function autoHuntToggle()
-	Global.call('toggleAutoHunt')
-	updateLabels()
-end
-
-function autoShowdownToggle()
-	Global.call('toggleAutoShowdown')
-	updateLabels()
-end
-
-function autoShowdownDeckBuildToggle()
-	printToAll('Feature is not implemented.',{0.8,0,0})
-	Global.call('toggleAutoMonsterDeck')
-	updateLabels()
-end
-
-function autoDeckRefreshToggle()
-	printToAll('Feature is not implemented.',{0.8,0,0})
-	Global.call('toggleAutoDeckRefresh')
-	updateLabels()
-end
-
-function devModeToggle()
-	Global.call('toggleDevMode')
-	updateLabels()
-end
-
-function hideConsole()
-	local params = {0,5,80}
-	self.setPosition(params)
-	self.interactable = false
-	self.setRotation({0,180,180})
-end
-
-function showConsole()
-
-
-end
diff --git a/Dist/Gear Sheet (Esk) b/Dist/Gear Sheet (Esk)
deleted file mode 100644
index 903170b..0000000
--- a/Dist/Gear Sheet (Esk)	
+++ /dev/null
@@ -1,355 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-	dx = -1.3; dy = -10.5; px =3.32
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px - 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px
-	createCounter('armor_legs', 'big', dx, dy)
-	
-	dx = -0.2; dy = -10.45; px = 3.32; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px + 0.08; dy = dy - py
-	createToggle('injury_body_l', dx, dy); dy = ry
-	createToggle('injury_body_h', dx, dy); dx = dx + px; dy = dy - py
-	createToggle('injury_wasit_l', dx, dy); dy = ry
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px -0.08; dy = dy - py
-	createToggle('injury_arms_l', dx, dy); dy = ry
-	createToggle('injury_arms_h', dx, dy); dx = dx + px; dy = dy - py
-	createToggle('injury_legs_l', dx, dy); dy = ry
-	createToggle('injury_legs_h', dx, dy)
-	
-	dx = 12; dy = -9.5;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 180, height = 250, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 200, height = 200, font = 300},
-        button = {width = 250, height = 250, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.std = {
-		display = {width = 800, height = 250, font = 130},
-		button = {width = 0, height = 0, font = 100},
-		offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
diff --git a/Dist/Gear Sheet (Nog) b/Dist/Gear Sheet (Nog)
deleted file mode 100644
index 6acfcc0..0000000
--- a/Dist/Gear Sheet (Nog)	
+++ /dev/null
@@ -1,398 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-    dx = 6.35; dy = -8.7; px =2.36
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
-	createCounter('armor_legs', 'big', dx, dy)
-
-	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px;
-	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_body_h', dx, dy); dx = dx + px;
-	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
-	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_arms_h', dx, dy); dx = dx + px;
-	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_legs_h', dx, dy)
-
-    dx = 18; dy = -5.25;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
---make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 800, height = 250, font = 130},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 1000},
-        button = {width = 280, height = 280, font = 350},
-        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 280, height = 280, font = 290},
-        button = {width = 300, height = 300, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
diff --git a/Dist/Global b/Dist/Global
deleted file mode 100644
index 72e951a..0000000
--- a/Dist/Global
+++ /dev/null
@@ -1,1892 +0,0 @@
---KDM Global Script
---script created by Eskander
---script v0.3
-
-----------------------------------------------------------------
---Globals
-----------------------------------------------------------------
-
----------------------
---Edit Prefs
----------------------
---unsaved
-bypassSavedLoad = false 	-- used to bypass load init manually
-prologueBypass = true  	--not ready, keep true
---saved
-clearSavedData = false 		-- used to clear save data
-autoHunt = true		--allows automatic hunt deployment of objects
-autoShowdown = true 	--allows automatic showdown deployment of objects
-autoMonsterDeck = false		--not ready, keep false
-autoDeckRefresh = false		--not ready, keep false
-debug = false		--not ready, keep false
-devMode = false		--changes interactive for static/placeholder objects, toggles rest interactive options below
-interactBox = false 	--makes gamebox interactable if true
-interactPlaceholders = false 	-- makes placeholders interactable if true
-interactStatics = false		--makes static objs interactable if true
-
----------------------
---Vars
----------------------
---tables
-messages = {
-	msgLine = '__________________________________________',
-	msgBlank = '                                          ',
-	msgPageBreak = '------------------------------------------',
-	msgWelcomeTitle = 'Welcome to KINGDOM DEATH MONSTER.',
-	msgWelcomeSubtitle = "Brought to TTS by Nognoth's consortium.",
-	msgSettingUpHunt1 = 'The survivors have chosen their quarry. A ',
-	msgSettingUpHunt2 = '. The survivors prepare...',
-	msgHuntIsSetup1 = 'The Hunt for the ',
-	msgHuntIsSetup2 = ' awaits.  Prepare any Special Hunt Events and begin.',
-	msgHuntCleared = 'The Hunt is ended. The untaken paths erased.',
-	msgSettingUpShowdown1 = 'Before the survivors stands the ',
-	msgSettingUpShowdown2 = '...',
-	msgShowdownIsSetup = 'The survivors prepare to fight.',
-	msgShowdownCleared = 'The battle ends.  The settlement provides refuge for any that survive.'
-}
-
-boards = {
-	boardHunt = {guid = 'f6a581'},
-	boardMonster = {guid = '24f67c'},
-	boardStoryL = {guid = '40ac46'},
-	boardStoryR = {guid = 'a4960e'},
-boardStoryT = {guid = ' fece67'}
-}
-
-staticObjs = {
-	gameBox = {guid = '93281a'},
-	consoleAdmin = {guid = 'e00199'},
-	decorPlayerL = {guid = 'fc9c14'},
-	decorPlayerR = {guid = 'ef94c5'},
-	decorTableExtension = {guid = '12090a'},
-	decorTableEdgeD = {guid = 'ca277c'},
-	decorTableEdgeL = {guid = '32e351'},
-	decorTableEdgeR = {guid = 'f01594'},
-	decorTableEdgeU = {guid = '80e8da'},
-	decorBackPanelL = {guid = '22cf74'},
-	decorBackPanelR = {guid = 'aee909'},
-	decorBackPlanelSR = {guid = 'cfe52c'},
-	decorBackPlanelSL = {guid = '029e44'},
-	decorUpperTable1 = {guid = '1c9769'},
-	decorUpperTable2 = {guid = '0e954b'},
-	decorUpperTable3 = {guid = 'fee027'},
-	decorUpperTable4 = {guid = '053039'},
-}
-
-placeholders = {
-	--essentialDecks
-	deckBasicHunt = {guid = '4e9d9e'},
-	deckSpecialHunt = {guid = '148b16'},
-	deckAbilities = {guid = '625f68'},
-	deckSecretFightingArs = {guid = 'b6c374'},
-	deckFightingArts = {guid = '515434'},
-	deckDisorders = {guid = '3a5452'},
-	deckStrangeResources = {guid = '7aadc0'},
-	deckBasicResources = {guid = '4b6997'},
-	deckVermin = {guid = '8c28ba'},
-	deckTerrain = {guid = '51b305'},
-	deckSevereInjuries = {guid = '421db1'},
-	--monsterDecks
-	deckMonsterHunt = {guid = 'e80e92'},
-	deckMonsterSpecialHunt = {guid = '1dca94'},
-	deckMonsterResources = {guid = 'f8c095'},
-	deckMonsterAIBasic = {guid = 'be3886'},
-	deckMonsterAIAdvanced = {guid = '3b984a'},
-	deckMonsterAILegendary = {guid = '918627'},
-	deckMonsterAISpecial = {guid = 'da09a1', flip = true},
-	cardMonsterBasicAction = {guid = 'ce146d'},
-	deckMonsterHitLocations = {guid = '24cc56'},
-	--terrainspawn
-	cardTerrain1 = {guid = '15a593', flip = true},
-	cardTerrain2 = {guid = 'ec1cc4', flip = true},
-	cardTerrain3 = {guid = 'fc1740', flip = true},
-	cardTerrain4 = {guid = 'fa7080', flip = true},
-	cardTerrain5 = {guid = 'fe26f3', flip = true},
-	--huntPos
-	cardHunt1 = {guid = '5ba408', flip = true},
-	cardHunt2 = {guid = 'e17cae', flip = true},
-	cardHunt3 = {guid = '29c3c8', flip = true},
-	cardHunt4 = {guid = '0a3d67', flip = true},
-	cardHunt5 = {guid = 'b2af08', flip = true},
-	cardHunt6 = {guid = 'd32460', flip = true},
-	cardHunt7 = {guid = '9bac20', flip = true},
-	cardHunt8 = {guid = 'b344bb', flip = true},
-	cardHunt9 = {guid = 'd1549b', flip = true},
-	cardHunt10 = {guid = 'da6ad7', flip = true},
-	cardHunt11 = {guid = '9ce940', flip = true},
-	cardHunt12 = {guid = '4ac212', flip = true},
-	cardHunt13 = {guid = '5ac354', flip = true},
-}
-
-essentialDecks = {
-	--essential card decks
-	deckBasicHunt = {
-		guid = 'a0bf77',
-		name = 'Basic Hunt Events Deck',
-		description = 'essential, hunt, basic',
-		minCount = 12
-	},
-	deckSpecialHunt = {
-		guid = 'ca5915',
-		name = 'Special Hunt Events Deck',
-		description = 'essential, hunt, special',
-		minCount = 2
-	},
-	deckAbilities = {
-		guid = '092e97',
-		name = 'Abilities Deck',
-		description = 'essential, character, abilities',
-		minCount = 45
-	},
-	deckSecretFightingArs = {
-		guid = 'd08a37',
-		name = 'Secret Fighting Arts Deck',
-		description = 'essential, character, fighting art, secret',
-		minCount = 6
-	},
-	deckFightingArts = {
-		guid = '48e0af',
-		name = 'Fighting Arts Deck',
-		description = 'essential, character, fighting art',
-		minCount = 20
-	},
-	deckDisorders = {
-		guid = 'bd1ee8',
-		name = 'Disorders Deck',
-		description = 'essential, character, disorder',
-		minCount = 23
-	},
-	deckStrangeResources = {
-		guid = '697d92',
-		name = 'Strange Resources Deck',
-		description = 'essential, resource, strange',
-		minCount = 21
-	},
-	deckBasicResources = {
-		guid = '6668a5',
-		name = 'Basic Resources Deck',
-		description = 'essential, resource, basic',
-		minCount = 21
-	},
-	deckVermin = {
-		guid = '19d17b',
-		name = 'Vermin Deck',
-		description = 'essential, vermin',
-		minCount = 8
-	},
-	deckTerrain = {
-		guid = '4f9528',
-		name = 'Terrain Deck',
-		description = 'essential, terrain card',
-		minCount = 21
-	},
-	deckSevereInjuries = {
-		guid = '5be3e9',
-		name = 'Severe Injuries Deck',
-		description = 'essential, character, psi',
-		minCount = 18
-	},
-}
-
-	--added monster decks
-monsterDecks = {
-	deckMonsterHunt = {
-		name = '__ Hunt Events Deck',
-	},
-	deckMonsterSpecialHunt = {
-		name = '__ Special Hunt Events Deck',
-	},
-	deckMonsterResources = {
-		name = '__ Resources Deck',
-	},
-	deckMonsterAIBasic = {
-		name = '__ Basic AI Deck',
-	},
-	deckMonsterAIAdvanced = {
-		name = '__ Advanced AI Deck',
-	},
-	deckMonsterAILegendary = {
-		name = '__ Legendary AI Deck',
-	},
-	deckMonsterAISpecial = {
-		name = '__ Special AI Deck',
-	},
-	cardMonsterBasicAction = {
-		name = '__ Basic Action Card',
-	},
-	deckMonsterHitLocations = {
-		name = '__ Hit Locations Deck',
-	},
-}
-
-zones = {
-	zoneAll = {guid ='fc5df0'},
-	--general areas
-	zoneMain = {guid = 'f7d522'},
-	zoneHunt = {guid = '8fdea1'},
-	zoneSettlement = {guid = '000000'},
-	zoneSurvivors = {guid = '83dc7e'},
-	--specific areas
-	zoneStoryL = {guid = 'df9ce3'},
-	zoneStoryR = {guid = '7ede24'},
-	zoneStoryT = {guid = '6097d8'},
-	zoneP1 = {guid = '000000'},
-	zoneP2 = {guid = '000000'},
-	zoneP3 = {guid = '000000'},
-	zoneP4 = {guid = '000000'},
-	--essential decks
-	deckBasicHunt = {guid = '9e8411'},
-	deckSpecialHunt = {guid = '9b055d'},
-	deckAbilities = {guid = 'fd06c1'},
-	deckSecretFightingArs = {guid = 'c0437f'},
-	deckFightingArts = {guid = 'ad419f'},
-	deckDisorders = {guid = '682896'},
-	deckStrangeResources = {guid = '7c3e97'},
-	deckBasicResources = {guid = '405bff'},
-	deckVermin = {guid = '5cccc8'},
-	deckTerrain = {guid = '09fd7e'},
-	deckSevereInjuries = {guid = 'b29037'}
-}
-
-currentQuarryTable = {'null'}
-currentShowdownTable = {'null'}
-
---vars
---[[ INACTIVE, placeholders used instead
-offsetXHuntCards = {-27.5,-22.92,-18.3,-13.75,-9.17,-4.58,0,4.58,9.17,13.75,18.3,22.92,27.5}
-offsetScaleHuntBoard = 0.425000429
---]]
-
---tracking
---always saved
-firstGameLoad = true
-currentHuntLevel = 1
-currentShowdownLevel = 1
---saved unless cleared
-huntInProgress = false
-huntSettingUp = false
-showdownInProgress = false
-showdownSettingUp = false
-cancelHuntSetup = false
-monsterFigurinePlaced = nil
-monsterResourcePlaced = false
-monsterResourceToBePlace = false
-cancelShowdownSetup = false
-huntCleaning = false
-showdownCleaning = false
-huntCleanPending = false
-showdownCleanPending = false
-
-
---Colors
-rgbWhite = {1,1,1}
-rgbBlack = {0,0,0}
-rgbDarkRed = {0.8,0,0}
-rgbError = {1,0,0}
-rgbSystem = {0,1,0}
-rgbNarrator = {0.3,0.6,0.8}
-
-
----------------------
---Save data
----------------------
-function onSave()
-    local dataToSave = {}
-
-	if clearSavedData == false then
-		dataToSave = {
-			['clearSavedData'] = clearSavedData,
-			['autoHunt'] = autoHunt,
-			['autoShowdown'] = autoShowdown,
-			['autoMonsterDeck'] = autoMonsterDeck,
-			['autoDeckRefresh'] = autoDeckRefresh,
-			['debug'] = debug,
-			['devMode'] = devMode,
-			['interactBox'] = interactBox,
-			['interactPlaceholders'] = interactPlaceholders,
-			['interactStatics'] = interactStatics,
-			['currentQuarryTable'] = currentQuarryTable,
-			['currentShowdownTable'] = currentShowdownTable,
-			['firstGameLoad'] = firstGameLoad,
-			['currentHuntLevel'] = currentHuntLevel,
-			['currentShowdownLevel'] = currentShowdownLevel,
-			['huntInProgress'] = huntInProgress,
-			['huntSettingUp'] = huntSettingUp,
-			['showdownInProgress'] = showdownInProgress,
-			['showdownSettingUp'] = showdownSettingUp,
-			['cancelHuntSetup'] = cancelHuntSetup,
-			['monsterFigurinePlaced'] = monsterFigurinePlaced,
-			['monsterResourcePlaced'] = monsterResourcePlaced,
-			['monsterResourceToBePlace'] = monsterResourceToBePlace,
-			['cancelShowdownSetup'] = cancelShowdownSetup,
-			['huntCleaning'] = huntCleaning,
-			['showdownCleaning'] = showdownCleaning,
-			['huntCleanPending'] = huntCleanPending,
-			['showdownCleanPending'] = showdownCleanPending,
-		}
-	else
-		dataToSave = {
-			['clearSavedData'] = clearSavedData,
-			['autoHunt'] = autoHunt,
-			['autoShowdown'] = autoShowdown,
-			['autoMonsterDeck'] = autoMonsterDeck,
-			['autoDeckRefresh'] = autoDeckRefresh,
-			['debug'] = debug,
-			['devMode'] = devMode,
-			['interactBox'] = interactBox,
-			['interactPlaceholders'] = interactPlaceholders,
-			['interactStatics'] = interactStatics,
-			['firstGameLoad'] = firstGameLoad,
-			['currentQuarryTable'] = currentQuarryTable,
-			['currentShowdownTable'] = currentShowdownTable,
-			['currentHuntLevel'] = currentHuntLevel,
-			['currentShowdownLevel'] = currentShowdownLevel,
-		}
-	end
-
-	saved_data = JSON.encode(dataToSave)
-
-	--Uncomment this line to manually clear the save data
-	--saved_data = ''
-
-    return saved_data
-end
-
-----------------------------------------------------------------
---Initialize
-----------------------------------------------------------------
-
-function onLoad(saved_data)
-	----------------------------initial chat messages
-	printToAll(messages.msgLine,rgbBlack)
-	printToAll(messages.msgBlank,rgbBlack)
-	printToAll(messages.msgWelcomeTitle,rgbDarkRed)
-	printToAll(messages.msgWelcomeSubtitle,rgbWhite)
-	printToAll(messages.msgLine,rgbBlack)
-
-	--load saved from previous session
-	if bypassSavedLoad == false then
-		if saved_data != '' then
-			resumeLoadInit(saved_data)
-		else
-			clearSavedData = false
-		end
-	end
-
-	--------------------------------always init
-	--[[deactivated
-	--clear deprecated zones
-	local objs = getAllObjects()
-	local protected = false
-	for k,v in pairs (objs) do
-		if v.tag == 'Scripting' then
-			protected = false
-			for j, h in pairs (zones) do
-				if h.guid == v.guid then
-					protected = true
-				end
-			end
-			if protected == false then
-				v.destruct()
-			end
-		end
-	end
-	--]]
-	
-	------------------admin move/resize zones, normally disabled
-	--[[--]]
-	local zone = getObjectFromGUID(zones.zoneAll.guid)
-	local pos = zone.getPosition()
-	local adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	local scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneHunt.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneMain.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneSurvivors.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneAll.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	
-	
-	
-	-----------------load essential obj refs
-	gameBox = getObjectFromGUID(staticObjs.gameBox.guid)
-	consoleAdmin = getObjectFromGUID(staticObjs.consoleAdmin.guid)
-
-
-	
-	--[[deactivated
-	--update essential obj zones
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		local rot = obj.getRotation()
-		local pos = obj.getPosition()
-		zones[k] = spawnObject({
-			type = 'ScriptingTrigger',
-			position = pos,
-			rotation = rot,
-			scale = {3, 3, 3}
-		})
-	end
-	--]]
-
-	---------------load prefs
-	if devMode == true then
-		devModeOn()
-	else
-		devModeOff()
-	end
-	if interactBox == true then
-		unlockGameBox()
-	else
-		lockGameBox()
-	end
-	if interactPlaceholders == true then
-		unlockPlaceholders()
-	else
-		lockPlaceholders()
-	end
-	if interactStatics == true then
-		unlockStatics()
-	else
-		lockStatics()
-	end
-
-	--prologue setup load, not ready yet
-	if prologueBypass == false and firstGameLoad == true then
-		prologueInit()
-	elseif firstGameLoad == true then
-		firstGameLoad = false
-		bypassPrologueLoad()
-	else
-		fullLoadInit()
-	end
-end
-
------------------------------------------loads saved vars from previous session
-function resumeLoadInit(saved_data)
-	local dataToLoad = JSON.decode(saved_data)
-	clearSavedData = dataToLoad.clearSavedData
-	autoHunt = dataToLoad.autoHunt
-	autoShowdown = dataToLoad.autoShowdown
-	autoMonsterDeck = dataToLoad.autoMonsterDeck
-	autoDeckRefresh = dataToLoad.autoDeckRefresh
-	debug = dataToLoad.debug
-	devMode = dataToLoad.devMode
-	interactBox = dataToLoad.interactBox
-	interactPlaceholders = dataToLoad.interactPlaceholders
-	interactStatics = dataToLoad.interactStatics
-	firstGameLoad = dataToLoad.firstGameLoad
-	currentQuarryTable = dataToLoad.currentQuarryTable
-	currentShowdownTable = dataToLoad.currentShowdownTable
-	currentHuntLevel = dataToLoad.currentHuntLevel
-	currentShowdownLevel = dataToLoad.currentShowdownLevel
-	if clearSavedData == false then
-		huntInProgress = dataToLoad.huntInProgress
-		huntSettingUp = dataToLoad.huntSettingUp
-		showdownInProgress = dataToLoad.showdownInProgress
-		showdownSettingUp = dataToLoad.showdownSettingUp
-		cancelHuntSetup = dataToLoad.cancelHuntSetup
-		monsterFigurinePlaced = dataToLoad.monsterFigurinePlaced
-		monsterResourcePlaced = dataToLoad.monsterResourcePlaced
-		monsterResourceToBePlace = dataToLoad.monsterResourceToBePlace
-		cancelShowdownSetup = dataToLoad.cancelShowdownSetup
-		huntCleaning = dataToLoad.huntCleaning
-		showdownCleaning = dataToLoad.showdownCleaning
-		huntCleanPending = dataToLoad.huntCleanPending
-		showdownCleanPending = dataToLoad.showdownCleanPending
-	else
-		clearSavedData = false
-	end
-end
-
-
-
---------------------------------loads only prologue setup, currently not ready
-function prologueInit()
-	printToAll('Choose how to proceed. Choose wisely.', rgbNarrator)
-	--gameBox2 = getObjectFromGUID('')
-end
-
---------------------------------loads all assets that would be loaded in stages during prologue
-function bypassPrologueLoad()
-	fullLoadInit()
-end
-
------------------------------------------loads normal full init
-function fullLoadInit()
-	--board ref
-	boardHunt = getObjectFromGUID(boards.boardHunt.guid)
-	boardMonster = getObjectFromGUID(boards.boardMonster.guid)
-
-end
-
-
-----------------------------------------------------------------
---Prologue setup
-----------------------------------------------------------------
-
---triggered by bypass button press, players read the intro story, guided on state change for manuals
-function prologue1()
-	--move manual gamebox, setscale difference
-	gameBox2.setPosition({30,10,30})
-	gameBox2.setScale({1,1,1})
-	--get bag of prologue items
-	prologueBag = gameBox2.takeObject({guid = '',position = {0,0,-30},rotation = {0,0,0}})
-	prologueBag.lock()
-	--spawn prologue book
-	prologueBag.takeObject({guid = '',position = {0,0,0},rotation ={0,0,0}})
-	--spawn guide for state change
-	prologueBag.takeObject({guid = '',position = {0,0,10},rotation ={0,0,0}})
-	--spawn essential decks
-	sstartLuaCoroutine(Global, 'spawnEssentials1Coroutine')
-end
-
-function spawnEssentials1Coroutine()
-	local decks = {}
-	local d = 1
-	for k, v in pairs(essentialDecks) do
-		local params = {}
-		params.guid = v.guid
-		local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
-		params.position = {pos[1],pos[2] + 2,pos[3]}
-		params.rotation = getObjectFromGUID(placeholders[k].guid).getRotation()
-		decks[d] = prologueBag.takeObject(params)
-		d = d + 1
-		for i=1, 30 do
-			coroutine.yield(0)
-		end
-	end
-	for k, v in pairs(decks) do
-		v.shuffle()
-	end
-	return 1
-end
-
-
---triggered by state change to char gen page, players introed to char stations and set char names
-function prologue2()
-	--load player stations,starting gear, figurines, stat tokens, and sheet bags
-	--spawn guides for sheets
-	--spawn manual for create char
-end
-
---triggered by state change on last story page, players introed to showdown setup
-function prologue3()
-	--load lion statue, showdown setup story book, other needed story books
-	--load guides for setting up showdown
-	--load manual for conducting showdown
-end
-
---triggered by showdown cleanup, players introed to settlement phase
-function prologue4()
-	--spawn settlement board, settlement sheets, settlement guides, settlement story books, innovations board, settlement upgrades
-end
-
---triggered by??
-function prologue5()
-	--spawn hunt board, hunt guide, hunt etc
-end
-
-
-
-
-----------------------------------------------------------------
---Admin Console
-----------------------------------------------------------------
-
-function showAdmin()
-	local params = {0, 10, 0}
-	consoleAdmin.setPosition(params)
-	consoleAdmin.interactable = true
-	consoleAdmin.setRotation({0,180,0})
-end
-
-function togglePlaceholders()
-	if interactPlaceholders == false then
-		unlockPlaceholders()
-	else
-		lockPlaceholders()
-	end
-end
-
-function lockPlaceholders()
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		if obj != nil then
-			obj.tooltip = false
-			obj.lock()
-			obj.interactable = false
-		end
-	end
-	interactPlaceholders = false
-end
-
-function unlockPlaceholders()
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		if obj != nil then
-			obj.tooltip = true
-			obj.unlock()
-			obj.interactable = true
-		end
-	end
-	interactPlaceholders = true
-end
-
-function toggleGameBox()
-	if gameBox.interactable == true then
-		gameBox.interactable = false
-		interactBox = false
-	else
-		gameBox.interactable = true
-		interactBox = true
-	end
-end
-
-function unlockGameBox()
-	gameBox.interactable = true
-	interactBox = true
-end
-
-function lockGameBox()
-	gameBox.interactable = false
-	interactBox = false
-end
-
-function devModeOn()
-	unlockGameBox()
-	unlockPlaceholders()
-	unlockStatics()
-	devMode = true
-end
-
-function devModeOff()
-	lockGameBox()
-	lockPlaceholders()
-	lockStatics()
-	devMode = false
-end
-
-function toggleDevMode()
-	if devMode == true then
-		devModeOff()
-	elseif devMode == false then
-		devModeOn()
-	end
-end
-
-
-function unlockStatics()
-	for k, v in pairs(staticObjs) do
-		if k != gameBox or k != consoleAdmin then
-			local object = getObjectFromGUID(v.guid)
-			object.interactable = true
-		end
-	end
-	interactStatics = true
-end
-
-function lockStatics()
-	for k, v in pairs(staticObjs) do
-		if k != gameBox or k != consoleAdmin then
-			local object = getObjectFromGUID(v.guid)
-			object.interactable = false
-		end
-	end
-	interactStatics = false
-end
-
-function toggleAutoHunt()
-	if autoHunt == true then
-		autoHunt = false
-	elseif autoHunt == false then
-		autoHunt = true
-	end
-end
-
-function toggleAutoShowdown()
-	if autoShowdown == true then
-		autoShowdown = false
-	elseif autoShowdown == false then
-		autoShowdown = true
-	end
-end
-
-function toggleAutoMonsterDeck()
-	if autoMonsterDeck == true then
-		autoMonsterDeck = false
-	elseif autoMonsterDeck == false then
-		autoMonsterDeck = true
-	end
-end
-
-function toggleAutoDeckRefresh()
-	if deckRefresh == true then
-		deckRefresh = false
-	elseif deckRefresh == false then
-		deckRefresh = true
-	end
-end
-
-
-
-----------------------------------------------------------------
---Common Utility Functions
-----------------------------------------------------------------
-
---[[ ------------------------------custom get obj fcn, searches for obj(s) through custom searches
-types of search and params
-tag = search for objs by tags, includes/excludes, params = {conditional = 'and' or 'or', criteria = string looked for, exclude = strings to exclude obj if found}
-name = search for objs by name, with varying strings, params = {conditional = 'contains' or 'matches', criteria = string looked for, exclude = strings to exclude obj if found}
---]]
-function getObj(searchType, container, params)  --params = {conditional = '', criteria = {}, exclude = {}}
-	if container != nil then
-		local containerType = container.tag
-		local objs = container.getObjects()
-		local objGUIDs = {}
-		local text = {}
-		local excludes = params.exclude
-		local includes = params.criteria
-		local objAdded = false
-		local isFound = false
-		local foundCount = 0
-		if searchType ==  'tag' then
-			for k, v in pairs(objs) do
-				objAdded = false
-				isFound = false
-				foundCount = 0
-				text = v.getDescription()
-				for i = 1, #includes do
-					if string.find(string.lower(text), string.lower(includes[i])) then
-						foundCount = foundCount + 1
-					end
-				end
-				if params.conditional == 'and' then
-					if foundCount == #includes then
-						isFound = true
-					end
-				elseif params.conditional == 'or' then
-					if foundCount > 0 then
-						isFound = true
-					end
-				end
-				if isFound == true then
-					table.insert(objGUIDs, v.getGUID())
-					objAdded = true
-				end
-				isFound = false
-				if #excludes > 0 then
-					for i = 1, #excludes do
-						if string.find(string.lower(text), string.lower(excludes[i])) then
-							isFound = true
-						end
-					end
-					if objAdded == true and isFound == true then
-						table.remove(objGUIDs)
-					end
-				end
-			end
-		elseif searchType == 'name' then
-			for k, v in pairs(objs) do
-				objAdded = false
-				isFound = false
-				if containerType == 'Bag' then
-					text = v.name
-				elseif containerType == 'Deck' then
-					text = v.nickname
-				else
-					text = v.getName()
-				end
-				for i = 1, #includes do
-					if params.conditional == 'matches' then
-						if text == includes[i] then
-							isFound = true
-						end
-
-					elseif params.conditional == 'contains' then
-						if string.find(text, includes[i]) then
-							isFound = true
-						end
-					end
-					if isFound == true then
-						table.insert(objGUIDs, v.guid)
-						objAdded = true
-					end
-				end
-				isFound = false
-				if #excludes > 0 then
-					for i = 1, #excludes do
-						if params.conditional == 'matches' then
-							if text == excludes[i] then
-								isFound = true
-							end
-						elseif params.conditional == 'contains' then
-							if string.find(text, excludes[i]) then
-								isFound = true
-							end
-						end
-					end
-					if objAdded == true and isFound == true then
-						table.remove(objGUIDs)
-					end
-				end
-			end
-		end
-		if #objGUIDs > 0 then
-			local obj = {}
-			if containerType == 'Bag' or containerType == 'Deck' then
-				obj = objGUIDs
-			else
-				for i=1,#objGUIDs do
-					obj[i] = getObjectFromGUID(objGUIDs[i])
-				end
-			end
-			return obj
-		else
-			return nil
-		end
-	else
-		printToAll('Container not found!',rgbError)
-	end
-end
-
-----------------------spawn from box
-function spawnFromBox(objects, paramsOverride)
-	local dy = 0
-	local dz = 120
-	local py = 2
-	local pz = -3
-	local params = {}
-	local params2 = {}
-	local result = {}
-	local result2 = {}
-	local container = gameBox
-	for k,v in pairs(objects) do
-		--set params
-		if paramsOverride != nil then
-			params.position = paramsOverride.position
-			params.rotation = paramsOverride.rotation
-		else
-			local placeholder = getObjectFromGUID(placeholders[k].guid)
-			params.position = placeholder.getPosition()
-			params.rotation = placeholder.getRotation()
-			if placeholders[k].flip != nil then
-				if placeholders[k].flip == true then
-					params.rotation.z = 0
-				end
-			end
-		end
-		params.position[2] = params.position[2] + 5
-		params.guid = v
-		--take
-		result[k] = container.takeObject(params)
-		--dupe
-		coroutine.yield(0)
-		if result[k] != nil then
-			dz = dz + pz
-			dy = dy + py
-			params2.position = gameBox.getPosition()
-			params2.position.z = params2.position.z + dz
-			result2[k] = duplicate(result[k], params2)
-			for i=1,45,1 do
-				coroutine.yield(0)
-			end
-			params2.position = gameBox.getPosition()
-			params2.position.y = params2.position.y + dy
-			result2[k].setPositionSmooth(params2.position)
-			for i=1,45,1 do
-				coroutine.yield(0)
-			end
-			--if result[k].tag == 'Deck' then
-				--result[k].shuffle()
-			--end
-			--coroutine.yield(0)
-		else
-			printToAll(k .. ' not found! Check component in Master Game Box or remove excess decks on placeholder.', rgbError)
-		end
-	end
-	return result
-end
-
-
--------------------duplicate object
-function duplicate(object, params)
-	if object != nil then
-		return object.clone(params)
-	else
-		return nil
-	end
-end
-
-
-
--------------------clear objs
-function cleanup(searchType, container, params)
-	local killList = getObj(searchType, container, params)
-	if killList != nil or killList != null then
-		for k,v in pairs(killList) do
-			v.destruct()
-		end
-		return true
-	else
-		return false
-	end
-end
-
----------------------findDeck or card
-function findDeck(zone)
-	local isDeck = false
-	local obj = {}
-	local deck = {}
-	local card = {}
-	local objs = zone.getObjects()
-	for k, v in pairs(objs) do
-		if string.find(v.tag,'Deck') then
-			isDeck = true
-			deck = v
-		elseif string.find(v.tag, 'Card') then
-			isDeck = false
-			card = v
-		end
-	end
-	local foundDeck = {}
-	if isDeck == true then
-		foundDeck = {deck, 'Deck'}
-		return foundDeck
-	elseif isDeck == false and card != nil then
-		foundDeck = {card, 'Card'}
-		return foundDeck
-	else
-		return nil
-	end
-end
-
----------------------trig calc
-function trig(obj, distance)
-    local r = obj.getRotation()[2]
-    r = math.rad(r)
-    return {distance * math.cos(r), 0, distance * math.sin(r)}
-end
-
-
----------------------findPos
-function findPos(var)
-	local guid =  placeholder[var].guid
-	local placeholder = getObjectFromGUID(guid)
-	local params = {}
-	if placeholder != nil or null then
-		local pos = placeholder.getPosition()
-		local rot = placeholder.getRotation()
-		params = {position = pos, rotation = rot}
-		return params
-	else
-		printToAll('Placeholder not found.', rgbError)
-		return nil
-	end
-end
-
------------------------check counts of essential objs
-function checkSumEssentials(table, var)
-	local checkSumPass = nil
-	if getObjectFromGUID(table[var].guid) != nil then
-		object = getObjectFromGUID(table[var].guid)
-		if object.getQuantity() < table[var].minCount then
-			checkSumPass = false
-			printToAll('Checksum on ' .. var .. ' failed.  Missing ' .. table[var].minCount - object.getQuantity() .. ' components...', rgbSystem)
-		else
-			checkSumPass = true
-		end
-	end
-	return checkSumPass
-end
-
-----------------------check essential decks -- checks decks by guid, returns table of [1]good decks and [2]broken decks by var
-function checkEssentialDecks(deckVars)
-	local decksToCheck = {}
-	local decksBroken = {}
-	local decksGood = {}
-	if deckVars != nil then
-		decksToCheck = deckVars
-	else
-		for k, v in pairs(essentialDecks) do
-			table.insert(decksToCheck, k)
-		end
-	end
-	for k,v in pairs(decksToCheck) do
-		local guid = essentialDecks[v].guid
-		if getObjectFromGUID(guid) == nil then
-			table.insert(decksBroken, v)
-		else
-			table.insert(decksGood, v)
-		end
-	end
-	local result = {decksGood, decksBroken}
-	return result
-end
-
-
---------------------reset essential decks --gets deck by guid, resets, and checks count, returns true if meets count, false if not, and nil if no deck
-function resetEssentialDeck(deckVar)
-	local deck = getObjectFromGUID(essentialDecks[deckVar].guid)
-	local reset = false
-	if deck != nil then
-		deck.reset()
-		for i=1, 60 do
-			coroutine.yield(0)
-		end
-		local count = deck.getQuantity()
-		if count < essentialDecks[deckVar].minCount then
-			reset = false
-		else
-			reset = true
-		end
-	else
-		reset = nil
-	end
-	return reset
-end
-
----------------------reconstruct essential decks --attempts to repair by getting all the cards to manually reset deck without changing deck
-function reconstructEssentialDeck(deckVar, zoneVar)
-	local reconstructed = false
-	local zone = {}
-	if zoneVar == nil then
-		zone = getObjectFromGUID(zones.zoneMain.guid)
-	else
-		zone = getObjectFromGUID(zones[zoneVar].guid)
-	end
-	local description = essentialDecks[deckVar].description
-	local nospaces = string.gsub(description, ' ', '')
-	local tags = {}
-	for i in string.gmatch(nospaces, '%a+') do
-		table.insert(tags, i)
-	end
-	local cards = getObj('tag',zone,{conditional = 'and', criteria = tags, exclude = {}})
-	local newDeck = {}
-	if cards != nil then
-		local i = 0
-		for k,v in pairs(cards) do
-			if v.tag != 'Deck' then
-				i=i+1
-				local pos = getObjectFromGUID(placeholders[deckVar].guid).getPosition()
-				local rot = getObjectFromGUID(placeholders[deckVar].guid).getRotation()
-				v.setPositionSmooth({pos[1],pos[2] + i+1,pos[3]})
-				v.setRotationSmooth(rot)
-			end
-		end
-		for i=1,120 do
-			coroutine.yield(0)
-		end
-	end
-	--rename/retag deck
-	local result = findDeck(getObjectFromGUID(zones[deckVar].guid))
-	if result[2] == 'Deck' then
-		local deck = result[1]
-		if deck != nil then
-			deck.setName(essentialDecks[deckVar].name)
-			deck.setDescription(essentialDecks[deckVar].description)
-			deck.tooltip = false
-			essentialDecks[deckVar].guid = deck.getGUID()
-			reconstructed = true
-		end
-	end
-	return reconstructed
-end
-
-----------------------respawn essential deck
-function respawnEssentialDeck(deckVar)
-	--purge existing
-	local description = essentialDecks[deckVar].description
-	local nospaces = string.gsub(description, ' ', '')
-	local tags = {}
-	for i in string.gmatch(nospaces, '%a+') do
-		table.insert(tags, i)
-	end
-	local zone = getObjectFromGUID(zones.zoneHunt.guid)
-	cleanup('tag',zone,{conditional = 'and', criteria = tags, exclude = {'drawn'}})
-	coroutine.yield(0)
-	--spawn new
-	local result = {}
-	local getDeck = getObj('name',gameBox, {conditional = 'matches',criteria = {essentialDecks[deckVar].name}, exclude = {}})
-	for k,v in pairs(getDeck) do
-		result[deckVar] = v
-	end
-	local deck = spawnFromBox(result, nil)
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	deck[deckVar].shuffle()
-	essentialDecks[deckVar].guid = deck[deckVar].guid
-end
-
-------------------debug essential decks
-function debugEssentialDecks(deckVars)
-	--identify bad decks
-	local checkPass = false
-	local checkedDecks = checkEssentialDecks(deckVars)
-	local badDecks = {}
-	local decksBroken = {}
-	local checkSum = nil
-	local decksBroken = checkedDecks[2]
-	if #decksBroken > 0 then
-		for k,v in pairs(checkedDecks[2]) do
-			table.insert(badDecks, v)
-		end
-	end
-	local decksGood = {}
-	local decksGood = checkedDecks[1]
-	if #decksGood > 0 then
-		for k,v in pairs(decksGood) do
-			checkSum = checkSumEssentials(essentialDecks, v)
-			if checkSum == false then
-				table.insert(badDecks, v)
-			end
-		end
-	end
-	local checkFail = false
-	if #badDecks < 1 then
-		checkPass = true
-	else
-		printToAll('Essential Deck failure. Attempting to repair...',rgbSystem)
-		--attempt repair
-		for k, v in pairs(badDecks) do
-			local deckVar = v
-			--printToAll(deckVar .. ' resetting...',rgbSystem)
-			local reset = resetEssentialDeck(deckVar)
-			if reset == false or reset == nil then
-				local fixed = false
-				--printToAll(deckVar .. ' reset failed...',rgbSystem)
-				--printToAll(deckVar .. ' reconstructing...',rgbSystem)
-				local reconstructed = reconstructEssentialDeck(deckVar, 'zoneMain')
-				if reconstructed == true then
-					--printToAll(deckVar .. ' reconstructed. Checksum...',rgbSystem)
-					for i=1,60 do
-						coroutine.yield(0)
-					end
-					checkSum = checkSumEssentials(essentialDecks, deckVar)
-					if checkSum == true then
-						fixed = true
-					end
-				else
-					--printToAll(deckVar .. ' reconstruct failed...',rgbSystem)
-				end
-				if fixed == false then
-					--printToAll(deckVar .. ' respawning from archive...',rgbSystem)
-					local deck = respawnEssentialDeck(deckVar)
-					--printToAll(deckVar .. ' respawned...',rgbSystem)
-					fixed = true
-				end
-			else
-				--printToAll(deckVar .. ' has reset...',rgbSystem)
-			end
-			--printToAll(deckVar .. ' final checksum...',rgbSystem)
-			checkSum = checkSumEssentials(essentialDecks, deckVar)
-			if checkSum == nil or checkSum == false then
-				printToAll('Automated debug of Essential Deck ' .. deckVar .. 'failed! Repair manually.', rgbError)
-				checkFail = true
-			end
-		end
-		if checkFail == true then
-			checkPass = false
-		else
-			checkPass = true
-		end
-		if checkPass == true then
-			printToAll('Repair successful.',rgbSystem)
-		end
-	end
-	debuggingDecks = false
-
-	return checkPass
-end
-
-
-----------------------------------------------------------------
---Features Functions
-----------------------------------------------------------------
-
-----------------------
---AutoHunt
-----------------------
-
-
---------launcher
-function setupHunt(monsterTable)
-	if huntInProgress == false and huntSettingUp == false and autoHunt == true and showdownInProgress == false and showdownSettingUp == false then
-		if monsterTable != nil then
-			currentQuarryTable = monsterTable
-		end
-		if currentQuarryTable.huntCardPlacement == nil or currentQuarryTable.huntLocation == nil then
-			printToAll(currentQuarryTable.monster .. ' cannot be hunted. ' .. currentQuarryTable.monster .. ' hunts you!', rgbError )
-			currentQuarryTable = nil
-		else
-			if showdownSettingUp == true or showdownCleaning == true then
-				if huntSetupPending != true then
-					huntSetupPending = true
-					startLuaCoroutine(Global, 'huntStandbyCoroutine')
-				end
-			else
-				huntSettingUp = true
-				if monsterResourcePlaced == true then
-					local zone = getObjectFromGUID(zones.zoneHunt.guid)
-					cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {}})
-					monsterResourcePlaced = false
-				end
-				startLuaCoroutine(Global,'setupHuntCoroutine')
-			end
-		end
-	elseif huntInProgress == true or huntSettingUp == true then
-			printToAll('A Hunt is already in progress!',rgbError)
-	elseif showdownInProgress == true or showdownSettingUp == true then
-			printToAll('A Showdown is already in progress!',rgbError)
-	end
-end
-
-function huntStandbyCoroutine()
-	while showdownSettingUp == true do
-		coroutine.yield(0)
-	end
-	while showdownCleaning == true do
-		coroutine.yield(0)
-	end
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	huntSetupPending = false
-	setupHunt()
-	return 1
-end
-
-
------------coroutine
-function setupHuntCoroutine()
-	local huntTable = currentQuarryTable
-	local monster = huntTable.monster
-	
-	printToAll(messages.msgSettingUpHunt1 .. monster .. messages.msgSettingUpHunt2, rgbNarrator)
-
-	--find components to spawn
-	local container = gameBox
-	local componentsToGet = {
-		deckMonsterHunt = {monster, 'Hunt Events Deck', 'matches'},
-		deckMonsterResources = {monster, 'Resources Deck', 'matches'},
-		deckMonsterSpecialHunt = {monster, 'Special Hunt Events Deck', 'matches'},
-	}
-	local result = {}
-	local result2 = {}
-	for k,v in pairs(componentsToGet) do
-		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
-		if result[k] != nil then
-			for j, h in pairs(result) do
-				result2[k] = h[1]
-			end
-		else
-			if k == 'deckMonsterSpecialHunt' or k == 'deckMonsterResources' then
-			else
-				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
-				cancelHuntSetup = true
-			end
-		end
-	end
-
-	--spawn components
-	if cancelHuntSetup == false then
-		local objects = {}
-		local objects = spawnFromBox(result2, nil)
-		local decks = {}
-		for k,v in pairs(objects) do
-
-			if v.tag == 'Deck' then
-				decks[k] = v
-			end
-		end
-		for k, v in pairs(decks) do
-			v.shuffle()
-		end
-		--wait for cards to settle
-		for i=1,30,1 do
-			coroutine.yield(0)
-		end
-		monsterResourcePlaced = true
-
-
-		--check essential decks
-		debuggingDecks = true
-		local essential = {'deckBasicHunt','deckSpecialHunt'}
-		local checkPass = debugEssentialDecks(essential)
-		while debuggingDecks == true do
-			coroutine.yield(1)
-		end
-		if checkPass != true then
-			cancelHuntSetup = true
-		end
-		
-		--[[disabled until fixed
-		--reset look decks
-		local lootDecks = {'deckBasicResources','deckStrangeResources','deckVermin'}
-		local lootDeck = {}
-		for k, v in pairs(lootDecks) do
-			lootDeck = respawnEssentialDeck(v)
-			coroutine.yield(0)
-		end
-		--]]
-
-		--set positions for hunt cards
-		getHuntPositions()
-
-		--set params
-		local params = {}
-		params.rotation = {}
-		params.position = {}
-
-		if cancelHuntSetup == false then
-			--determine cards to which location and deal cards to hunt board
-			local huntSpace = huntTable.huntCardPlacement
-			local basicHuntDeck = getObjectFromGUID(essentialDecks.deckBasicHunt.guid)
-			for i=1,#huntSpace do
-				params.position = huntPos[i]
-				params.rotation = huntRot[i]
-				if huntSpace[i] == 'E' then
-					decks.deckMonsterHunt.takeObject(params)
-				elseif huntSpace[i] == 'S' then
-					decks.deckMonsterSpecialHunt.takeObject(params)
-				elseif huntSpace[i] == '' then
-					basicHuntDeck.takeObject(params)
-				end
-				coroutine.yield(0)
-			end
-
-			--wait for cards to settle
-			for i=1,120,1 do
-				coroutine.yield(0)
-			end
-			placeHuntMonster()
-
-			setupHuntClose(monster)
-		else
-			printToAll('Hunt setup is cancelling due to critical error.',rgbError)
-			huntSettingUp = false
-			huntInProgress = true
-			cleanupHunt()
-			cancelHuntSetup = false
-		end
-	else
-		printToAll('Hunt setup is cancelling due to critical error.',rgbError)
-		huntSettingUp = false
-		huntInProgress = true
-		cleanupHunt()
-		cancelHuntSetup = false
-	end
-	return 1
-end
-
---set hunt pos by placeholders
-function getHuntPositions()
-	huntPos = {}
-	huntRot = {}
-	for i=1, 13 do
-		local var = 'cardHunt' .. tostring(i)
-		local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
-		local position = {pos[1], pos[2] + 1, pos[3]}
-		huntPos[i] = position
-		local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
-		huntRot[i] = rot
-	end
-end
-
-
---[[ INACTIVE, set position by board version
-function getHuntPositions()
-	--set positions for hunt cards
-	huntPos = {}
-	huntRot = {}
-	local offset = {}
-	local scale = boardHunt.getScale()
-	scale = offsetScaleHuntBoard / scale.x
-	offset = offsetXHuntCards
-	--translate offsets by any scale changes
-	local offsetScaled = {}
-	for i=1, #offset do
-		offsetScaled[i] = offset[i] * scale
-	end
-	local origin = {}
-	origin = boardHunt.getPosition()
-
-	--translate offsets with trig and set positions
-	for i=1, #offsetScaled do
-		local offsetTrig = {}
-		offsetTrig[i] = trig(boardHunt,offset[i])
-		huntPos[i] = {origin.x + offsetTrig[i][1], origin.y + offsetTrig[i][2] + 1, origin.z + offsetTrig[i][3]}
-	end
-	for i=1, 13 do
-		huntRot[i] = {boardHunt.getRotation().x, boardHunt.getRotation().y, boardHunt.getRotation().z + 180}
-end
---]]
-
----------------place monster by level
-function placeHuntMonster()
-	local monster = currentQuarryTable.monster
-	local placedMonster = ''
-	if monsterFigurinePlaced != nil or huntMonsterFigurine != nil then
-		placedMonster = monsterFigurinePlaced
-		if placedMonster != monster or huntMonsterFigurine == nil then
-			--clear other monster figurines
-			local zone = getObjectFromGUID(zones.zoneMain.guid)
-			cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
-			monsterFigurinePlaced = nil
-		end
-	end
-	--place monster
-	if monsterFigurinePlaced == nil then
-		local huntTable = currentQuarryTable
-		local level = currentHuntLevel
-		local location = huntTable.huntLocation
-		local space = location[level]
-		getHuntPositions()
-		local params = {}
-		params.position = huntPos[space]
-		params.rotation = {boardHunt.getRotation().x, boardHunt.getRotation().y + 180, boardHunt.getRotation().z}
-		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {monster}, exclude = {}})
-		if figurineGUID == nil then
-			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
-		else
-			local figureTable = spawnFromBox(figurineGUID, params)
-			huntMonsterFigurine = figureTable[1]
-			monsterFigurinePlaced = monster
-		end
-	end
-end
-
--------------------change hunt level
-function changeHuntLevel(level)
-	local unconvertedLevel = level[1]
-	local num = string.gsub(unconvertedLevel,'lvl','')
-	currentHuntLevel = tonumber(num)
-	--update monster position
-	getHuntPositions()
-	if huntMonsterFigurine != nil and huntPos != nil and huntInProgress == true then
-		local huntTable = currentQuarryTable
-		local space = huntTable.huntLocation[currentHuntLevel]
-		local pos = huntPos[space]
-		huntMonsterFigurine.setPositionSmooth({pos[1], pos[2] + 2, pos[3]})
-	end
-end
-
-
----------------------closing fcn for hunt setup
-function setupHuntClose(monster)
-	huntInProgress = true
-	huntSettingUp = false
-	printToAll(messages.msgHuntIsSetup1 .. monster .. messages.msgHuntIsSetup2,rgbNarrator)
-end
-
--------------------clean up hunt
-function cleanupHunt()
-	if huntSettingUp == false and huntInProgress == true and huntCleaning == false and huntCleanPending == false then
-		huntCleaning = true
-		startLuaCoroutine(Global,'cleanupHuntCoroutine')
-	elseif huntSettingUp == true and huntCleaning == false and huntCleanPending == false then
-		huntCleanPending = true
-		startLuaCoroutine(Global,'cleanupHuntCoroutineStandby')
-	end
-end
-
-function cleanupHuntCoroutineStandby()
-	while huntSettingUp == true do
-		coroutine.yield(0)
-	end
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	huntCleanPending = false
-	startLuaCoroutine(Global,'cleanupHuntCoroutine')
-	return 1
-end
-
-function cleanupHuntCoroutine()
-	--clear components
-	local zone = getObjectFromGUID(zones.zoneHunt.guid)
-	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'hunt'}, exclude = {'resource'}})
-
-	--reset essential decks
-	--reset basic hunt deck
-	local deck = 'deckBasicHunt'
-	resetEssentialDeck(deck)
-	deck = 'deckSpecialHunt'
-	resetEssentialDeck(deck)
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	local decks = {'deckBasicHunt', 'deckSpecialHunt'}
-	debugEssentialDecks(decks)
-
-	--wait for cards to settle
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	huntInProgress = false
-	huntSettingUp = false
-	printToAll(huntCleared,rgbNarrator)
-	huntCleaning = false
-	return 1
-end
-
-
-----------------------
---AutoShowdown
-----------------------
-
---------launcher
-function setupShowdown(monsterTable)
-	if showdownInProgress == false and showdownSettingUp == false and showdownCleaning == false and autoShowdown == true then
-		if monsterTable != nil then
-			currentShowdownTable = monsterTable
-		end
-		if huntSettingUp == true or huntCleaning == true then
-			if showdownSetupPending != true then
-				showdownSetupPending = true
-				startLuaCoroutine(Global, 'showdownStandbyCoroutine')
-			end
-		else
-			showdownSettingUp = true
-			if monsterResourcePlaced == true then
-				if currentQuarryTable.monster != nil then
-					if currentShowdownTable.monster != currentQuarryTable.monster then
-						local zone = getObjectFromGUID(zones.zoneMain.guid)
-						local criteriaParam = currentQuarryTable.monster .. ' Resources Deck'
-						cleanup('name', zone, {conditional = 'matches', criteria = {criteriaParam}, exclude = {}})
-						monsterResourcePlaced = false
-					end
-				end
-			end
-			startLuaCoroutine(Global,'setupShowdownCoroutine')
-		end
-	elseif showdownInProgress == true or showdownSettingUp == true then
-		printToAll('The survivors are already in a fight!',rgbError)
-	end
-end
-
-function showdownStandbyCoroutine()
-	while huntSettingUp == true do
-		coroutine.yield(0)
-	end
-	while huntCleanPending == true do
-		coroutine.yield(0)
-	end
-	while huntCleaning == true do
-		coroutine.yield(0)
-	end
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	showdownSetupPending = false
-	setupShowdown()
-	return 1
-end
-
------------coroutine
-function setupShowdownCoroutine()
-	local showdownTable = currentShowdownTable
-	local monster = showdownTable.monster
-
-	printToAll(messages.msgSettingUpShowdown1 .. monster .. messages.msgSettingUpShowdown2, rgbNarrator)
-
-	--find components to spawn
-	local container = gameBox
-	local componentsToGet = {
-		cardMonsterBasicAction = {monster, 'Basic Action Card', 'matches'},
-		deckMonsterHitLocations = {monster, 'Hit Locations Deck', 'matches'},
-		deckMonsterAIBasic = {monster, 'Basic AI Deck', 'matches'},
-		deckMonsterAIAdvanced = {monster, 'Advanced AI Deck', 'matches'},
-		deckMonsterAILegendary = {monster, 'Legendary AI Deck', 'matches'},
-		deckMonsterAISpecial = {monster, 'Special AI Deck', 'matches'},
-	}
-	local huntMonster = ''
-	if currentQuarryTable != nil then
-		huntMonster = currentQuarryTable.monster
-	end
-	if monsterResourcePlaced == false then
-		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
-	elseif monster != huntMonster then
-		--clear old monster Resources
-		local zone = getObjectFromGUID(zones.zoneMain.guid)
-		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {'drawn'}})
-		coroutine.yield(0)
-		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
-	end
-	local result = {}
-	local result2 = {}
-	for k,v in pairs(componentsToGet) do
-		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
-		if result[k] != nil then
-			for j, h in pairs(result) do
-				result2[k] = h[1]
-			end
-		else
-			if k == 'deckMonsterAIAdvanced' or k == 'deckMonsterAISpecial' or k == 'deckMonsterAILegendary' or k == 'deckMonsterAISpecial' or k == 'deckMonsterResources' then
-			else
-				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
-				cancelShowdownSetup = true
-			end
-		end
-	end
-
-	--spawn components
-	if cancelShowdownSetup == false then
-		local objects = {}
-		local objects = spawnFromBox(result2, nil)
-		local decks = {}
-		for k,v in pairs(objects) do
-			if v.tag == 'Deck' then
-				decks[k] = v
-			end
-			if string.find(string.lower(v.getDescription()), string.lower('resource')) then
-				monsterResourcePlaced = true
-			end
-		end
-		for i=1,30 do
-			coroutine.yield(0)
-		end
-		for k, v in pairs(decks) do
-			v.shuffle()
-		end
-
-		--spawn monster
-		placeShowdownMonster()
-
-		coroutine.yield(0)
-
-		--spawn terrain
-		generateShowdownTerrain()
-
-		--wait for cards to settle
-		for i=1,120,1 do
-			coroutine.yield(0)
-		end
-
-		setupShowdownClose(monster)
-	else
-		printToAll('Showdown setup is cancelling due to critical error.',rgbError)
-		showdownSettingUp = false
-		showdownInProgress = true
-		cleanupShowdown()
-	end
-	return 1
-end
-
-function placeShowdownMonster()
-	local huntMonster = ''
-	if currentQuarryTable != nil then
-		huntMonster = currentQuarryTable.monster
-	end
-	local showdownMonster = currentShowdownTable.monster
-	local params = {}
-	params.position = {-9.5,2,0}
-	params.rotation = {0,180,0}
-	if  showdownMonster == huntMonster and huntMonsterFigurine != nil then
-		--move hunt figurine to showdown
-		huntMonsterFigurine.setPositionSmooth(params.position)
-		huntMonsterFigurine.setRotationSmooth(params.rotation)
-	else
-		--clear other monster figurines
-		local zone = getObjectFromGUID(zones.zoneMain.guid)
-		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
-		monsterFigurinePlaced = nil
-		--spawn new figurine
-		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {showdownMonster}, exclude = {}})
-		if figurineGUID == nil then
-			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
-		else
-			local figureTable = spawnFromBox(figurineGUID, params)
-			showdownMonsterFigurine = figureTable[1]
-			monsterFigurinePlaced = showdownMonster
-		end
-	end
-end
-
-function generateShowdownTerrain()
-	local cancelTerrainSetup = false
-	--get card counts by type
-	local inputTable = currentShowdownTable.showdownTerrain.specifiedCards
-	local specifiedCards = {}
-	if inputTable != nil then
-		for k,v in pairs (inputTable) do
-			local prefix = string.sub(v,1,2)
-			local cardName = string.gsub(v,prefix,'')
-			local string = string.gsub(prefix, ' ', '')
-			local integer = tonumber(string)
-			specifiedCards[cardName] = integer
-		end
-		--check terrain deck
-		local decks = {'deckTerrain'}
-		debugEssentialDecks(decks)
-		--get cards to take
-		local cardsToTake = {}
-		local tilesToGet = {}
-		local num = 1
-		local deck = getObjectFromGUID(essentialDecks.deckTerrain.guid)
-		for k, v in pairs (specifiedCards) do
-			local count = 1
-			local maxCount = v
-			local result = {}
-			local keyLabel = ''
-			result[k] = getObj('name', deck, {conditional = 'matches', criteria = {k},exclude = {}})
-			if result[k] != nil then
-				local result2 = {}
-				for i=1, #result[k] do
-					if count <=maxCount then
-						result2[i] = result[k][i]
-						local var = 'cardTerrain' .. tostring(num)
-						num = num + 1
-						count = count + 1
-						cardsToTake[var] = result2[i]
-						tilesToGet[var] = k
-					end
-				end
-			else
-				printToAll(k .. ' is missing from the Terrain Deck. Manually setup Terrain.', rgbError)
-				cancelTerrainSetup = true
-			end
-		end
-
-		if cancelTerrainSetup == false then
-			--take cards
-			local cardsTaken = {}
-			local params = {}
-			for k, v in pairs (cardsToTake) do
-				local rot = getObjectFromGUID(placeholders.cardTerrain1.guid).getRotation()
-				params.rotation = {rot[1], rot[2], 0}
-				local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
-				params.position = {pos[1], pos[2] + 2, pos[3]}
-				params.guid = v
-				cardsTaken[k] = deck.takeObject(params)
-
-				for i = 1, 30 do
-					coroutine.yield(0)
-				end
-			end
-
-			deck.shuffle()
-
-			for i=1,30 do
-				coroutine.yield(0)
-			end
-
-			--spawn random cards
-			local randomCount = currentShowdownTable.showdownTerrain.randomCards
-			params = {}
-			for i=1, randomCount do
-				local var = 'cardTerrain' .. tostring(num)
-				num = num + 1
-				local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
-				params.rotation = {rot[1], rot[2], 0}
-				local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
-				params.position = {pos[1], pos[2] + 2, pos[3]}
-				cardsTaken[var] = deck.takeObject(params)
-			end
-
-				--[[ inactive
-			--get tiles
-			local tilesToTake = {}
-			for k,v in pairs (tilesToGet) do
-				local result = {}
-				result = getObj('name', getObjectFromGUID(staticObjs.gameBox.guid), {conditional = 'matches', criteria = {v}, exclude = {}})
-				if result[1] != nil then
-
-					tilesToTake[k] = result[1]
-
-				--]]
-
-		end
-	end
-end
-
----------------------closing fcn for showdown setup
-function setupShowdownClose(monster)
-	showdownInProgress = true
-	showdownSettingUp = false
-	printToAll(messages.msgShowdownIsSetup,rgbNarrator)
-end
-
----------------------level change for showdown monster
-function changeShowdownLevel(level)
-	local unconvertedLevel = level[1]
-	--update monster stats
-	if showdownInProgress == true then
-		local showdownTable = currentShowdownTable
-		local stats = {}
-		local stats = showdownTable.showdownStats[unconvertedLevel]
-		if stats != nil then
-			local board = getObjectFromGUID(boards.boardMonster.guid)
-			board.setTable('transferStats', stats)
-			board.call('transfer', nil)
-		end
-	end
-end
-
--------------------clean up showdown
-function cleanupShowdown()
-	if showdownSettingUp == false and showdownInProgress == true and showdownCleanPending == false and showdownCleaning == false then
-		showdownCleaning = true
-		startLuaCoroutine(Global,'cleanupShowdownCoroutine')
-	elseif showdownSettingUp == true and showdownCleaning == false and showdownCleanPending == false then
-		showdownCleanPending = true
-		startLuaCoroutine(Global,'cleanupShowdownCoroutineStandby')
-	end
-end
-
-function cleanupShowdownCoroutineStandby()
-	while showdownSettingUp == true do
-		coroutine.yield(0)
-	end
-	showdownCleanPending = false
-	startLuaCoroutine(Global,'cleanupShowdownCoroutine')
-	return 1
-end
-
-function cleanupShowdownCoroutine()
-	--clear components
-	local zone = getObjectFromGUID(zones.zoneMain.guid)
-	cleanup('tag', zone, {conditional = 'and', criteria = {'terrain tile'}, exclude = {}})
-	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown'}, exclude = {'drawn'}})
-	--reset terrain deck
-	local deck = 'deckTerrain'
-	resetEssentialDeck(deck)
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	local decks = {deck}
-	debugEssentialDecks(decks)
-
-	local board = getObjectFromGUID(boards.boardMonster.guid)
-	board.call('clear', nil)
-
-	for i=1, 60 do
-		coroutine.yield(0)
-	end
-
-	monsterFigurinePlaced = nil
-	monsterResourcePlaced = false
-	showdownInProgress = false
-	showdownSettingUp = false
-	currentQuarryTable = {'null'}
-	currentShowdownTable = {'null'}
-	printToAll(messages.msgShowdownCleared,rgbNarrator)
-	showdownCleaning = false
-	return 1
-end
diff --git a/Dist/Level Marker (Hunt) b/Dist/Level Marker (Hunt)
deleted file mode 100644
index 8d38443..0000000
--- a/Dist/Level Marker (Hunt)	
+++ /dev/null
@@ -1,46 +0,0 @@
---KDM Level Marker for Hunt
-
--------------------------
---variables
----------------------------
-
-level1guid = '8c918d'
-level2guid = '844c0e'
-level3guid = '5ffbab'
------------------------
---init
-------------------------
-function onLoad()
-	initialized = true
-end
-
-
-------------------------
---Triggers
-------------------------
-function onCollisionEnter(info)
-	if info.collision_object != nil and initialized == true then
-		local obj = info.collision_object
-		local guid = obj.getGUID()
-		local level = ''
-		if guid == level1guid then
-			level = 'lvl1'
-			changeHuntLevel(level)
-		elseif guid == level2guid then
-			level = 'lvl2'
-			changeHuntLevel(level)
-		elseif guid == level3guid then
-			level = 'lvl3'
-			changeHuntLevel(level)
-		end
-	end
-end
-
-
--------------------------
---Global Calls
-------------------------
-
-function changeHuntLevel(level)
-	Global.call('changeHuntLevel', {level})
-end
diff --git a/Dist/Level Marker (Showdown) b/Dist/Level Marker (Showdown)
deleted file mode 100644
index 961b9fe..0000000
--- a/Dist/Level Marker (Showdown)	
+++ /dev/null
@@ -1,46 +0,0 @@
---KDM Level Marker for Showdown
-
--------------------------
---variables
----------------------------
-
-level1guid = 'd55917'
-level2guid = 'c0087a'
-level3guid = '6d5b9b'
------------------------
---init
-------------------------
-function onLoad()
-	initialized = true
-end
-
-
-------------------------
---Triggers
-------------------------
-function onCollisionEnter(info)
-	if info.collision_object != nil and initialized == true then
-		local obj = info.collision_object
-		local guid = obj.getGUID()
-		local level = ''
-		if guid == level1guid then
-			level = 'lvl1'
-			changeShowdownLevel(level)
-		elseif guid == level2guid then
-			level = 'lvl2'
-			changeShowdownLevel(level)
-		elseif guid == level3guid then
-			level = 'lvl3'
-			changeShowdownLevel(level)
-		end
-	end
-end
-
-
--------------------------
---Global Calls
-------------------------
-
-function changeShowdownLevel(level)
-	Global.call('changeShowdownLevel', {level})
-end
diff --git a/Dist/Monster Board b/Dist/Monster Board
deleted file mode 100644
index 0611203..0000000
--- a/Dist/Monster Board	
+++ /dev/null
@@ -1,369 +0,0 @@
--- KDM Survivor Sheet lazily adapted by Eskander (FULL SIZE VERSION)
--- Script adapted from soulburner's DnD sheets
--- which seems to have been adapted from Universal Counter Tokens by Mr. Stump
--- this script is a chimaera, you can likely easily clean it up
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-    local data_to_save = {}
-        data_to_save.saved_counts = {}
-        for i,v in pairs(buttons.counts) do
-            data_to_save.saved_counts[tostring(i)] = v or 0
-        end
-
-    saved_data = JSON.encode(data_to_save)
-	data_for_transfer = data_to_save
-
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-transferStats = {}
-
--------------
---transfer from level
--------------
-function transfer()
-	if transferStats != nil then
-		for k,v in pairs(transferStats) do
-			buttons.counts[k] = v
-		end
-	end
-	updateDisplay(false)
-end
-
-function clear()
-	if transferStats != nil then
-		for k,v in pairs(transferStats) do
-			buttons.counts[k] = 0
-		end
-	end
-	updateDisplay(false)
-end
---------------------
-
---Loads the saved data then creates the buttons
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-
-    ------------------------------
-    --Edit below this line
-    ------------------------------
-	thick = 0.14
-
-	--stats
-	dx = -0.74; dy =-2.4; py = 0.8
-	createCounter('lck', 'big', dx, dy); dy = dy + py;
-	createCounter('mov', 'big', dx, dy); dy = dy + py;
-	createCounter('acc', 'big', dx, dy); dy = dy + py;
-	createCounter('evs', 'big', dx, dy); dy = dy + py;
-	createCounter('spd', 'big', dx, dy); dy = dy + py;
-	createCounter('dmg', 'big', dx, dy); dy = dy + py;
-	createCounter('tgh', 'big', dx, dy); dy = dy + py;
-	
-	
-	
-	
-	
-
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-
-
-    ------------------------------
-    --Don't touch below this line
-    ------------------------------
-
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --Checks if there is a saved data. If there is, it gets the saved value for 'buttons.counts.ct'
-
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
-
-
-------------------------------
---customize sizes
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-
-
-    --make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 25, height = 25, font = 50},
-        button = {width = 25, height = 25, font = 50},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 50, height = 50, font = 50},
-        offsets = { bottomButtons = {x = 0.075, y = 0, z = -0.34}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-
-    buttons.params.sizes.toggle = {
-        display = {width = 25, height = 25, font = 50},
-        button = {width = 25, height = 25, font = 50},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 50},
-        button = {width = 50, height = 50, font = 50},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-
-end
-
-----------------------
---actions on button click
------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location)
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        --params.type = 'PlayerPawn'
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-		--final_pos = {pos.x + 2, pos.y, pos.z+2}
-
-        o = spawnObject({
-            type = 'backgammon_piece_brown',
-            --position = {mpos[1] + pos.x, mpos[2] + pos.y+2, mpos[3] - pos.z},
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            --position = button.position,
-            scale = {1, 1, 1}
-        })
-        --o.position = button.position
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
-
-
---This is activated when onload runs. This sets all parameters for our buttons.
---I do not have to put this all into a function, but I prefer to do it this way.
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-			--if label == '+' then
-				--isLeft = true
-			--elseif label == '-' then
-				--isLeft = false
-			--end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-    --updateDisplay()
-
-end
-
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            if (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
diff --git a/Dist/README.md b/Dist/README.md
deleted file mode 100644
index 4f7d702..0000000
--- a/Dist/README.md
+++ /dev/null
@@ -1,3 +0,0 @@
-# KDM-TTS-Mod
-
-This is an example readme. We should put a brief description of what we're doing here, and instructions on how to get started (DETAILED instructions on the loop from pulling info from github, making a change, testing it locally. and pushing it back.
diff --git a/Dist/Settlement Sheet (Nognoth) b/Dist/Settlement Sheet (Nognoth)
deleted file mode 100644
index ddcd20e..0000000
--- a/Dist/Settlement Sheet (Nognoth)	
+++ /dev/null
@@ -1,522 +0,0 @@
---KDM Nog Settlement Sheet
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.05
-
-	--example counter (clicky +/- to change number)
-    dx = 0.29; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy1', 'big', dx, dy)
-
-	--example counter (clicky +/- to change number)
-    dx = 0.73; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy4', 'big', dx, dy)
-	
-	--example counter (clicky +/- to change number)
-    dx = 1.18; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy5', 'big', dx, dy)
-
-	--example textfield (clicky to make a text field with edit button)
-	dx = 0.7; dy = -2.2 --position of vert/horizontal
-	createTextField('thingy3','txt', dx, dy)
-
-	--example of a series aligned horizontally with each other
-	dx = -1.359; dy = -2.179; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('A', dx, dy); dy = dy + py;
-	createToggle('B', dx, dy); dy = dy + py;
-	createToggle('C', dx, dy); dy = dy + py;
-	createToggle('D', dx, dy); dy = dy + py;
-	createToggle('E', dx, dy); dy = dy + py;
-	createToggle('F', dx, dy); dy = dy + py;
-	createToggle('G', dx, dy); dy = dy + py;
-	createToggle('H', dx, dy); dy = dy + py;
-	createToggle('I', dx, dy); dy = dy + py;
-	createToggle('J', dx, dy)
-	dx = -1.359; dy = -1.347; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AA', dx, dy); dy = dy + py;
-	createToggle('BB', dx, dy); dy = dy + py;
-	createToggle('CC', dx, dy); dy = dy + py;
-	createToggle('DD', dx, dy); dy = dy + py;
-	createToggle('EE', dx, dy); dy = dy + py;
-	createToggle('FF', dx, dy); dy = dy + py;
-	createToggle('GG', dx, dy); dy = dy + py;
-	createToggle('HH', dx, dy); dy = dy + py;
-	createToggle('II', dx, dy); dy = dy + py;
-	createToggle('JJ', dx, dy)
-	dx = -1.359; dy = -0.51; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AAA', dx, dy); dy = dy + py;
-	createToggle('BBB', dx, dy); dy = dy + py;
-	createToggle('CCC', dx, dy); dy = dy + py;
-	createToggle('DDD', dx, dy); dy = dy + py;
-	createToggle('EEE', dx, dy); dy = dy + py;
-	createToggle('FFF', dx, dy); dy = dy + py;
-	createToggle('GGG', dx, dy); dy = dy + py;
-	createToggle('HHH', dx, dy); dy = dy + py;
-	createToggle('III', dx, dy); dy = dy + py;
-	createToggle('JJJ', dx, dy)
-	dx = -1.359; dy = 0.328; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AAAA', dx, dy); dy = dy + py;
-	createToggle('BBBB', dx, dy); dy = dy + py;
-	createToggle('CCCC', dx, dy); dy = dy + py;
-	createToggle('DDDD', dx, dy); dy = dy + py;
-	createToggle('EEEE', dx, dy); dy = dy + py;
-	createToggle('FFFF', dx, dy); dy = dy + py;
-	createToggle('GGGG', dx, dy); dy = dy + py;
-	createToggle('HHHH', dx, dy); dy = dy + py;
-	createToggle('IIII', dx, dy); dy = dy + py;
-	createToggle('JJJJ', dx, dy)
-	
-	dx = -1.303; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Quarry', dx, dy); dy = dy + py;
-	createToggle('Quarry1', dx, dy); dy = dy + py;
-	createToggle('Quarry2', dx, dy); dy = dy + py;
-	createToggle('Quarry3', dx, dy); dy = dy + py;
-	createToggle('Quarry4', dx, dy); dy = dy + py;
-	
-	dx = -0.5; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Quarry5', dx, dy); dy = dy + py;
-	createToggle('Quarry6', dx, dy); dy = dy + py;
-	createToggle('Quarry7', dx, dy); dy = dy + py;
-	createToggle('Quarry8', dx, dy); dy = dy + py;
-	createToggle('Quarry9', dx, dy); dy = dy + py;
-	
-	dx = 0.351; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem', dx, dy); dy = dy + py;
-	createToggle('Nem1', dx, dy); dy = dy + py;
-	createToggle('Nem2', dx, dy); dy = dy + py;
-	createToggle('Nem3', dx, dy); dy = dy + py;
-	createToggle('Nem4', dx, dy); dy = dy + py;
-	
-	dx = 0.87; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem5', dx, dy); dy = dy + py;
-	createToggle('Nem6', dx, dy); dy = dy + py;
-	createToggle('Nem7', dx, dy); dy = dy + py;
-	createToggle('Nem8', dx, dy); dy = dy + py;
-	createToggle('Nem9', dx, dy); dy = dy + py;
-	
-	dx = 1.038; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem10', dx, dy); dy = dy + py;
-	createToggle('Nem11', dx, dy); dy = dy + py;
-	createToggle('Nem12', dx, dy); dy = dy + py;
-	createToggle('Nem13', dx, dy); dy = dy + py;
-	createToggle('Nem14', dx, dy); dy = dy + py;
-	
-	dx = 1.213; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem15', dx, dy); dy = dy + py;
-	createToggle('Nem16', dx, dy); dy = dy + py;
-	createToggle('Nem17', dx, dy); dy = dy + py;
-	createToggle('Nem18', dx, dy); dy = dy + py;
-	createToggle('Nem19', dx, dy); dy = dy + py;
-	
-	dx = 0.239; dy = -0.76; px = 1; py = 0.1905; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('MileStone1', dx, dy); dy = dy + py;
-	createToggle('Milestone2', dx, dy); dy = dy + py;
-	createToggle('MileStone3', dx, dy); dy = dy + py;
-	createToggle('MileStone4', dx, dy); dy = dy + py;
-	createToggle('MileStone5', dx, dy); dy = dy + py;
-	createToggle('MileStone6', dx, dy); dy = dy + py;
-	createToggle('Milestone7', dx, dy); dy = dy + py;
-	createToggle('MileStone8', dx, dy); dy = dy + py;
-	createToggle('MileStone9', dx, dy); dy = dy + py;
-	createToggle('MileStone10', dx, dy); dy = dy + py;
-	
-	dx = -1.333; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Death1', dx, dy); dx = dx + px;
-	createToggle('Death2', dx, dy); dx = dx + px;
-	createToggle('Death3', dx, dy); dx = dx + px;
-	createToggle('Death4', dx, dy); dx = dx + px;
-	createToggle('Death5', dx, dy); dx = dx + px;
-	createToggle('Death6', dx, dy); dx = dx + px;
-	createToggle('Death7', dx, dy); dx = dx + px;
-	createToggle('Death8', dx, dy); dx = dx + px;
-	createToggle('Death9', dx, dy); dx = dx + px;
-	createToggle('Death10', dx, dy); dx = dx + px;
-	createToggle('Death11', dx, dy); dx = dx + px;
-	createToggle('Death12', dx, dy); dx = dx + px;
-	createToggle('Death13', dx, dy); dx = dx + px;
-	createToggle('Death14', dx, dy); dx = dx + px;
-	createToggle('Death15', dx, dy); dx = dx + px;
-	createToggle('Death16', dx, dy); dx = dx + px;
-	createToggle('Death17', dx, dy); dx = dx + px;
-	createToggle('Death18', dx, dy); dx = dx + px;
-	createToggle('Death19', dx, dy); dx = dx + px;
-	
-	dx = -1.333; dy = 2.2; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Death20', dx, dy); dx = dx + px;
-	createToggle('Death21', dx, dy); dx = dx + px;
-	createToggle('Death22', dx, dy); dx = dx + px;
-	createToggle('Death23', dx, dy); dx = dx + px;
-	createToggle('Death24', dx, dy); dx = dx + px;
-	createToggle('Death25', dx, dy); dx = dx + px;
-	createToggle('Death26', dx, dy); dx = dx + px;
-	createToggle('Death27', dx, dy); dx = dx + px;
-	createToggle('Death28', dx, dy); dx = dx + px;
-	createToggle('Death29', dx, dy); dx = dx + px;
-	createToggle('Death30', dx, dy); dx = dx + px;
-	createToggle('Death31', dx, dy); dx = dx + px;
-	createToggle('Death32', dx, dy); dx = dx + px;
-	createToggle('Death33', dx, dy); dx = dx + px;
-	createToggle('Death34', dx, dy); dx = dx + px;
-	createToggle('Death35', dx, dy); dx = dx + px;
-	createToggle('Death36', dx, dy); dx = dx + px;
-	createToggle('Death37', dx, dy); dx = dx + px;
-	createToggle('Death38', dx, dy); dx = dx + px;
-	
-	dx = 0.09; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('LS1', dx, dy); dx = dx + px;
-	createToggle('LS2', dx, dy); dx = dx + px;
-	createToggle('LS3', dx, dy); dx = dx + px;
-	createToggle('LS4', dx, dy); dx = dx + px;
-	createToggle('LS5', dx, dy); dx = dx + px;
-	createToggle('LS6', dx, dy); dx = dx + px;
-	createToggle('LS7', dx, dy); dx = dx + px;
-	createToggle('LS8', dx, dy); dx = dx + px;
-	createToggle('LS9', dx, dy); dx = dx + px;
-	createToggle('LS10', dx, dy); dx = dx + px;
-	createToggle('LS11', dx, dy); dx = dx + px;
-	createToggle('LS12', dx, dy); dx = dx + px;
-	createToggle('LS13', dx, dy); dx = dx + px;
-	createToggle('LS14', dx, dy); dx = dx + px;
-	createToggle('LS15', dx, dy); dx = dx + px;
-	createToggle('LS16', dx, dy); dx = dx + px;
-	createToggle('LS17', dx, dy); dx = dx + px;
-	createToggle('LS18', dx, dy); dx = dx + px;
-	createToggle('LS19', dx, dy); dx = dx + px;
-	createToggle('LS20', dx, dy); dx = dx + px;
-   
-   --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 100, height = 100, font = 100},
-        button = {width = 50, height = 50, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 80, height = 80, font = 100},
-        offsets = { bottomButtons = {x = 0.10, y = 0, z = 0.26}}
-	}
-    buttons.params.sizes.toggle = {
-        display = {width = 17, height = 17, font = 40},
-        button = {width = 20, height = 20, font = 150},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 60},
-        button = {width = 80, height = 30, font = 40},
-        offsets = { bottomButtons = {x = -0.58, y = 0, z = 0.195}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-	local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	--reverse things for backside
-	if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-		buttonInfo.rotation = {0,0,180}
-		if offsets != nil then
-			reverse_x = -offsets.x
-		end
-	elseif offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            if (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then 
-					self.createButton(buttons[tostring(i)].plusOne) 
-				end
-                if (buttons[tostring(i)].minusOne != nil) then 
-					self.createButton(buttons[tostring(i)].minusOne) 
-				end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-		--buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then 
-		return 
-	end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-		if nm == '__survivor_name' then
-			buttons.counts.__b_survivor_name = objs[nm].getDescription()
-			buttons.counts.__b_fam_self = objs[nm].getDescription()
-			self.setName(objs[nm].getDescription())
-		elseif nm == '__b_survivor_name' then
-			buttons.counts.__survivor_name = objs[nm].getDescription()
-			buttons.counts.__b_fam_self = objs[nm].getDescription()
-			self.setName(objs[nm].getDescription())
-		end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-function onPickedUp()
-	updateDisplay(false)
-end
diff --git a/Dist/Speed Token b/Dist/Speed Token
deleted file mode 100644
index 3234363..0000000
--- a/Dist/Speed Token	
+++ /dev/null
@@ -1,14 +0,0 @@
-isKdmEffectsObject = true
-effects = {
-    speed = 1
-}
-
-function getEffects()
-    rot = self.getRotation()
-    if rot[3] > 345 or rot[3] < 15 then
-        effects.speed = -1
-    else
-        effects.speed = 1
-    end
-    return effects
-end
diff --git a/Dist/Story Board Left b/Dist/Story Board Left
deleted file mode 100644
index 1500a4d..0000000
--- a/Dist/Story Board Left	
+++ /dev/null
@@ -1,496 +0,0 @@
---KDM Storybook
-
----------------------------------
---Vars
---------------------------------
-manualsIndex = {
-	tab1 = {
-		tabName = 'Rules', 
-		pages = {
-			{pageName = 'Introduction', stateNum = 2},
-			{pageName = 'Prologue', stateNum = 5},
-			{pageName = 'First Story', stateNum = 23},
-			{pageName = 'Survival Guide', stateNum = 36},
-			{pageName = 'Survivors', stateNum = 40},
-			{pageName = 'Monsters', stateNum = 48},
-			{pageName = 'Resources', stateNum = 56},
-			{pageName = 'Terrain', stateNum = 59},
-			{pageName = 'Hunt Phase', stateNum = 61},
-			{pageName = 'Showdown Phase', stateNum = 65},
-			{pageName = 'Settlement Phase', stateNum = 79},
-			{pageName = 'Game Variants', stateNum = 85},
-			{pageName = 'Glossary', stateNum = 87},
-		}
-	},
-	tab2 = {
-		tabName = 'Timeline Events', 
-		pages = {
-			{pageName = 'Returning Survivors', stateNum = 2},
-			{pageName = 'Endless Screams', stateNum = 4},
-			{pageName = 'Bone Witch', stateNum = 6},
-			{pageName = 'Hands of Heat', stateNum = 8},
-			{pageName = 'Armored Strangers', stateNum = 10},
-			{pageName = 'Phoenix Feather', stateNum = 12},
-			{pageName = 'Regal Visit', stateNum = 14},
-			{pageName = 'Principle: Conviction', stateNum = 16},
-			{pageName = 'Watched', stateNum = 18},
-		}
-	},
-	tab3 = {
-		tabName = 'Hunt Events', 
-		pages = {
-			{pageName = 'Random Events 1-8', stateNum = 2},
-			{pageName = 'Random Events 9-15', stateNum = 3},
-			{pageName = 'Random Events 16-25', stateNum = 4},
-			{pageName = 'Random Events 26-31', stateNum = 5},
-			{pageName = 'Random Events 32-44', stateNum = 6},
-			{pageName = 'Random Events 45-53', stateNum = 7},
-			{pageName = 'Random Events 54-63', stateNum = 8},
-			{pageName = 'Random Events 64-71', stateNum = 9},
-			{pageName = 'Random Events 72-80', stateNum = 10},
-			{pageName = 'Random Events 81-87', stateNum = 11},
-			{pageName = 'Random Events 88-96', stateNum = 12},
-			{pageName = 'Random Events 97-100', stateNum = 13},
-			{pageName = 'Overwhelming Darkness', stateNum = 14},
-			{pageName = 'Herb Gathering', stateNum = 16},
-			{pageName = 'Mineral Gathering', stateNum = 18},
-			{pageName = 'Run Away', stateNum = 20},
-		}
-	},
-	tab4 = {
-		tabName = 'Showdown Setups', 
-		pages = {
-			{pageName = 'White Lion', stateNum = 2},
-			{pageName = 'Screaming Antelope', stateNum = 4},
-			{pageName = 'Phoenix', stateNum = 6},
-			{pageName = 'Nemesis: Butcher', stateNum = 8},
-			{pageName = "Nemesis: King's Man", stateNum = 10},
-			{pageName = 'Nemesis: The Hand', stateNum = 12},
-			{pageName = 'Nemesis: Watcher', stateNum = 14},
-			{pageName = 'Legendary Monsters', stateNum = 16},
-		}
-	},
-	tab5 = {
-		tabName = 'Settlement Events', 
-		pages = {
-			{pageName = 'Intimacy', stateNum = 2},
-			{pageName = 'Birth of a Savior', stateNum = 4},
-			{pageName = 'Cooking', stateNum = 6},
-			{pageName = 'White Speaker', stateNum = 8},
-		}
-	},
-	tab6 = {
-		tabName = 'Milestone Events', 
-		pages = {
-			{pageName = 'Age', stateNum = 2},
-			{pageName = 'Bold', stateNum = 4},
-			{pageName = 'Insight', stateNum = 6},
-			{pageName = 'See the Truth', stateNum = 8},
-			{pageName = 'White Secret', stateNum = 10},
-			{pageName = 'Principle: New Life', stateNum = 12},
-			{pageName = 'Principle: Death', stateNum = 14},
-			{pageName = 'Principle: Society', stateNum = 16},
-			{pageName = 'Hooded Knight', stateNum = 18},
-			{pageName = 'Game Over', stateNum = 20},
-		}
-	},
-	tab7 = {
-		tabName = 'Severe Injuries', 
-		pages = {
-			{pageName = 'Brain Trauma', stateNum = 2},
-			{pageName = 'Head, Arms', stateNum = 3},
-			{pageName = 'Body, Waist, Legs', stateNum = 4},
-		}
-	},
-	tab8 = {
-		tabName = 'Monster Events', 
-		pages = {
-			{pageName = 'Zero Presence', stateNum = 2},
-			{pageName = 'Crush and Devour', stateNum = 4},
-			{pageName = 'Legendary Lungs', stateNum = 6},
-			{pageName = "King's Step", stateNum = 8},
-			{pageName = "King's Curse", stateNum = 10},
-			{pageName = 'Run Away', stateNum = 12},
-			{pageName = 'Blackout', stateNum = 14},
-		}
-	},
-}
-gameBoxGUID = ''
-zoneSelfGUID = ''
-
-activeBook = {}
-changingBook = false
-currentPage = 1
-
-cloneSpawnPos = {0,0,-80}
-
----------------------------------
---Init
---------------------------------
-
-
-function onLoad()
-
-	local table = Global.getTable('staticObjs')
-	gameBoxGUID = table.gameBox.guid
-	table = Global.getTable('zones')
-	zoneSelfGUID = table.zoneStoryL.guid
-	
-	initTabButtons()
-	initBrowseButtons()
-
-end
-
-function initTabButtons()
-	local index = manualsIndex
-	local col = 4
-	local row = 2
-	local dx = ( 24 / col / 2 ) - 12
-	local dy = 8.5
-	local w = (12000 / col) - (col * 25)
-	local px = 24/ col
-	local py = -1.25
-	local i = 1
-	local h = 600
-	local f = 350
-	for k,v in pairs(index) do
-		local func = k
-		local label = v.tabName
-		self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		if i < col or i > col then
-			dx = dx + px
-		elseif i == col then
-			dx = dx - (px*(col-1))
-			dy = dy + py
-		else
-			dx = dx
-		end
-		i = i+1
-	end
-end
-
-function initBrowseButtons()
-	self.createButton({
-		click_function = 'nextPage',
-		function_owner = self,
-		label = '>',
-		position = {-8.5,0.14,-1.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-	self.createButton({
-		click_function = 'previousPage',
-		function_owner = self,
-		label = '<',
-		position = {-8.5,0.14,-4.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-end
-
-
----------------------------------
---Events
---------------------------------
-
-function onDropped()
-	local zone = getObjectFromGUID(zoneSelfGUID)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
-
----------------------------------
---Button fnc
---------------------------------
-
-function nextPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			local obj = v.setState(currentPage + 1)
-			if obj != nil then
-				currentPage = currentPage + 1
-			end
-		end
-	end
-end
-
-function previousPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if currentPage != 1 then
-				local obj = v.setState(currentPage - 1)
-				if obj != nil then
-					currentPage = currentPage - 1
-				end
-			end
-		end
-	end
-end
-
-function tab1()
-	local tab = 'tab1'
-	tabClick(tab)
-end
-
-function tab2()
-	local tab = 'tab2'
-	tabClick(tab)
-end
-
-function tab3()
-	local tab = 'tab3'
-	tabClick(tab)
-end
-
-function tab4()
-	local tab = 'tab4'
-	tabClick(tab)
-end
-
-function tab5()
-	local tab = 'tab5'
-	tabClick(tab)
-end
-
-function tab6()
-	local tab = 'tab6'
-	tabClick(tab)
-end
-
-function tab7()
-	local tab = 'tab7'
-	tabClick(tab)
-end	
-
-function tab8()
-	local tab = 'tab8'
-	tabClick(tab)
-end
-
----------pages
-
-function page1()
-	local page = 1
-	pageClick(page)
-end
-
-function page2()
-	local page = 2
-	pageClick(page)
-end
-
-function page3()
-	local page = 3
-	pageClick(page)
-end
-
-function page4()
-	local page = 4
-	pageClick(page)
-end
-
-function page5()
-	local page = 5
-	pageClick(page)
-end
-
-function page6()
-	local page = 6
-	pageClick(page)
-end
-
-function page7()
-	local page = 7
-	pageClick(page)
-end	
-
-function page8()
-	local page = 8
-	pageClick(page)
-end
-
-function page9()
-	local page = 9
-	pageClick(page)
-end
-
-function page10()
-	local page = 10
-	pageClick(page)
-end
-
-function page11()
-	local page = 11
-	pageClick(page)
-end
-
-function page12()
-	local page = 12
-	pageClick(page)
-end
-
-function page13()
-	local page = 13
-	pageClick(page)
-end
-
-function page14()
-	local page = 14
-	pageClick(page)
-end
-
-function page15()
-	local page = 15
-	pageClick(page)
-end
-
-function page16()
-	local page = 16
-	pageClick(page)
-end	
-
-----------------------------------------
---primary fcns
----------------------------------------
-
-function tabClick(tab)
-	--clear books
-	changeBook(tab)
-	--clear last tab pages
-	local btns = self.getButtons()
-	for k,v in pairs(btns) do
-		local text = v.click_function
-		if string.find(text, 'page') then
-			local index = v.index
-			self.removeButton(index)
-		end
-	end
-	--create page list
-	local pagesTable = manualsIndex[tab].pages
-	local col = 1
-	local row = #pagesTable
-	local dx = 9
-	local dy = 5.75
-	local w = 2900
-	local px = 24/ col
-	local py = -0.95
-	local i = 1
-	local h = 400
-	local f = 300
-	local btn = {}
-	pageBtns = {}
-	for k,v in pairs(pagesTable) do
-		local func = 'page' .. i
-		local label = v.pageName
-		local btn = self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		dy = dy + py
-		i = i+1
-	end
-end
-
-function changeBook(tab)
-	if changingBook != true then
-		changingBook = true
-		local calledNameTag = manualsIndex[tab].tabName
-		activeBook = calledNameTag
-		startLuaCoroutine(self, 'changeBookCoroutine')
-	end
-end
-
-function changeBookCoroutine()
-	local alreadyExists = false
-	--clear old books
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if v.getName() != activeBook then
-				v.destruct()
-			else
-				alreadyExists = true
-			end
-		end
-	end
-	--spawn new one
-	if alreadyExists == false then
-		local book = {}
-		local gameBox = getObjectFromGUID(gameBoxGUID)
-		objects = gameBox.getObjects()
-		for k,v in pairs(objects) do
-			if v.name == activeBook then
-				table.insert(book, v.guid)
-			end
-		end
-		--spawn
-		if book[1] != nil then
-			local params = {}
-			params.guid = book[1]
-			local pos = self.getPosition()
-			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
-			local rot = self.getRotation()
-			params.rotation = {rot[1], rot[2] + 90, rot[3]}
-			book = gameBox.takeObject(params)
-			currentPage = 1
-			coroutine.yield(0)
-			--dupe
-			params = {}
-			params.position = cloneSpawnPos
-			local clone = book.clone(params)
-			coroutine.yield(0)
-			pos = gameBox.getPosition()
-			params = {pos[1],pos[2] + 2,pos[3]}
-			clone.setPositionSmooth(params)
-			coroutine.yield(0)
-		end
-	end
-	changingBook = false
-	return 1
-end
-
-function pageClick(pageNum)
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	local tabTable = {}
-	if activeBook != nil then
-		for k,v in pairs(manualsIndex) do
-			if v.tabName == activeBook then
-				tabTable = v
-			end
-		end
-		local state = tabTable.pages[pageNum].stateNum
-		for k,v in pairs(objects) do
-			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
-				if currentPage != state then
-					v.setState(state)
-					currentPage = state
-				end
-			end
-		end
-	end
-end
diff --git a/Dist/Story Board Top b/Dist/Story Board Top
deleted file mode 100644
index e323105..0000000
--- a/Dist/Story Board Top	
+++ /dev/null
@@ -1,496 +0,0 @@
---KDM Storybook
-
----------------------------------
---Vars
---------------------------------
-manualsIndex = {
-	tab1 = {
-		tabName = 'Rules', 
-		pages = {
-			{pageName = 'Introduction', stateNum = 2},
-			{pageName = 'Prologue', stateNum = 5},
-			{pageName = 'First Story', stateNum = 23},
-			{pageName = 'Survival Guide', stateNum = 36},
-			{pageName = 'Survivors', stateNum = 40},
-			{pageName = 'Monsters', stateNum = 48},
-			{pageName = 'Resources', stateNum = 56},
-			{pageName = 'Terrain', stateNum = 59},
-			{pageName = 'Hunt Phase', stateNum = 61},
-			{pageName = 'Showdown Phase', stateNum = 65},
-			{pageName = 'Settlement Phase', stateNum = 79},
-			{pageName = 'Game Variants', stateNum = 85},
-			{pageName = 'Glossary', stateNum = 87},
-		}
-	},
-	tab2 = {
-		tabName = 'Timeline Events', 
-		pages = {
-			{pageName = 'Returning Survivors', stateNum = 2},
-			{pageName = 'Endless Screams', stateNum = 4},
-			{pageName = 'Bone Witch', stateNum = 6},
-			{pageName = 'Hands of Heat', stateNum = 8},
-			{pageName = 'Armored Strangers', stateNum = 10},
-			{pageName = 'Phoenix Feather', stateNum = 12},
-			{pageName = 'Regal Visit', stateNum = 14},
-			{pageName = 'Principle: Conviction', stateNum = 16},
-			{pageName = 'Watched', stateNum = 18},
-		}
-	},
-	tab3 = {
-		tabName = 'Hunt Events', 
-		pages = {
-			{pageName = 'Random Events 1-8', stateNum = 2},
-			{pageName = 'Random Events 9-15', stateNum = 3},
-			{pageName = 'Random Events 16-25', stateNum = 4},
-			{pageName = 'Random Events 26-31', stateNum = 5},
-			{pageName = 'Random Events 32-44', stateNum = 6},
-			{pageName = 'Random Events 45-53', stateNum = 7},
-			{pageName = 'Random Events 54-63', stateNum = 8},
-			{pageName = 'Random Events 64-71', stateNum = 9},
-			{pageName = 'Random Events 72-80', stateNum = 10},
-			{pageName = 'Random Events 81-87', stateNum = 11},
-			{pageName = 'Random Events 88-96', stateNum = 12},
-			{pageName = 'Random Events 97-100', stateNum = 13},
-			{pageName = 'Overwhelming Darkness', stateNum = 14},
-			{pageName = 'Herb Gathering', stateNum = 16},
-			{pageName = 'Mineral Gathering', stateNum = 18},
-			{pageName = 'Run Away', stateNum = 20},
-		}
-	},
-	tab4 = {
-		tabName = 'Showdown Setups', 
-		pages = {
-			{pageName = 'White Lion', stateNum = 2},
-			{pageName = 'Screaming Antelope', stateNum = 4},
-			{pageName = 'Phoenix', stateNum = 6},
-			{pageName = 'Nemesis: Butcher', stateNum = 8},
-			{pageName = "Nemesis: King's Man", stateNum = 10},
-			{pageName = 'Nemesis: The Hand', stateNum = 12},
-			{pageName = 'Nemesis: Watcher', stateNum = 14},
-			{pageName = 'Legendary Monsters', stateNum = 16},
-		}
-	},
-	tab5 = {
-		tabName = 'Settlement Events', 
-		pages = {
-			{pageName = 'Intimacy', stateNum = 2},
-			{pageName = 'Birth of a Savior', stateNum = 4},
-			{pageName = 'Cooking', stateNum = 6},
-			{pageName = 'White Speaker', stateNum = 8},
-		}
-	},
-	tab6 = {
-		tabName = 'Milestone Events', 
-		pages = {
-			{pageName = 'Age', stateNum = 2},
-			{pageName = 'Bold', stateNum = 4},
-			{pageName = 'Insight', stateNum = 6},
-			{pageName = 'See the Truth', stateNum = 8},
-			{pageName = 'White Secret', stateNum = 10},
-			{pageName = 'Principle: New Life', stateNum = 12},
-			{pageName = 'Principle: Death', stateNum = 14},
-			{pageName = 'Principle: Society', stateNum = 16},
-			{pageName = 'Hooded Knight', stateNum = 18},
-			{pageName = 'Game Over', stateNum = 20},
-		}
-	},
-	tab7 = {
-		tabName = 'Severe Injuries', 
-		pages = {
-			{pageName = 'Brain Trauma', stateNum = 2},
-			{pageName = 'Head, Arms', stateNum = 3},
-			{pageName = 'Body, Waist, Legs', stateNum = 4},
-		}
-	},
-	tab8 = {
-		tabName = 'Monster Events', 
-		pages = {
-			{pageName = 'Zero Presence', stateNum = 2},
-			{pageName = 'Crush and Devour', stateNum = 4},
-			{pageName = 'Legendary Lungs', stateNum = 6},
-			{pageName = "King's Step", stateNum = 8},
-			{pageName = "King's Curse", stateNum = 10},
-			{pageName = 'Run Away', stateNum = 12},
-			{pageName = 'Blackout', stateNum = 14},
-		}
-	},
-}
-gameBoxGUID = ''
-zoneSelfGUID = ''
-
-activeBook = {}
-changingBook = false
-currentPage = 1
-
-cloneSpawnPos = {0,0,-80}
-
----------------------------------
---Init
---------------------------------
-
-
-function onLoad()
-
-	local table = Global.getTable('staticObjs')
-	gameBoxGUID = table.gameBox.guid
-	table = Global.getTable('zones')
-	zoneSelfGUID = table.zoneStoryT.guid
-	
-	initTabButtons()
-	initBrowseButtons()
-
-end
-
-function initTabButtons()
-	local index = manualsIndex
-	local col = 4
-	local row = 2
-	local dx = ( 24 / col / 2 ) - 12
-	local dy = 8.5
-	local w = (12000 / col) - (col * 25)
-	local px = 24/ col
-	local py = -1.25
-	local i = 1
-	local h = 600
-	local f = 350
-	for k,v in pairs(index) do
-		local func = k
-		local label = v.tabName
-		self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		if i < col or i > col then
-			dx = dx + px
-		elseif i == col then
-			dx = dx - (px*(col-1))
-			dy = dy + py
-		else
-			dx = dx
-		end
-		i = i+1
-	end
-end
-
-function initBrowseButtons()
-	self.createButton({
-		click_function = 'nextPage',
-		function_owner = self,
-		label = '>',
-		position = {-8.5,0.14,-1.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-	self.createButton({
-		click_function = 'previousPage',
-		function_owner = self,
-		label = '<',
-		position = {-8.5,0.14,-4.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-end
-
-
----------------------------------
---Events
---------------------------------
-
-function onDropped()
-	local zone = getObjectFromGUID(zoneSelfGUID)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
-
----------------------------------
---Button fnc
---------------------------------
-
-function nextPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			local obj = v.setState(currentPage + 1)
-			if obj != nil then
-				currentPage = currentPage + 1
-			end
-		end
-	end
-end
-
-function previousPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if currentPage != 1 then
-				local obj = v.setState(currentPage - 1)
-				if obj != nil then
-					currentPage = currentPage - 1
-				end
-			end
-		end
-	end
-end
-
-function tab1()
-	local tab = 'tab1'
-	tabClick(tab)
-end
-
-function tab2()
-	local tab = 'tab2'
-	tabClick(tab)
-end
-
-function tab3()
-	local tab = 'tab3'
-	tabClick(tab)
-end
-
-function tab4()
-	local tab = 'tab4'
-	tabClick(tab)
-end
-
-function tab5()
-	local tab = 'tab5'
-	tabClick(tab)
-end
-
-function tab6()
-	local tab = 'tab6'
-	tabClick(tab)
-end
-
-function tab7()
-	local tab = 'tab7'
-	tabClick(tab)
-end	
-
-function tab8()
-	local tab = 'tab8'
-	tabClick(tab)
-end
-
----------pages
-
-function page1()
-	local page = 1
-	pageClick(page)
-end
-
-function page2()
-	local page = 2
-	pageClick(page)
-end
-
-function page3()
-	local page = 3
-	pageClick(page)
-end
-
-function page4()
-	local page = 4
-	pageClick(page)
-end
-
-function page5()
-	local page = 5
-	pageClick(page)
-end
-
-function page6()
-	local page = 6
-	pageClick(page)
-end
-
-function page7()
-	local page = 7
-	pageClick(page)
-end	
-
-function page8()
-	local page = 8
-	pageClick(page)
-end
-
-function page9()
-	local page = 9
-	pageClick(page)
-end
-
-function page10()
-	local page = 10
-	pageClick(page)
-end
-
-function page11()
-	local page = 11
-	pageClick(page)
-end
-
-function page12()
-	local page = 12
-	pageClick(page)
-end
-
-function page13()
-	local page = 13
-	pageClick(page)
-end
-
-function page14()
-	local page = 14
-	pageClick(page)
-end
-
-function page15()
-	local page = 15
-	pageClick(page)
-end
-
-function page16()
-	local page = 16
-	pageClick(page)
-end	
-
-----------------------------------------
---primary fcns
----------------------------------------
-
-function tabClick(tab)
-	--clear books
-	changeBook(tab)
-	--clear last tab pages
-	local btns = self.getButtons()
-	for k,v in pairs(btns) do
-		local text = v.click_function
-		if string.find(text, 'page') then
-			local index = v.index
-			self.removeButton(index)
-		end
-	end
-	--create page list
-	local pagesTable = manualsIndex[tab].pages
-	local col = 1
-	local row = #pagesTable
-	local dx = 9
-	local dy = 5.75
-	local w = 2900
-	local px = 24/ col
-	local py = -0.95
-	local i = 1
-	local h = 400
-	local f = 300
-	local btn = {}
-	pageBtns = {}
-	for k,v in pairs(pagesTable) do
-		local func = 'page' .. i
-		local label = v.pageName
-		local btn = self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		dy = dy + py
-		i = i+1
-	end
-end
-
-function changeBook(tab)
-	if changingBook != true then
-		changingBook = true
-		local calledNameTag = manualsIndex[tab].tabName
-		activeBook = calledNameTag
-		startLuaCoroutine(self, 'changeBookCoroutine')
-	end
-end
-
-function changeBookCoroutine()
-	local alreadyExists = false
-	--clear old books
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if v.getName() != activeBook then
-				v.destruct()
-			else
-				alreadyExists = true
-			end
-		end
-	end
-	--spawn new one
-	if alreadyExists == false then
-		local book = {}
-		local gameBox = getObjectFromGUID(gameBoxGUID)
-		objects = gameBox.getObjects()
-		for k,v in pairs(objects) do
-			if v.name == activeBook then
-				table.insert(book, v.guid)
-			end
-		end
-		--spawn
-		if book[1] != nil then
-			local params = {}
-			params.guid = book[1]
-			local pos = self.getPosition()
-			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
-			local rot = self.getRotation()
-			params.rotation = {rot[1], rot[2] + 90, rot[3]}
-			book = gameBox.takeObject(params)
-			currentPage = 1
-			coroutine.yield(0)
-			--dupe
-			params = {}
-			params.position = cloneSpawnPos
-			local clone = book.clone(params)
-			coroutine.yield(0)
-			pos = gameBox.getPosition()
-			params = {pos[1],pos[2] + 2,pos[3]}
-			clone.setPositionSmooth(params)
-			coroutine.yield(0)
-		end
-	end
-	changingBook = false
-	return 1
-end
-
-function pageClick(pageNum)
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	local tabTable = {}
-	if activeBook != nil then
-		for k,v in pairs(manualsIndex) do
-			if v.tabName == activeBook then
-				tabTable = v
-			end
-		end
-		local state = tabTable.pages[pageNum].stateNum
-		for k,v in pairs(objects) do
-			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
-				if currentPage != state then
-					v.setState(state)
-					currentPage = state
-				end
-			end
-		end
-	end
-end
diff --git a/Dist/Survivor Sheet-Full (Esk) b/Dist/Survivor Sheet-Full (Esk)
deleted file mode 100644
index 59a3cfa..0000000
--- a/Dist/Survivor Sheet-Full (Esk)	
+++ /dev/null
@@ -1,643 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 4.3; dy = -12
-	createMinimize('minimize', 'collapse', dx, dy)
-		
-	--header
-	dx = 0; dy =-11.8
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-11.25; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-9.8 
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -9.25
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -9.25
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.78; dy = -10.48; py = 0.4
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-	
-	--stats
-	dx = -4.33; dy = -7.7
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -7.8 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -9.1
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -9.65
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -6.05; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = -6.9
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =-3.45
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = -4.1; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	dx = -4.43; dy = -1.65; px =0.473
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-	
-	dx = 0.64; dy = -1.65; px =0.473
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-	
-	dx = -4.43; dy = 0; py = 0.87
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-	
-	dx = 0.6; dy = 0; py = 0.87
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-	
-	--conditions
-	dx = -2.5; dy = 3.77; py = 1.46
-	createTextField('impairments', 'txt2', dx, dy); dy = dy + py
-	createTextField('disorders', 'txt2', dx, dy); dy = dy + py
-	createTextField('fighting_arts', 'txt2', dx, dy)
-	
-	dx = -0.2; dy = 6
-	createToggle('disable_fightingarts', dx , dy)
-	
-	dx = -2.5; dy = 9.5; px = 5
-	createTextField('abilities', 'txt3', dx, dy); dx = dx + px
-	
-	
-	dx = 4.73; dy = 3.66; px =0.36; py =0.38; rx = dx
-	createToggle('intracranial_hemorrhage', dx, dy); dy = dy + py;
-	createToggle('deaf', dx, dy); dy = dy + py;
-	createToggle('blind_1', dx, dy); dx = dx - px;
-	createToggle('blind_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('shattered_jaw', dx, dy);
-
-	dx = 4.73; dy = 5.44; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_arm_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_arm_2', dx, dy); dx = rx; dy = dy + py
-	createToggle('ruptured_muscle', dx, dy); dy = dy + py;
-	createToggle('contracture_1', dx, dy); dx = dx - px;
-	createToggle('contracture_2', dx, dy); dx = dx - px;
-	createToggle('contracture_3', dx, dy); dx = dx - px;
-	createToggle('contracture_4', dx, dy); dx = dx - px;
-	createToggle('contracture_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('broken_arm_1', dx, dy); dx = dx - px
-	createToggle('broken_arm_2', dx, dy); dx = dx - px
-	
-	dx = 4.73; dy = 7.22; px =0.36; py =0.38; rx = dx
-	createToggle('gaping_chest_wound_1', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_2', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_3', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_4', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_back', dx, dy); dx = rx; dy = dy + py
-	createToggle('broken_rib_1', dx, dy); dx = dx - px;
-	createToggle('broken_rib_2', dx, dy); dx = dx - px;
-	createToggle('broken_rib_3', dx, dy); dx = dx - px;
-	createToggle('broken_rib_4', dx, dy); dx = dx - px;
-	createToggle('broken_rib_5', dx, dy)
-	
-	dx = 4.73; dy = 8.6; px =0.36; py =0.38; rx = dx
-	createToggle('intestinal_prolapse', dx, dy); dy = dy + py
-	createToggle('warped_pelvis_1', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_2', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_3', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_4', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_genitals', dx, dy); dy = dy + py
-	createToggle('broken_hip', dx, dy)
-	
-	dx = 4.73; dy = 10.38; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_leg_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_leg_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('hamstrung', dx, dy); dy = dy + py
-	createToggle('broken_leg_1', dx, dy); dx = dx - px;
-	createToggle('broken_leg_2', dx, dy)
-	
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-11.8
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-11.8; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -9.3; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	dx = -3.8; dy =-9
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -7.5
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	--family
-	dx = 2.5; dy = -5; px = 5; py = 1.02
-	createTextField('b_parent_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_parent_2', 'txt', dx, dy); dx = 0; dy = dy + py
-	createTextField('b_fam_self', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_2', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_3', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_4', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_5', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_6', 'txt', dx, dy)
-	
-	--freetext etc
-	dx = 0; dy = 1.3
-	createTextField('b_mates', 'txt2', dx, dy)
-	
-	dx = 0; dy = 5.1
-	createTextField('b_deeds', 'txt3', dx, dy)
-	
-	dx = 0; dy = 9.8
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 180, height = 250, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 200},
-        button = {width = 200, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
diff --git a/Dist/Survivor Sheet-Full (Esk-People of the Stars) b/Dist/Survivor Sheet-Full (Esk-People of the Stars)
deleted file mode 100644
index 1e17468..0000000
--- a/Dist/Survivor Sheet-Full (Esk-People of the Stars)	
+++ /dev/null
@@ -1,666 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 4.3; dy = -12
-	createMinimize('minimize', 'collapse', dx, dy)
-		
-	--header
-	dx = 0; dy =-11.8
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-11.25; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-9.8 
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -9.25
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -9.25
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.82; dy = -10.48; py = 0.4
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-	
-	--stats
-	dx = -4.33; dy = -7.7
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -7.8 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -9.1
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -9.65
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -6.05; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = -6.9
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =-3.45
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = -4.1; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	dx = -4.43; dy = -1.65; px =0.473
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-	
-	dx = 0.64; dy = -1.65; px =0.473
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-	
-	
-	dx = -4.75; dy = -0.05; py =0.48; ry = dy; dy = dy + py;
-	createToggle('gambler', dx, dy); dy = dy + py;
-	createToggle('absolute', dx, dy); dy = dy + py;
-	createToggle('sculptor', dx, dy); dy = dy + py;
-	createToggle('goblin', dx, dy); dy = dy + py;
-	dx = -3.3; dy = ry
-	createToggle('witch', dx, dy); dy = dy + py;
-	createToggle('9und', dx, dy); dy = dy + py;
-	createToggle('reincarnated', dx, dy); dy = dy + py;
-	createToggle('scar', dx, dy); dy = dy + py;
-	createToggle('oracleseye', dx, dy); dy = dy + py;
-	dx = -1.5; dy = ry
-	createToggle('rust', dx, dy); dy = dy + py;
-	createToggle('destineddisorder', dx, dy); dy = dy + py;
-	createToggle('frozenstar', dx, dy); dy = dy + py;
-	createToggle('noble', dx, dy); dy = dy + py;
-	createToggle('unbreakable', dx, dy); dy = dy + py;
-	dx = 0.7; dy = ry
-	createToggle('storm', dx, dy); dy = dy + py;
-	createToggle('fatedblow', dx, dy); dy = dy + py;
-	createToggle('iridhideabil', dx, dy); dy = dy + py;
-	createToggle('weaponmaster', dx, dy); dy = dy + py;
-	createToggle('3str', dx, dy); dy = dy + py;
-	dx = 2.7; dy = ry
-	createToggle('reaper', dx, dy); dy = dy + py;
-	createToggle('pristineability', dx, dy); dy = dy + py;
-	createToggle('championsrite', dx, dy); dy = dy + py;
-	createToggle('1acc', dx, dy); dy = dy + py;
-	createToggle('9cou', dx, dy); dy = dy + py;
-	
-	
-	
-	--conditions
-	dx = -2.5; dy = 3.77; py = 1.46
-	createTextField('impairments', 'txt2', dx, dy); dy = dy + py
-	createTextField('disorders', 'txt2', dx, dy); dy = dy + py
-	createTextField('fighting_arts', 'txt2', dx, dy)
-	
-	dx = -0.2; dy = 6
-	createToggle('disable_fightingarts', dx , dy)
-	
-	dx = -2.5; dy = 9.5; px = 5
-	createTextField('abilities', 'txt3', dx, dy); dx = dx + px
-	
-	
-	dx = 4.73; dy = 3.66; px =0.36; py =0.38; rx = dx
-	createToggle('intracranial_hemorrhage', dx, dy); dy = dy + py;
-	createToggle('deaf', dx, dy); dy = dy + py;
-	createToggle('blind_1', dx, dy); dx = dx - px;
-	createToggle('blind_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('shattered_jaw', dx, dy);
-
-	dx = 4.73; dy = 5.44; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_arm_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_arm_2', dx, dy); dx = rx; dy = dy + py
-	createToggle('ruptured_muscle', dx, dy); dy = dy + py;
-	createToggle('contracture_1', dx, dy); dx = dx - px;
-	createToggle('contracture_2', dx, dy); dx = dx - px;
-	createToggle('contracture_3', dx, dy); dx = dx - px;
-	createToggle('contracture_4', dx, dy); dx = dx - px;
-	createToggle('contracture_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('broken_arm_1', dx, dy); dx = dx - px
-	createToggle('broken_arm_2', dx, dy); dx = dx - px
-	
-	dx = 4.73; dy = 7.22; px =0.36; py =0.38; rx = dx
-	createToggle('gaping_chest_wound_1', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_2', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_3', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_4', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_back', dx, dy); dx = rx; dy = dy + py
-	createToggle('broken_rib_1', dx, dy); dx = dx - px;
-	createToggle('broken_rib_2', dx, dy); dx = dx - px;
-	createToggle('broken_rib_3', dx, dy); dx = dx - px;
-	createToggle('broken_rib_4', dx, dy); dx = dx - px;
-	createToggle('broken_rib_5', dx, dy)
-	
-	dx = 4.73; dy = 8.6; px =0.36; py =0.38; rx = dx
-	createToggle('intestinal_prolapse', dx, dy); dy = dy + py
-	createToggle('warped_pelvis_1', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_2', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_3', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_4', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_genitals', dx, dy); dy = dy + py
-	createToggle('broken_hip', dx, dy)
-	
-	dx = 4.73; dy = 10.38; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_leg_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_leg_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('hamstrung', dx, dy); dy = dy + py
-	createToggle('broken_leg_1', dx, dy); dx = dx - px;
-	createToggle('broken_leg_2', dx, dy)
-	
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-11.8
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-11.8; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -9.3; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	dx = -3.8; dy =-9
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -7.5
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	--family
-	dx = 2.5; dy = -5; px = 5; py = 1.02
-	createTextField('b_parent_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_parent_2', 'txt', dx, dy); dx = 0; dy = dy + py
-	createTextField('b_fam_self', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_2', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_3', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_4', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_5', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_6', 'txt', dx, dy)
-	
-	--freetext etc
-	dx = 0; dy = 1.3
-	createTextField('b_mates', 'txt2', dx, dy)
-	
-	dx = 0; dy = 5.1
-	createTextField('b_deeds', 'txt3', dx, dy)
-	
-	dx = 0; dy = 9.8
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 180, height = 250, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 200},
-        button = {width = 200, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
diff --git a/Dist/Survivor Sheet-Full (Esk-People of the Sun) b/Dist/Survivor Sheet-Full (Esk-People of the Sun)
deleted file mode 100644
index d6dd7f8..0000000
--- a/Dist/Survivor Sheet-Full (Esk-People of the Sun)	
+++ /dev/null
@@ -1,648 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 4.3; dy = -12
-	createMinimize('minimize', 'collapse', dx, dy)
-		
-	--header
-	dx = 0; dy =-11.8
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-11.25; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-9.8 
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -9.25
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -9.25
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.39; dy = -10.52; py = 0.32
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('embolden', dx, dy); dy = dy + py;
-	createToggle('overcharge', dx, dy)
-	
-	
-	--stats
-	dx = -4.33; dy = -7.7
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -7.8 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -9.1
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -9.65
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -6.05; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = -6.9
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =-3.45
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = -4.1; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	dx = -4.43; dy = -1.65; px =0.473
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-	
-	dx = 0.64; dy = -1.65; px =0.473
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-	
-	dx = -4.43; dy = 0; px = 3.2
-	createToggle('purified', dx, dy); dx = dx + px;
-	createToggle('suneater', dx, dy); dx = dx + px + 0.1;
-	createToggle('childofsun', dx, dy)
-	
-	dx = 0.0; dy = 2
-	createTextField('partner', 'txt5', dx, dy)
-	
-	--conditions
-	dx = -2.5; dy = 3.77; py = 1.46
-	createTextField('impairments', 'txt2', dx, dy); dy = dy + py
-	createTextField('disorders', 'txt2', dx, dy); dy = dy + py
-	createTextField('fighting_arts', 'txt2', dx, dy)
-	
-	dx = -0.2; dy = 6
-	createToggle('disable_fightingarts', dx , dy)
-	
-	dx = -2.5; dy = 9.5; px = 5
-	createTextField('abilities', 'txt3', dx, dy); dx = dx + px
-	
-	
-	dx = 4.73; dy = 3.66; px =0.36; py =0.38; rx = dx
-	createToggle('intracranial_hemorrhage', dx, dy); dy = dy + py;
-	createToggle('deaf', dx, dy); dy = dy + py;
-	createToggle('blind_1', dx, dy); dx = dx - px;
-	createToggle('blind_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('shattered_jaw', dx, dy);
-
-	dx = 4.73; dy = 5.44; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_arm_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_arm_2', dx, dy); dx = rx; dy = dy + py
-	createToggle('ruptured_muscle', dx, dy); dy = dy + py;
-	createToggle('contracture_1', dx, dy); dx = dx - px;
-	createToggle('contracture_2', dx, dy); dx = dx - px;
-	createToggle('contracture_3', dx, dy); dx = dx - px;
-	createToggle('contracture_4', dx, dy); dx = dx - px;
-	createToggle('contracture_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('broken_arm_1', dx, dy); dx = dx - px
-	createToggle('broken_arm_2', dx, dy); dx = dx - px
-	
-	dx = 4.73; dy = 7.22; px =0.36; py =0.38; rx = dx
-	createToggle('gaping_chest_wound_1', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_2', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_3', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_4', dx, dy); dx = dx - px;
-	createToggle('gaping_chest_wound_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_back', dx, dy); dx = rx; dy = dy + py
-	createToggle('broken_rib_1', dx, dy); dx = dx - px;
-	createToggle('broken_rib_2', dx, dy); dx = dx - px;
-	createToggle('broken_rib_3', dx, dy); dx = dx - px;
-	createToggle('broken_rib_4', dx, dy); dx = dx - px;
-	createToggle('broken_rib_5', dx, dy)
-	
-	dx = 4.73; dy = 8.6; px =0.36; py =0.38; rx = dx
-	createToggle('intestinal_prolapse', dx, dy); dy = dy + py
-	createToggle('warped_pelvis_1', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_2', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_3', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_4', dx, dy); dx = dx - px;
-	createToggle('warped_pelvis_5', dx, dy); dx = rx;dy = dy + py
-	createToggle('destroyed_genitals', dx, dy); dy = dy + py
-	createToggle('broken_hip', dx, dy)
-	
-	dx = 4.73; dy = 10.38; px =0.36; py =0.38; rx = dx
-	createToggle('dismembered_leg_1', dx, dy); dx = dx - px;
-	createToggle('dismembered_leg_2', dx, dy); dx = rx;dy = dy + py
-	createToggle('hamstrung', dx, dy); dy = dy + py
-	createToggle('broken_leg_1', dx, dy); dx = dx - px;
-	createToggle('broken_leg_2', dx, dy)
-	
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-11.8
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-11.8; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -9.3; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	dx = -3.8; dy =-9
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -7.5
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	--family
-	dx = 2.5; dy = -5; px = 5; py = 1.02
-	createTextField('b_parent_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_parent_2', 'txt', dx, dy); dx = 0; dy = dy + py
-	createTextField('b_fam_self', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_1', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_2', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_3', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_4', 'txt', dx, dy); dx = 2.5; dy = dy + py
-	createTextField('b_child_5', 'txt', dx, dy); dx = dx - px
-	createTextField('b_child_6', 'txt', dx, dy)
-	
-	--freetext etc
-	dx = 0; dy = 1.3
-	createTextField('b_mates', 'txt2', dx, dy)
-	
-	dx = 0; dy = 5.1
-	createTextField('b_deeds', 'txt3', dx, dy)
-	
-	dx = 0; dy = 9.8
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 180, height = 250, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 200},
-        button = {width = 200, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 3, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
diff --git a/Dist/Survivor Sheet-Full (Nog) b/Dist/Survivor Sheet-Full (Nog)
deleted file mode 100644
index ebf1ef9..0000000
--- a/Dist/Survivor Sheet-Full (Nog)	
+++ /dev/null
@@ -1,630 +0,0 @@
---KDM Survivor Sheet-Full (Nognoth) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 6.1; dy = -12.1
-	createMinimize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-11.5
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45; dy =-11.27; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--survival
-	dx = -5.265; dy =2
-	createCounter('survival', 'big', dx, dy)
-
-	dx = -7.73; dy = 2
-	createCounter('survival_limit', 'big', dx, dy)
-
-	--dx = -2.48; dy = -9.25
-	--createToggle('survival_disabled', dx, dy)
-
-	dx = -3.365; dy = 0.525; py = 0.925
-    createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-
-	--stats
-	dx = -7.45; dy = -3.4; px = 3
-	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
-	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
-	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
-	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('speed', 'bigAttr', dx, dy)
-
-	--insanity
-	dx = 4.55; dy = 1.9
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.55; dy = 3.6
-	createToggle('brain_injury', dx, dy)
-
-	--experience
-	dx = -8.5; dy = -9.1; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--dx = 4.94; dy = -6.9
-	--createToggle('no_hunt', dx, dy)
-
-	--skills
-	dx = 6; dy =-9.1
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.645; dy = -8.01; px = 0.667
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-	dx = -7.65; dy = 5.68; px =0.715
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-
-	dx = 1.78; dy = 5.68; px =0.719
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-
-	dx = -8.63; dy = 7.28; py = 0.71
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-
-	dx = 0.8; dy = 7.28; py = 0.71
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-
-	dx = 4.63; dy = 10.18; py = 0.71
-	createToggle('skip', dx, dy); dy = dy + py;
-	createToggle('survival', dx, dy); dy = dy + py;
-	createToggle('fightingarts', dx, dy)
-
-
-	dx = -2.5; dy = 11; px = 5
-	createTextField('notes', 'txt3', dx, dy); dx = dx + px
-
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
-    }
-    buttons.params.sizes.bigAttr = {
-        display = {width = 0, height = 0, font = 1200},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 300, height = 300, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 400, height = 250, font = 150},
-        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 450},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------------curnils tokens standalone
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-tokens = {}
-tempStats = {}
---------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-					--curnil token script
-					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
-                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                        updateStat(i)
-                    else
-					--
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-					end
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-
-
-
----------------------------
---Curnils token standalone script version
----------------------------
---Curnil's Token scripts
-function loadTokens(loadedTokens)
-    tokens = loadedTokens
-    updateDisplay(false)
-end
-
-function updateStat(stat)
-    local statIncrease = 0
-    for i,v in pairs(tokens) do
-        for j,w in pairs(v) do
-            if stat == "movement" and tostring(j) == "move" then
-                statIncrease = statIncrease + w
-            elseif stat == j then
-                statIncrease = statIncrease + w
-            end
-        end
-    end
-    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
-    loadComplete = true
-end
-
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isGearGrid") then
-        -- remove the token from the tokens collection
-        tokens = {}
-        updateDisplay(false)
-    end
-end
-
-function onPickedUp()
-	tokens = {}
-	updateDisplay(false)
-end
diff --git a/Dist/Survivor Sheet-Mini (Nog) b/Dist/Survivor Sheet-Mini (Nog)
deleted file mode 100644
index 40cbf23..0000000
--- a/Dist/Survivor Sheet-Mini (Nog)	
+++ /dev/null
@@ -1,509 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--maximize button
-	dx = 6; dy = -2.5
-	createMaximize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-1.9
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45 ; dy =-1.555; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--experience
-	dx = -8.5; dy = 0.58; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--skills
-	dx = 5.8; dy =0.5
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.65; dy = 1.66; px = 0.665
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 0, height = 0, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(1)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(3)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
diff --git a/Dist/Survivor Sheet-MiniMid (Esk) b/Dist/Survivor Sheet-MiniMid (Esk)
deleted file mode 100644
index a4b916e..0000000
--- a/Dist/Survivor Sheet-MiniMid (Esk)	
+++ /dev/null
@@ -1,553 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--minimize button/maximize
-	dx = 4.3; dy = -4.6
-	createMinimize('minimize', 'collapse', dx, dy)
-	dx = 5.2; dy = -4.6
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-4.35
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-3.8; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-2.35
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -1.8
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -1.8
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.85; dy = -3; py = 0.4
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-	
-	--stats
-	dx = -4.33; dy = -0.25
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -0.35 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -1.65
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -2.2
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = 1.4; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = 0.55
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =4
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 3.35; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-4.35
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-4.35; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -2.25; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =-1.75
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -0.25
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	dx = 0; dy = 2.5
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(1)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(3)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
diff --git a/Dist/Survivor Sheet-MiniMid (Esk-People of the Stars) b/Dist/Survivor Sheet-MiniMid (Esk-People of the Stars)
deleted file mode 100644
index a4b916e..0000000
--- a/Dist/Survivor Sheet-MiniMid (Esk-People of the Stars)	
+++ /dev/null
@@ -1,553 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--minimize button/maximize
-	dx = 4.3; dy = -4.6
-	createMinimize('minimize', 'collapse', dx, dy)
-	dx = 5.2; dy = -4.6
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-4.35
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-3.8; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-2.35
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -1.8
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -1.8
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.85; dy = -3; py = 0.4
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-	
-	--stats
-	dx = -4.33; dy = -0.25
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -0.35 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -1.65
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -2.2
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = 1.4; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = 0.55
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =4
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 3.35; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-4.35
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-4.35; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -2.25; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =-1.75
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -0.25
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	dx = 0; dy = 2.5
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(1)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(3)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
diff --git a/Dist/Survivor Sheet-MiniMid (Esk-People of the Sun) b/Dist/Survivor Sheet-MiniMid (Esk-People of the Sun)
deleted file mode 100644
index 8008b1e..0000000
--- a/Dist/Survivor Sheet-MiniMid (Esk-People of the Sun)	
+++ /dev/null
@@ -1,554 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--minimize button/maximize
-	dx = 4.3; dy = -4.6
-	createMinimize('minimize', 'collapse', dx, dy)
-	dx = 5.2; dy = -4.6
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-4.35
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-3.8; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--survival
-	dx = -4.35; dy =-2.35
-	createCounter('survival', 'big', dx, dy)
-	
-	dx = -3.2; dy = -1.8
-	createCounter('survival_limit', 'mid', dx, dy)
-	
-	dx = -2.48; dy = -1.8
-	createToggle('survival_disabled', dx, dy)
-	
-	dx = -0.2; dy = -3; py = 0.32
-	createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('embolden', dx, dy); dy = dy + py;
-	createToggle('overcharge', dx, dy)
-	
-	--stats
-	dx = -4.33; dy = -0.25
-	createCounter('movement', 'big', dx, dy)
-	
-	dx = -2.98; dy = -0.35 ; px = 1.27
-	createCounter('accuracy', 'mid', dx, dy) dx = dx + px;
-	createCounter('strength', 'mid', dx, dy) dx = dx + px;
-	createCounter('evasion', 'mid', dx, dy) dx = dx + px;
-	createCounter('luck', 'mid', dx, dy) dx = dx + px;
-	createCounter('speed', 'mid', dx, dy)
-	
-	--insanity
-	dx = 3.93; dy = -1.65
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.985; dy = -2.2
-	createToggle('brain_injury', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = 1.4; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.94; dy = 0.55
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =4
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 3.35; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-4.35
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-4.35; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -2.25; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =-1.75
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = -0.25
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	dx = 0; dy = 2.5
-	createTextField('b_notes', 'txt3', dx, dy)
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(1)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(3)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
diff --git a/Dist/Survivor Sheet-MiniMin (Esk) b/Dist/Survivor Sheet-MiniMin (Esk)
deleted file mode 100644
index e766eee..0000000
--- a/Dist/Survivor Sheet-MiniMin (Esk)	
+++ /dev/null
@@ -1,491 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--maximize button
-	dx = 5.2; dy = -2.45
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-2.15
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-1.65; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -1; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.96; dy = -1.62
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =1.6
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 0.95; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-2.15
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-2.15; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -0.2; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =0.3
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = 1.9
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(2)
-end
diff --git a/Dist/Survivor Sheet-MiniMin (Esk-People of the Stars) b/Dist/Survivor Sheet-MiniMin (Esk-People of the Stars)
deleted file mode 100644
index e766eee..0000000
--- a/Dist/Survivor Sheet-MiniMin (Esk-People of the Stars)	
+++ /dev/null
@@ -1,491 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--maximize button
-	dx = 5.2; dy = -2.45
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-2.15
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-1.65; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -1; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.96; dy = -1.62
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =1.6
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 0.95; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-2.15
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-2.15; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -0.2; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =0.3
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = 1.9
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(2)
-end
diff --git a/Dist/Survivor Sheet-MiniMin (Esk-People of the Sun) b/Dist/Survivor Sheet-MiniMin (Esk-People of the Sun)
deleted file mode 100644
index e766eee..0000000
--- a/Dist/Survivor Sheet-MiniMin (Esk-People of the Sun)	
+++ /dev/null
@@ -1,491 +0,0 @@
---KDM Survivor Sheet-Mini (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-	
-	--maximize button
-	dx = 5.2; dy = -2.45
-	createMaximize('maximize', 'collapse', dx, dy)
-	
-	--header
-	dx = 0; dy =-2.15
-	createTextField('survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.65 ; dy =-1.65; px = 0.53
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-	
-	--experience
-	dx = -3.17; dy = -1; px = 0.513
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-	
-	dx = 4.96; dy = -1.62
-	createToggle('no_hunt', dx, dy)
-	
-	--skills
-	dx = -1.65; dy =1.6
-	createTextField('proficiency_type', 'txt', dx, dy)
-	
-	dx = 1.038; dy = 0.95; px = 0.494
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-	
-	
-	--------------------
-	--reverseside buttons
-	-------------------
-	thick = -0.14
-	--header
-	dx = 0; dy =-2.15
-	createTextField('b_survivor_name', 'txtbig', dx, dy)
-	
-	dx =-4.475 ; dy =-2.15; px = -0.525
-	createToggle('b_gender_m', dx, dy); dx = dx + px;
-	createToggle('b_gender_f', dx, dy)
-	
-	--chronicles
-	dx = -1; dy = -0.2; py = 0.9
-	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
-	createCounter('b_year_died', 'mid', dx, dy)
-
-	
-	dx = -3.8; dy =0.3
-	createCounter('b_age', 'big', dx, dy)
-	
-	dx = 0; dy = 1.9
-	createTextField('b_cause_death', 'txt4', dx, dy)
-	
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-end
-
-function onSave()
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-------------------------------
---Style sheet
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 450, height = 450, font = 450},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 0, height = 0, font = 400},
-        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 0, height = 0, font = 200},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
----------------------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE/LOAD
----------------------------------------------------------------
---[[
-function onSave()
-	--unbracket this block to reset saved data
-	saved_data = ''
-	return saved_data
-end
---]]
-
--------------------------------
---loading from full size
---------------------------------
-function loadData(dataToLoad)
-	for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
-            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
-        end
-    end
-	saved_data = JSON.encode(dataToLoad)
-	self.script_state = saved_data
-	startLuaCoroutine(self, 'updateAfterLoad')
-end
-
-function updateAfterLoad()
-	for i = 1, 5 do
-		coroutine.yield(0)
-	end
-	updateDisplay(false)
-	return 1
-end
-
-------------------------------------------------
---INIT
-------------------------------------------------
-
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-	
-    generateButtonParameters()
-
-    --loads existing data
-	if saved_data != '' and saved_data != nil then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    elseif saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = ""
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-	if (firstTime) then
-		self.setName(buttons.counts['__survivor_name'])
-	end
-end
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer to full size
---------------------------
-function maximizeSheet()
-	self.setState(2)
-end
diff --git a/Dist/placeholder script b/Dist/placeholder script
deleted file mode 100644
index 336a995..0000000
--- a/Dist/placeholder script	
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
diff --git a/Lua/Admin Button.a12e8c.lua b/Lua/Admin Button.a12e8c.lua
deleted file mode 100644
index a7ed729..0000000
--- a/Lua/Admin Button.a12e8c.lua	
+++ /dev/null
@@ -1,34 +0,0 @@
---------------------
---KDM Admin Button
--------------------
-
--------------------
---Variables
-------------------
-
--------------------
---Init
---------------------
-function onLoad()
-
-	--show admin
-	self.createButton({
-		click_function = 'showAdmin',
-		function_owner = self,
-		label = 'Show Admin Console',
-		position = {0,0.5,0},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-
-end
-
---------------------
---Fcns
---------------------
-
-function showAdmin()
-	Global.call('showAdmin')
-end
\ No newline at end of file
diff --git a/Lua/Admin Console.e00199.lua b/Lua/Admin Console.e00199.lua
deleted file mode 100644
index 2970487..0000000
--- a/Lua/Admin Console.e00199.lua	
+++ /dev/null
@@ -1,229 +0,0 @@
---------------------
---KDM Admin Console
--------------------
-
--------------------
---Variables
-------------------
-
--------------------
---Init
---------------------
-function onLoad()
-
-	local label = {}
-	if Global.getVar('autoHunt') == false then
-		label.huntLabel = 'Auto-Hunt is OFF'
-	elseif Global.getVar('autoHunt') == true then
-		label.huntLabel = 'Auto-Hunt is ON'
-	end
-	if Global.getVar('autoShowdown') == false then
-		label.showdownLabel = 'Auto-Showdown is OFF'
-	elseif Global.getVar('autoShowdown') == true then
-		label.showdownLabel = 'Auto-Showdown is ON'
-	end
-	if Global.getVar('devMode') == true then
-		label.devLabel = 'Dev Mode is ON'
-	elseif Global.getVar('devMode') == false then
-		label.devLabel = 'Dev Mode is OFF'
-	end
-	if Global.getVar('autoDeckRefresh') == true then
-		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
-	elseif Global.getVar('autoDeckRefresh') == false then
-		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
-	end
-	if Global.getVar('autoMonsterDeck') == true then
-		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
-	elseif Global.getVar('autoMonsterDeck') == false then
-		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
-	end
-
-
-	--reset saved data
-	self.createButton({
-		click_function = 'clearSavedData',
-		function_owner = self,
-		label = 'Reset Script Variables',
-		position = {4,1,-1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--dev mode(unlock statics)
-	self.createButton({
-		click_function = 'devModeToggle',
-		function_owner = self,
-		label = label.devLabel,
-		position = {4,1,-3},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto hunt
-	self.createButton({
-		click_function = 'autoHuntToggle',
-		function_owner = self,
-		label = label.huntLabel,
-		position = {-4,1,-5},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto showdown
-	self.createButton({
-		click_function = 'autoShowdownToggle',
-		function_owner = self,
-		label = label.showdownLabel,
-		position = {-4,1,-3},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto showdown deck build (inactive)
-	self.createButton({
-		click_function = 'autoShowdownDeckBuildToggle',
-		function_owner = self,
-		label = label.monsterDeckLabel,
-		position = {-4,1,-1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--auto deck refresh (inactive)
-	self.createButton({
-		click_function = 'autoDeckRefreshToggle',
-		function_owner = self,
-		label = label.deckRefreshLabel,
-		position = {-4,1,1},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-	--hide
-	self.createButton({
-		click_function = 'hideConsole',
-		function_owner = self,
-		label = 'Hide Console',
-		position = {4,1,-5},
-		rotation = {0,0,0},
-		width = 3000,
-		height = 400,
-		font_size = 200
-	})
-
-end
-
---------------------
---Fcns
---------------------
-
-
-function updateLabels()
-	local buttonList = {}
-	buttonList = self.getButtons()
-	btns = {}
-	for k,v in pairs(buttonList) do
-		local index = v.index
-		local key = v.click_function
-		btns[key] = index
-	end
-
-	params = {}
-	if Global.getVar('autoHunt') == false then
-		params.index = btns.autoHuntToggle
-		params.label = 'Auto-Hunt is OFF'
-		self.editButton(params)
-	elseif Global.getVar('autoHunt') == true then
-		params.index = btns.autoHuntToggle
-		params.label = 'Auto-Hunt is ON'
-		self.editButton(params)
-	end
-	if Global.getVar('autoShowdown') == false then
-		params.index = btns.autoShowdownToggle
-		params.label = 'Auto-Showdown is OFF'
-		self.editButton(params)
-	elseif Global.getVar('autoShowdown') == true then
-		params.index = btns.autoShowdownToggle
-		params.label = 'Auto-Showdown is ON'
-		self.editButton(params)
-	end
-	if Global.getVar('devMode') == true then
-		params.index = btns.devModeToggle
-		params.label = 'Dev Mode is ON'
-		self.editButton(params)
-	elseif Global.getVar('devMode') == false then
-		params.index = btns.devModeToggle
-		params.label = 'Dev Mode is OFF'
-		self.editButton(params)
-	end
-	if Global.getVar('autoDeckRefresh') == true then
-		params.index = btns.autoDeckRefreshToggle
-		params.label = 'Essential Deck Refresh (INACTIVE)'
-		self.editButton(params)
-	elseif Global.getVar('autoDeckRefresh') == false then
-		params.index = btns.autoDeckRefreshToggle
-		params.label = 'Essential Deck Refresh (INACTIVE)'
-		self.editButton(params)
-	end
-	if Global.getVar('autoMonsterDeck') == true then
-		params.index = btns.autoShowdownDeckBuildToggle
-		params.label = 'Showdown Deckbuilder (INACTIVE)'
-		self.editButton(params)
-	elseif Global.getVar('autoMonsterDeck') == false then
-		params.index = btns.autoShowdownDeckBuildToggle
-		params.label = 'Showdown Deckbuilder (INACTIVE)'
-		self.editButton(params)
-	end
-end
-
-function clearSavedData()
-	Global.setVar('clearSavedData', true)
-	printToAll('Saved scripted variables have been cleared.',{0,0.8,0})
-	printToAll('IMPORTANT, Manually delete any remaining hunt/showdown components that would normally be cleaned up or you may trigger errors in future auto setups.',{0.8,0,0})
-	printToAll('Save and reload the game to complete variable reset.',{0,0.8,0})
-end
-
-function autoHuntToggle()
-	Global.call('toggleAutoHunt')
-	updateLabels()
-end
-
-function autoShowdownToggle()
-	Global.call('toggleAutoShowdown')
-	updateLabels()
-end
-
-function autoShowdownDeckBuildToggle()
-	printToAll('Feature is not implemented.',{0.8,0,0})
-	Global.call('toggleAutoMonsterDeck')
-	updateLabels()
-end
-
-function autoDeckRefreshToggle()
-	printToAll('Feature is not implemented.',{0.8,0,0})
-	Global.call('toggleAutoDeckRefresh')
-	updateLabels()
-end
-
-function devModeToggle()
-	Global.call('toggleDevMode')
-	updateLabels()
-end
-
-function hideConsole()
-	local params = {0,5,80}
-	self.setPosition(params)
-	self.interactable = false
-	self.setRotation({0,180,180})
-end
-
-function showConsole()
-
-
-end
\ No newline at end of file
diff --git a/Lua/Custom Token.ba32c7.lua b/Lua/Custom Token.ba32c7.lua
deleted file mode 100644
index 94a9e90..0000000
--- a/Lua/Custom Token.ba32c7.lua	
+++ /dev/null
@@ -1,522 +0,0 @@
---KDM Nog Settlement Sheet
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.05
-
-	--example counter (clicky +/- to change number)
-    dx = 0.29; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy1', 'big', dx, dy)
-
-	--example counter (clicky +/- to change number)
-    dx = 0.73; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy4', 'big', dx, dy)
-	
-	--example counter (clicky +/- to change number)
-    dx = 1.18; dy = -1.666 --position of vert/horizontal
-	createCounter('thingy5', 'big', dx, dy)
-
-	--example textfield (clicky to make a text field with edit button)
-	dx = 0.7; dy = -2.2 --position of vert/horizontal
-	createTextField('thingy3','txt', dx, dy)
-
-	--example of a series aligned horizontally with each other
-	dx = -1.359; dy = -2.179; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('A', dx, dy); dy = dy + py;
-	createToggle('B', dx, dy); dy = dy + py;
-	createToggle('C', dx, dy); dy = dy + py;
-	createToggle('D', dx, dy); dy = dy + py;
-	createToggle('E', dx, dy); dy = dy + py;
-	createToggle('F', dx, dy); dy = dy + py;
-	createToggle('G', dx, dy); dy = dy + py;
-	createToggle('H', dx, dy); dy = dy + py;
-	createToggle('I', dx, dy); dy = dy + py;
-	createToggle('J', dx, dy)
-	dx = -1.359; dy = -1.347; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AA', dx, dy); dy = dy + py;
-	createToggle('BB', dx, dy); dy = dy + py;
-	createToggle('CC', dx, dy); dy = dy + py;
-	createToggle('DD', dx, dy); dy = dy + py;
-	createToggle('EE', dx, dy); dy = dy + py;
-	createToggle('FF', dx, dy); dy = dy + py;
-	createToggle('GG', dx, dy); dy = dy + py;
-	createToggle('HH', dx, dy); dy = dy + py;
-	createToggle('II', dx, dy); dy = dy + py;
-	createToggle('JJ', dx, dy)
-	dx = -1.359; dy = -0.51; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AAA', dx, dy); dy = dy + py;
-	createToggle('BBB', dx, dy); dy = dy + py;
-	createToggle('CCC', dx, dy); dy = dy + py;
-	createToggle('DDD', dx, dy); dy = dy + py;
-	createToggle('EEE', dx, dy); dy = dy + py;
-	createToggle('FFF', dx, dy); dy = dy + py;
-	createToggle('GGG', dx, dy); dy = dy + py;
-	createToggle('HHH', dx, dy); dy = dy + py;
-	createToggle('III', dx, dy); dy = dy + py;
-	createToggle('JJJ', dx, dy)
-	dx = -1.359; dy = 0.328; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('AAAA', dx, dy); dy = dy + py;
-	createToggle('BBBB', dx, dy); dy = dy + py;
-	createToggle('CCCC', dx, dy); dy = dy + py;
-	createToggle('DDDD', dx, dy); dy = dy + py;
-	createToggle('EEEE', dx, dy); dy = dy + py;
-	createToggle('FFFF', dx, dy); dy = dy + py;
-	createToggle('GGGG', dx, dy); dy = dy + py;
-	createToggle('HHHH', dx, dy); dy = dy + py;
-	createToggle('IIII', dx, dy); dy = dy + py;
-	createToggle('JJJJ', dx, dy)
-	
-	dx = -1.303; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Quarry', dx, dy); dy = dy + py;
-	createToggle('Quarry1', dx, dy); dy = dy + py;
-	createToggle('Quarry2', dx, dy); dy = dy + py;
-	createToggle('Quarry3', dx, dy); dy = dy + py;
-	createToggle('Quarry4', dx, dy); dy = dy + py;
-	
-	dx = -0.5; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Quarry5', dx, dy); dy = dy + py;
-	createToggle('Quarry6', dx, dy); dy = dy + py;
-	createToggle('Quarry7', dx, dy); dy = dy + py;
-	createToggle('Quarry8', dx, dy); dy = dy + py;
-	createToggle('Quarry9', dx, dy); dy = dy + py;
-	
-	dx = 0.351; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem', dx, dy); dy = dy + py;
-	createToggle('Nem1', dx, dy); dy = dy + py;
-	createToggle('Nem2', dx, dy); dy = dy + py;
-	createToggle('Nem3', dx, dy); dy = dy + py;
-	createToggle('Nem4', dx, dy); dy = dy + py;
-	
-	dx = 0.87; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem5', dx, dy); dy = dy + py;
-	createToggle('Nem6', dx, dy); dy = dy + py;
-	createToggle('Nem7', dx, dy); dy = dy + py;
-	createToggle('Nem8', dx, dy); dy = dy + py;
-	createToggle('Nem9', dx, dy); dy = dy + py;
-	
-	dx = 1.038; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem10', dx, dy); dy = dy + py;
-	createToggle('Nem11', dx, dy); dy = dy + py;
-	createToggle('Nem12', dx, dy); dy = dy + py;
-	createToggle('Nem13', dx, dy); dy = dy + py;
-	createToggle('Nem14', dx, dy); dy = dy + py;
-	
-	dx = 1.213; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Nem15', dx, dy); dy = dy + py;
-	createToggle('Nem16', dx, dy); dy = dy + py;
-	createToggle('Nem17', dx, dy); dy = dy + py;
-	createToggle('Nem18', dx, dy); dy = dy + py;
-	createToggle('Nem19', dx, dy); dy = dy + py;
-	
-	dx = 0.239; dy = -0.76; px = 1; py = 0.1905; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('MileStone1', dx, dy); dy = dy + py;
-	createToggle('Milestone2', dx, dy); dy = dy + py;
-	createToggle('MileStone3', dx, dy); dy = dy + py;
-	createToggle('MileStone4', dx, dy); dy = dy + py;
-	createToggle('MileStone5', dx, dy); dy = dy + py;
-	createToggle('MileStone6', dx, dy); dy = dy + py;
-	createToggle('Milestone7', dx, dy); dy = dy + py;
-	createToggle('MileStone8', dx, dy); dy = dy + py;
-	createToggle('MileStone9', dx, dy); dy = dy + py;
-	createToggle('MileStone10', dx, dy); dy = dy + py;
-	
-	dx = -1.333; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Death1', dx, dy); dx = dx + px;
-	createToggle('Death2', dx, dy); dx = dx + px;
-	createToggle('Death3', dx, dy); dx = dx + px;
-	createToggle('Death4', dx, dy); dx = dx + px;
-	createToggle('Death5', dx, dy); dx = dx + px;
-	createToggle('Death6', dx, dy); dx = dx + px;
-	createToggle('Death7', dx, dy); dx = dx + px;
-	createToggle('Death8', dx, dy); dx = dx + px;
-	createToggle('Death9', dx, dy); dx = dx + px;
-	createToggle('Death10', dx, dy); dx = dx + px;
-	createToggle('Death11', dx, dy); dx = dx + px;
-	createToggle('Death12', dx, dy); dx = dx + px;
-	createToggle('Death13', dx, dy); dx = dx + px;
-	createToggle('Death14', dx, dy); dx = dx + px;
-	createToggle('Death15', dx, dy); dx = dx + px;
-	createToggle('Death16', dx, dy); dx = dx + px;
-	createToggle('Death17', dx, dy); dx = dx + px;
-	createToggle('Death18', dx, dy); dx = dx + px;
-	createToggle('Death19', dx, dy); dx = dx + px;
-	
-	dx = -1.333; dy = 2.2; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('Death20', dx, dy); dx = dx + px;
-	createToggle('Death21', dx, dy); dx = dx + px;
-	createToggle('Death22', dx, dy); dx = dx + px;
-	createToggle('Death23', dx, dy); dx = dx + px;
-	createToggle('Death24', dx, dy); dx = dx + px;
-	createToggle('Death25', dx, dy); dx = dx + px;
-	createToggle('Death26', dx, dy); dx = dx + px;
-	createToggle('Death27', dx, dy); dx = dx + px;
-	createToggle('Death28', dx, dy); dx = dx + px;
-	createToggle('Death29', dx, dy); dx = dx + px;
-	createToggle('Death30', dx, dy); dx = dx + px;
-	createToggle('Death31', dx, dy); dx = dx + px;
-	createToggle('Death32', dx, dy); dx = dx + px;
-	createToggle('Death33', dx, dy); dx = dx + px;
-	createToggle('Death34', dx, dy); dx = dx + px;
-	createToggle('Death35', dx, dy); dx = dx + px;
-	createToggle('Death36', dx, dy); dx = dx + px;
-	createToggle('Death37', dx, dy); dx = dx + px;
-	createToggle('Death38', dx, dy); dx = dx + px;
-	
-	dx = 0.09; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
-	createToggle('LS1', dx, dy); dx = dx + px;
-	createToggle('LS2', dx, dy); dx = dx + px;
-	createToggle('LS3', dx, dy); dx = dx + px;
-	createToggle('LS4', dx, dy); dx = dx + px;
-	createToggle('LS5', dx, dy); dx = dx + px;
-	createToggle('LS6', dx, dy); dx = dx + px;
-	createToggle('LS7', dx, dy); dx = dx + px;
-	createToggle('LS8', dx, dy); dx = dx + px;
-	createToggle('LS9', dx, dy); dx = dx + px;
-	createToggle('LS10', dx, dy); dx = dx + px;
-	createToggle('LS11', dx, dy); dx = dx + px;
-	createToggle('LS12', dx, dy); dx = dx + px;
-	createToggle('LS13', dx, dy); dx = dx + px;
-	createToggle('LS14', dx, dy); dx = dx + px;
-	createToggle('LS15', dx, dy); dx = dx + px;
-	createToggle('LS16', dx, dy); dx = dx + px;
-	createToggle('LS17', dx, dy); dx = dx + px;
-	createToggle('LS18', dx, dy); dx = dx + px;
-	createToggle('LS19', dx, dy); dx = dx + px;
-	createToggle('LS20', dx, dy); dx = dx + px;
-   
-   --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 100, height = 100, font = 100},
-        button = {width = 50, height = 50, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 80, height = 80, font = 100},
-        offsets = { bottomButtons = {x = 0.10, y = 0, z = 0.26}}
-	}
-    buttons.params.sizes.toggle = {
-        display = {width = 17, height = 17, font = 40},
-        button = {width = 20, height = 20, font = 150},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 60},
-        button = {width = 80, height = 30, font = 40},
-        offsets = { bottomButtons = {x = -0.58, y = 0, z = 0.195}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-	local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	--reverse things for backside
-	if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-		buttonInfo.rotation = {0,0,180}
-		if offsets != nil then
-			reverse_x = -offsets.x
-		end
-	elseif offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            if (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then 
-					self.createButton(buttons[tostring(i)].plusOne) 
-				end
-                if (buttons[tostring(i)].minusOne != nil) then 
-					self.createButton(buttons[tostring(i)].minusOne) 
-				end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-		--buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then 
-		return 
-	end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 0.5, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-		if nm == '__survivor_name' then
-			buttons.counts.__b_survivor_name = objs[nm].getDescription()
-			buttons.counts.__b_fam_self = objs[nm].getDescription()
-			self.setName(objs[nm].getDescription())
-		elseif nm == '__b_survivor_name' then
-			buttons.counts.__survivor_name = objs[nm].getDescription()
-			buttons.counts.__b_fam_self = objs[nm].getDescription()
-			self.setName(objs[nm].getDescription())
-		end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-function onPickedUp()
-	updateDisplay(false)
-end
\ No newline at end of file
diff --git a/Lua/Global.-1.lua b/Lua/Global.-1.lua
deleted file mode 100644
index 24083e1..0000000
--- a/Lua/Global.-1.lua
+++ /dev/null
@@ -1,1892 +0,0 @@
---KDM Global Script
---script created by Eskander
---script v0.3
-
-----------------------------------------------------------------
---Globals
-----------------------------------------------------------------
-
----------------------
---Edit Prefs
----------------------
---unsaved
-bypassSavedLoad = false 	-- used to bypass load init manually
-prologueBypass = true  	--not ready, keep true
---saved
-clearSavedData = false 		-- used to clear save data
-autoHunt = true		--allows automatic hunt deployment of objects
-autoShowdown = true 	--allows automatic showdown deployment of objects
-autoMonsterDeck = false		--not ready, keep false
-autoDeckRefresh = false		--not ready, keep false
-debug = false		--not ready, keep false
-devMode = false		--changes interactive for static/placeholder objects, toggles rest interactive options below
-interactBox = false 	--makes gamebox interactable if true
-interactPlaceholders = false 	-- makes placeholders interactable if true
-interactStatics = false		--makes static objs interactable if true
-
----------------------
---Vars
----------------------
---tables
-messages = {
-	msgLine = '__________________________________________',
-	msgBlank = '                                          ',
-	msgPageBreak = '------------------------------------------',
-	msgWelcomeTitle = 'Welcome to KINGDOM DEATH MONSTER.',
-	msgWelcomeSubtitle = "Brought to TTS by Nognoth's consortium.",
-	msgSettingUpHunt1 = 'The survivors have chosen their quarry. A ',
-	msgSettingUpHunt2 = '. The survivors prepare...',
-	msgHuntIsSetup1 = 'The Hunt for the ',
-	msgHuntIsSetup2 = ' awaits.  Prepare any Special Hunt Events and begin.',
-	msgHuntCleared = 'The Hunt is ended. The untaken paths erased.',
-	msgSettingUpShowdown1 = 'Before the survivors stands the ',
-	msgSettingUpShowdown2 = '...',
-	msgShowdownIsSetup = 'The survivors prepare to fight.',
-	msgShowdownCleared = 'The battle ends.  The settlement provides refuge for any that survive.'
-}
-
-boards = {
-	boardHunt = {guid = 'f6a581'},
-	boardMonster = {guid = '24f67c'},
-	boardStoryL = {guid = '40ac46'},
-	boardStoryR = {guid = 'a4960e'},
-boardStoryT = {guid = ' fece67'}
-}
-
-staticObjs = {
-	gameBox = {guid = '93281a'},
-	consoleAdmin = {guid = 'e00199'},
-	decorPlayerL = {guid = 'fc9c14'},
-	decorPlayerR = {guid = 'ef94c5'},
-	decorTableExtension = {guid = '12090a'},
-	decorTableEdgeD = {guid = 'ca277c'},
-	decorTableEdgeL = {guid = '32e351'},
-	decorTableEdgeR = {guid = 'f01594'},
-	decorTableEdgeU = {guid = '80e8da'},
-	decorBackPanelL = {guid = '22cf74'},
-	decorBackPanelR = {guid = 'aee909'},
-	decorBackPlanelSR = {guid = 'cfe52c'},
-	decorBackPlanelSL = {guid = '029e44'},
-	decorUpperTable1 = {guid = '1c9769'},
-	decorUpperTable2 = {guid = '0e954b'},
-	decorUpperTable3 = {guid = 'fee027'},
-	decorUpperTable4 = {guid = '053039'},
-}
-
-placeholders = {
-	--essentialDecks
-	deckBasicHunt = {guid = '4e9d9e'},
-	deckSpecialHunt = {guid = '148b16'},
-	deckAbilities = {guid = '625f68'},
-	deckSecretFightingArs = {guid = 'b6c374'},
-	deckFightingArts = {guid = '515434'},
-	deckDisorders = {guid = '3a5452'},
-	deckStrangeResources = {guid = '7aadc0'},
-	deckBasicResources = {guid = '4b6997'},
-	deckVermin = {guid = '8c28ba'},
-	deckTerrain = {guid = '51b305'},
-	deckSevereInjuries = {guid = '421db1'},
-	--monsterDecks
-	deckMonsterHunt = {guid = 'e80e92'},
-	deckMonsterSpecialHunt = {guid = '1dca94'},
-	deckMonsterResources = {guid = 'f8c095'},
-	deckMonsterAIBasic = {guid = 'be3886'},
-	deckMonsterAIAdvanced = {guid = '3b984a'},
-	deckMonsterAILegendary = {guid = '918627'},
-	deckMonsterAISpecial = {guid = 'da09a1', flip = true},
-	cardMonsterBasicAction = {guid = 'ce146d'},
-	deckMonsterHitLocations = {guid = '24cc56'},
-	--terrainspawn
-	cardTerrain1 = {guid = '15a593', flip = true},
-	cardTerrain2 = {guid = 'ec1cc4', flip = true},
-	cardTerrain3 = {guid = 'fc1740', flip = true},
-	cardTerrain4 = {guid = 'fa7080', flip = true},
-	cardTerrain5 = {guid = 'fe26f3', flip = true},
-	--huntPos
-	cardHunt1 = {guid = '5ba408', flip = true},
-	cardHunt2 = {guid = 'e17cae', flip = true},
-	cardHunt3 = {guid = '29c3c8', flip = true},
-	cardHunt4 = {guid = '0a3d67', flip = true},
-	cardHunt5 = {guid = 'b2af08', flip = true},
-	cardHunt6 = {guid = 'd32460', flip = true},
-	cardHunt7 = {guid = '9bac20', flip = true},
-	cardHunt8 = {guid = 'b344bb', flip = true},
-	cardHunt9 = {guid = 'd1549b', flip = true},
-	cardHunt10 = {guid = 'da6ad7', flip = true},
-	cardHunt11 = {guid = '9ce940', flip = true},
-	cardHunt12 = {guid = '4ac212', flip = true},
-	cardHunt13 = {guid = '5ac354', flip = true},
-}
-
-essentialDecks = {
-	--essential card decks
-	deckBasicHunt = {
-		guid = 'a0bf77',
-		name = 'Basic Hunt Events Deck',
-		description = 'essential, hunt, basic',
-		minCount = 12
-	},
-	deckSpecialHunt = {
-		guid = 'ca5915',
-		name = 'Special Hunt Events Deck',
-		description = 'essential, hunt, special',
-		minCount = 2
-	},
-	deckAbilities = {
-		guid = '092e97',
-		name = 'Abilities Deck',
-		description = 'essential, character, abilities',
-		minCount = 45
-	},
-	deckSecretFightingArs = {
-		guid = 'd08a37',
-		name = 'Secret Fighting Arts Deck',
-		description = 'essential, character, fighting art, secret',
-		minCount = 6
-	},
-	deckFightingArts = {
-		guid = '48e0af',
-		name = 'Fighting Arts Deck',
-		description = 'essential, character, fighting art',
-		minCount = 20
-	},
-	deckDisorders = {
-		guid = 'bd1ee8',
-		name = 'Disorders Deck',
-		description = 'essential, character, disorder',
-		minCount = 23
-	},
-	deckStrangeResources = {
-		guid = '697d92',
-		name = 'Strange Resources Deck',
-		description = 'essential, resource, strange',
-		minCount = 21
-	},
-	deckBasicResources = {
-		guid = '6668a5',
-		name = 'Basic Resources Deck',
-		description = 'essential, resource, basic',
-		minCount = 21
-	},
-	deckVermin = {
-		guid = '19d17b',
-		name = 'Vermin Deck',
-		description = 'essential, vermin',
-		minCount = 8
-	},
-	deckTerrain = {
-		guid = '4f9528',
-		name = 'Terrain Deck',
-		description = 'essential, terrain card',
-		minCount = 21
-	},
-	deckSevereInjuries = {
-		guid = '5be3e9',
-		name = 'Severe Injuries Deck',
-		description = 'essential, character, psi',
-		minCount = 18
-	},
-}
-
-	--added monster decks
-monsterDecks = {
-	deckMonsterHunt = {
-		name = '__ Hunt Events Deck',
-	},
-	deckMonsterSpecialHunt = {
-		name = '__ Special Hunt Events Deck',
-	},
-	deckMonsterResources = {
-		name = '__ Resources Deck',
-	},
-	deckMonsterAIBasic = {
-		name = '__ Basic AI Deck',
-	},
-	deckMonsterAIAdvanced = {
-		name = '__ Advanced AI Deck',
-	},
-	deckMonsterAILegendary = {
-		name = '__ Legendary AI Deck',
-	},
-	deckMonsterAISpecial = {
-		name = '__ Special AI Deck',
-	},
-	cardMonsterBasicAction = {
-		name = '__ Basic Action Card',
-	},
-	deckMonsterHitLocations = {
-		name = '__ Hit Locations Deck',
-	},
-}
-
-zones = {
-	zoneAll = {guid ='fc5df0'},
-	--general areas
-	zoneMain = {guid = 'f7d522'},
-	zoneHunt = {guid = '8fdea1'},
-	zoneSettlement = {guid = '000000'},
-	zoneSurvivors = {guid = '83dc7e'},
-	--specific areas
-	zoneStoryL = {guid = 'df9ce3'},
-	zoneStoryR = {guid = '7ede24'},
-	zoneStoryT = {guid = '6097d8'},
-	zoneP1 = {guid = '000000'},
-	zoneP2 = {guid = '000000'},
-	zoneP3 = {guid = '000000'},
-	zoneP4 = {guid = '000000'},
-	--essential decks
-	deckBasicHunt = {guid = '9e8411'},
-	deckSpecialHunt = {guid = '9b055d'},
-	deckAbilities = {guid = 'fd06c1'},
-	deckSecretFightingArs = {guid = 'c0437f'},
-	deckFightingArts = {guid = 'ad419f'},
-	deckDisorders = {guid = '682896'},
-	deckStrangeResources = {guid = '7c3e97'},
-	deckBasicResources = {guid = '405bff'},
-	deckVermin = {guid = '5cccc8'},
-	deckTerrain = {guid = '09fd7e'},
-	deckSevereInjuries = {guid = 'b29037'}
-}
-
-currentQuarryTable = {'null'}
-currentShowdownTable = {'null'}
-
---vars
---[[ INACTIVE, placeholders used instead
-offsetXHuntCards = {-27.5,-22.92,-18.3,-13.75,-9.17,-4.58,0,4.58,9.17,13.75,18.3,22.92,27.5}
-offsetScaleHuntBoard = 0.425000429
---]]
-
---tracking
---always saved
-firstGameLoad = true
-currentHuntLevel = 1
-currentShowdownLevel = 1
---saved unless cleared
-huntInProgress = false
-huntSettingUp = false
-showdownInProgress = false
-showdownSettingUp = false
-cancelHuntSetup = false
-monsterFigurinePlaced = nil
-monsterResourcePlaced = false
-monsterResourceToBePlace = false
-cancelShowdownSetup = false
-huntCleaning = false
-showdownCleaning = false
-huntCleanPending = false
-showdownCleanPending = false
-
-
---Colors
-rgbWhite = {1,1,1}
-rgbBlack = {0,0,0}
-rgbDarkRed = {0.8,0,0}
-rgbError = {1,0,0}
-rgbSystem = {0,1,0}
-rgbNarrator = {0.3,0.6,0.8}
-
-
----------------------
---Save data
----------------------
-function onSave()
-    local dataToSave = {}
-
-	if clearSavedData == false then
-		dataToSave = {
-			['clearSavedData'] = clearSavedData,
-			['autoHunt'] = autoHunt,
-			['autoShowdown'] = autoShowdown,
-			['autoMonsterDeck'] = autoMonsterDeck,
-			['autoDeckRefresh'] = autoDeckRefresh,
-			['debug'] = debug,
-			['devMode'] = devMode,
-			['interactBox'] = interactBox,
-			['interactPlaceholders'] = interactPlaceholders,
-			['interactStatics'] = interactStatics,
-			['currentQuarryTable'] = currentQuarryTable,
-			['currentShowdownTable'] = currentShowdownTable,
-			['firstGameLoad'] = firstGameLoad,
-			['currentHuntLevel'] = currentHuntLevel,
-			['currentShowdownLevel'] = currentShowdownLevel,
-			['huntInProgress'] = huntInProgress,
-			['huntSettingUp'] = huntSettingUp,
-			['showdownInProgress'] = showdownInProgress,
-			['showdownSettingUp'] = showdownSettingUp,
-			['cancelHuntSetup'] = cancelHuntSetup,
-			['monsterFigurinePlaced'] = monsterFigurinePlaced,
-			['monsterResourcePlaced'] = monsterResourcePlaced,
-			['monsterResourceToBePlace'] = monsterResourceToBePlace,
-			['cancelShowdownSetup'] = cancelShowdownSetup,
-			['huntCleaning'] = huntCleaning,
-			['showdownCleaning'] = showdownCleaning,
-			['huntCleanPending'] = huntCleanPending,
-			['showdownCleanPending'] = showdownCleanPending,
-		}
-	else
-		dataToSave = {
-			['clearSavedData'] = clearSavedData,
-			['autoHunt'] = autoHunt,
-			['autoShowdown'] = autoShowdown,
-			['autoMonsterDeck'] = autoMonsterDeck,
-			['autoDeckRefresh'] = autoDeckRefresh,
-			['debug'] = debug,
-			['devMode'] = devMode,
-			['interactBox'] = interactBox,
-			['interactPlaceholders'] = interactPlaceholders,
-			['interactStatics'] = interactStatics,
-			['firstGameLoad'] = firstGameLoad,
-			['currentQuarryTable'] = currentQuarryTable,
-			['currentShowdownTable'] = currentShowdownTable,
-			['currentHuntLevel'] = currentHuntLevel,
-			['currentShowdownLevel'] = currentShowdownLevel,
-		}
-	end
-
-	saved_data = JSON.encode(dataToSave)
-
-	--Uncomment this line to manually clear the save data
-	--saved_data = ''
-
-    return saved_data
-end
-
-----------------------------------------------------------------
---Initialize
-----------------------------------------------------------------
-
-function onLoad(saved_data)
-	----------------------------initial chat messages
-	printToAll(messages.msgLine,rgbBlack)
-	printToAll(messages.msgBlank,rgbBlack)
-	printToAll(messages.msgWelcomeTitle,rgbDarkRed)
-	printToAll(messages.msgWelcomeSubtitle,rgbWhite)
-	printToAll(messages.msgLine,rgbBlack)
-
-	--load saved from previous session
-	if bypassSavedLoad == false then
-		if saved_data != '' then
-			resumeLoadInit(saved_data)
-		else
-			clearSavedData = false
-		end
-	end
-
-	--------------------------------always init
-	--[[deactivated
-	--clear deprecated zones
-	local objs = getAllObjects()
-	local protected = false
-	for k,v in pairs (objs) do
-		if v.tag == 'Scripting' then
-			protected = false
-			for j, h in pairs (zones) do
-				if h.guid == v.guid then
-					protected = true
-				end
-			end
-			if protected == false then
-				v.destruct()
-			end
-		end
-	end
-	--]]
-	
-	------------------admin move/resize zones, normally disabled
-	--[[--]]
-	local zone = getObjectFromGUID(zones.zoneAll.guid)
-	local pos = zone.getPosition()
-	local adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	local scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneHunt.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneMain.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneSurvivors.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	zone = getObjectFromGUID(zones.zoneAll.guid)
-	pos = zone.getPosition()
-	adjPos = zone.setPosition({pos[1], 10, pos[3]})
-	scale = zone.getScale()
-	zone.setScale({scale[1], 20, scale[3]})
-	
-	
-	
-	-----------------load essential obj refs
-	gameBox = getObjectFromGUID(staticObjs.gameBox.guid)
-	consoleAdmin = getObjectFromGUID(staticObjs.consoleAdmin.guid)
-
-
-	
-	--[[deactivated
-	--update essential obj zones
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		local rot = obj.getRotation()
-		local pos = obj.getPosition()
-		zones[k] = spawnObject({
-			type = 'ScriptingTrigger',
-			position = pos,
-			rotation = rot,
-			scale = {3, 3, 3}
-		})
-	end
-	--]]
-
-	---------------load prefs
-	if devMode == true then
-		devModeOn()
-	else
-		devModeOff()
-	end
-	if interactBox == true then
-		unlockGameBox()
-	else
-		lockGameBox()
-	end
-	if interactPlaceholders == true then
-		unlockPlaceholders()
-	else
-		lockPlaceholders()
-	end
-	if interactStatics == true then
-		unlockStatics()
-	else
-		lockStatics()
-	end
-
-	--prologue setup load, not ready yet
-	if prologueBypass == false and firstGameLoad == true then
-		prologueInit()
-	elseif firstGameLoad == true then
-		firstGameLoad = false
-		bypassPrologueLoad()
-	else
-		fullLoadInit()
-	end
-end
-
------------------------------------------loads saved vars from previous session
-function resumeLoadInit(saved_data)
-	local dataToLoad = JSON.decode(saved_data)
-	clearSavedData = dataToLoad.clearSavedData
-	autoHunt = dataToLoad.autoHunt
-	autoShowdown = dataToLoad.autoShowdown
-	autoMonsterDeck = dataToLoad.autoMonsterDeck
-	autoDeckRefresh = dataToLoad.autoDeckRefresh
-	debug = dataToLoad.debug
-	devMode = dataToLoad.devMode
-	interactBox = dataToLoad.interactBox
-	interactPlaceholders = dataToLoad.interactPlaceholders
-	interactStatics = dataToLoad.interactStatics
-	firstGameLoad = dataToLoad.firstGameLoad
-	currentQuarryTable = dataToLoad.currentQuarryTable
-	currentShowdownTable = dataToLoad.currentShowdownTable
-	currentHuntLevel = dataToLoad.currentHuntLevel
-	currentShowdownLevel = dataToLoad.currentShowdownLevel
-	if clearSavedData == false then
-		huntInProgress = dataToLoad.huntInProgress
-		huntSettingUp = dataToLoad.huntSettingUp
-		showdownInProgress = dataToLoad.showdownInProgress
-		showdownSettingUp = dataToLoad.showdownSettingUp
-		cancelHuntSetup = dataToLoad.cancelHuntSetup
-		monsterFigurinePlaced = dataToLoad.monsterFigurinePlaced
-		monsterResourcePlaced = dataToLoad.monsterResourcePlaced
-		monsterResourceToBePlace = dataToLoad.monsterResourceToBePlace
-		cancelShowdownSetup = dataToLoad.cancelShowdownSetup
-		huntCleaning = dataToLoad.huntCleaning
-		showdownCleaning = dataToLoad.showdownCleaning
-		huntCleanPending = dataToLoad.huntCleanPending
-		showdownCleanPending = dataToLoad.showdownCleanPending
-	else
-		clearSavedData = false
-	end
-end
-
-
-
---------------------------------loads only prologue setup, currently not ready
-function prologueInit()
-	printToAll('Choose how to proceed. Choose wisely.', rgbNarrator)
-	--gameBox2 = getObjectFromGUID('')
-end
-
---------------------------------loads all assets that would be loaded in stages during prologue
-function bypassPrologueLoad()
-	fullLoadInit()
-end
-
------------------------------------------loads normal full init
-function fullLoadInit()
-	--board ref
-	boardHunt = getObjectFromGUID(boards.boardHunt.guid)
-	boardMonster = getObjectFromGUID(boards.boardMonster.guid)
-
-end
-
-
-----------------------------------------------------------------
---Prologue setup
-----------------------------------------------------------------
-
---triggered by bypass button press, players read the intro story, guided on state change for manuals
-function prologue1()
-	--move manual gamebox, setscale difference
-	gameBox2.setPosition({30,10,30})
-	gameBox2.setScale({1,1,1})
-	--get bag of prologue items
-	prologueBag = gameBox2.takeObject({guid = '',position = {0,0,-30},rotation = {0,0,0}})
-	prologueBag.lock()
-	--spawn prologue book
-	prologueBag.takeObject({guid = '',position = {0,0,0},rotation ={0,0,0}})
-	--spawn guide for state change
-	prologueBag.takeObject({guid = '',position = {0,0,10},rotation ={0,0,0}})
-	--spawn essential decks
-	sstartLuaCoroutine(Global, 'spawnEssentials1Coroutine')
-end
-
-function spawnEssentials1Coroutine()
-	local decks = {}
-	local d = 1
-	for k, v in pairs(essentialDecks) do
-		local params = {}
-		params.guid = v.guid
-		local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
-		params.position = {pos[1],pos[2] + 2,pos[3]}
-		params.rotation = getObjectFromGUID(placeholders[k].guid).getRotation()
-		decks[d] = prologueBag.takeObject(params)
-		d = d + 1
-		for i=1, 30 do
-			coroutine.yield(0)
-		end
-	end
-	for k, v in pairs(decks) do
-		v.shuffle()
-	end
-	return 1
-end
-
-
---triggered by state change to char gen page, players introed to char stations and set char names
-function prologue2()
-	--load player stations,starting gear, figurines, stat tokens, and sheet bags
-	--spawn guides for sheets
-	--spawn manual for create char
-end
-
---triggered by state change on last story page, players introed to showdown setup
-function prologue3()
-	--load lion statue, showdown setup story book, other needed story books
-	--load guides for setting up showdown
-	--load manual for conducting showdown
-end
-
---triggered by showdown cleanup, players introed to settlement phase
-function prologue4()
-	--spawn settlement board, settlement sheets, settlement guides, settlement story books, innovations board, settlement upgrades
-end
-
---triggered by??
-function prologue5()
-	--spawn hunt board, hunt guide, hunt etc
-end
-
-
-
-
-----------------------------------------------------------------
---Admin Console
-----------------------------------------------------------------
-
-function showAdmin()
-	local params = {0, 10, 0}
-	consoleAdmin.setPosition(params)
-	consoleAdmin.interactable = true
-	consoleAdmin.setRotation({0,180,0})
-end
-
-function togglePlaceholders()
-	if interactPlaceholders == false then
-		unlockPlaceholders()
-	else
-		lockPlaceholders()
-	end
-end
-
-function lockPlaceholders()
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		if obj != nil then
-			obj.tooltip = false
-			obj.lock()
-			obj.interactable = false
-		end
-	end
-	interactPlaceholders = false
-end
-
-function unlockPlaceholders()
-	for k,v in pairs(placeholders) do
-		local obj = getObjectFromGUID(v.guid)
-		if obj != nil then
-			obj.tooltip = true
-			obj.unlock()
-			obj.interactable = true
-		end
-	end
-	interactPlaceholders = true
-end
-
-function toggleGameBox()
-	if gameBox.interactable == true then
-		gameBox.interactable = false
-		interactBox = false
-	else
-		gameBox.interactable = true
-		interactBox = true
-	end
-end
-
-function unlockGameBox()
-	gameBox.interactable = true
-	interactBox = true
-end
-
-function lockGameBox()
-	gameBox.interactable = false
-	interactBox = false
-end
-
-function devModeOn()
-	unlockGameBox()
-	unlockPlaceholders()
-	unlockStatics()
-	devMode = true
-end
-
-function devModeOff()
-	lockGameBox()
-	lockPlaceholders()
-	lockStatics()
-	devMode = false
-end
-
-function toggleDevMode()
-	if devMode == true then
-		devModeOff()
-	elseif devMode == false then
-		devModeOn()
-	end
-end
-
-
-function unlockStatics()
-	for k, v in pairs(staticObjs) do
-		if k != gameBox or k != consoleAdmin then
-			local object = getObjectFromGUID(v.guid)
-			object.interactable = true
-		end
-	end
-	interactStatics = true
-end
-
-function lockStatics()
-	for k, v in pairs(staticObjs) do
-		if k != gameBox or k != consoleAdmin then
-			local object = getObjectFromGUID(v.guid)
-			object.interactable = false
-		end
-	end
-	interactStatics = false
-end
-
-function toggleAutoHunt()
-	if autoHunt == true then
-		autoHunt = false
-	elseif autoHunt == false then
-		autoHunt = true
-	end
-end
-
-function toggleAutoShowdown()
-	if autoShowdown == true then
-		autoShowdown = false
-	elseif autoShowdown == false then
-		autoShowdown = true
-	end
-end
-
-function toggleAutoMonsterDeck()
-	if autoMonsterDeck == true then
-		autoMonsterDeck = false
-	elseif autoMonsterDeck == false then
-		autoMonsterDeck = true
-	end
-end
-
-function toggleAutoDeckRefresh()
-	if deckRefresh == true then
-		deckRefresh = false
-	elseif deckRefresh == false then
-		deckRefresh = true
-	end
-end
-
-
-
-----------------------------------------------------------------
---Common Utility Functions
-----------------------------------------------------------------
-
---[[ ------------------------------custom get obj fcn, searches for obj(s) through custom searches
-types of search and params
-tag = search for objs by tags, includes/excludes, params = {conditional = 'and' or 'or', criteria = string looked for, exclude = strings to exclude obj if found}
-name = search for objs by name, with varying strings, params = {conditional = 'contains' or 'matches', criteria = string looked for, exclude = strings to exclude obj if found}
---]]
-function getObj(searchType, container, params)  --params = {conditional = '', criteria = {}, exclude = {}}
-	if container != nil then
-		local containerType = container.tag
-		local objs = container.getObjects()
-		local objGUIDs = {}
-		local text = {}
-		local excludes = params.exclude
-		local includes = params.criteria
-		local objAdded = false
-		local isFound = false
-		local foundCount = 0
-		if searchType ==  'tag' then
-			for k, v in pairs(objs) do
-				objAdded = false
-				isFound = false
-				foundCount = 0
-				text = v.getDescription()
-				for i = 1, #includes do
-					if string.find(string.lower(text), string.lower(includes[i])) then
-						foundCount = foundCount + 1
-					end
-				end
-				if params.conditional == 'and' then
-					if foundCount == #includes then
-						isFound = true
-					end
-				elseif params.conditional == 'or' then
-					if foundCount > 0 then
-						isFound = true
-					end
-				end
-				if isFound == true then
-					table.insert(objGUIDs, v.getGUID())
-					objAdded = true
-				end
-				isFound = false
-				if #excludes > 0 then
-					for i = 1, #excludes do
-						if string.find(string.lower(text), string.lower(excludes[i])) then
-							isFound = true
-						end
-					end
-					if objAdded == true and isFound == true then
-						table.remove(objGUIDs)
-					end
-				end
-			end
-		elseif searchType == 'name' then
-			for k, v in pairs(objs) do
-				objAdded = false
-				isFound = false
-				if containerType == 'Bag' then
-					text = v.name
-				elseif containerType == 'Deck' then
-					text = v.nickname
-				else
-					text = v.getName()
-				end
-				for i = 1, #includes do
-					if params.conditional == 'matches' then
-						if text == includes[i] then
-							isFound = true
-						end
-
-					elseif params.conditional == 'contains' then
-						if string.find(text, includes[i]) then
-							isFound = true
-						end
-					end
-					if isFound == true then
-						table.insert(objGUIDs, v.guid)
-						objAdded = true
-					end
-				end
-				isFound = false
-				if #excludes > 0 then
-					for i = 1, #excludes do
-						if params.conditional == 'matches' then
-							if text == excludes[i] then
-								isFound = true
-							end
-						elseif params.conditional == 'contains' then
-							if string.find(text, excludes[i]) then
-								isFound = true
-							end
-						end
-					end
-					if objAdded == true and isFound == true then
-						table.remove(objGUIDs)
-					end
-				end
-			end
-		end
-		if #objGUIDs > 0 then
-			local obj = {}
-			if containerType == 'Bag' or containerType == 'Deck' then
-				obj = objGUIDs
-			else
-				for i=1,#objGUIDs do
-					obj[i] = getObjectFromGUID(objGUIDs[i])
-				end
-			end
-			return obj
-		else
-			return nil
-		end
-	else
-		printToAll('Container not found!',rgbError)
-	end
-end
-
-----------------------spawn from box
-function spawnFromBox(objects, paramsOverride)
-	local dy = 0
-	local dz = 120
-	local py = 2
-	local pz = -3
-	local params = {}
-	local params2 = {}
-	local result = {}
-	local result2 = {}
-	local container = gameBox
-	for k,v in pairs(objects) do
-		--set params
-		if paramsOverride != nil then
-			params.position = paramsOverride.position
-			params.rotation = paramsOverride.rotation
-		else
-			local placeholder = getObjectFromGUID(placeholders[k].guid)
-			params.position = placeholder.getPosition()
-			params.rotation = placeholder.getRotation()
-			if placeholders[k].flip != nil then
-				if placeholders[k].flip == true then
-					params.rotation.z = 0
-				end
-			end
-		end
-		params.position[2] = params.position[2] + 5
-		params.guid = v
-		--take
-		result[k] = container.takeObject(params)
-		--dupe
-		coroutine.yield(0)
-		if result[k] != nil then
-			dz = dz + pz
-			dy = dy + py
-			params2.position = gameBox.getPosition()
-			params2.position.z = params2.position.z + dz
-			result2[k] = duplicate(result[k], params2)
-			for i=1,45,1 do
-				coroutine.yield(0)
-			end
-			params2.position = gameBox.getPosition()
-			params2.position.y = params2.position.y + dy
-			result2[k].setPositionSmooth(params2.position)
-			for i=1,45,1 do
-				coroutine.yield(0)
-			end
-			--if result[k].tag == 'Deck' then
-				--result[k].shuffle()
-			--end
-			--coroutine.yield(0)
-		else
-			printToAll(k .. ' not found! Check component in Master Game Box or remove excess decks on placeholder.', rgbError)
-		end
-	end
-	return result
-end
-
-
--------------------duplicate object
-function duplicate(object, params)
-	if object != nil then
-		return object.clone(params)
-	else
-		return nil
-	end
-end
-
-
-
--------------------clear objs
-function cleanup(searchType, container, params)
-	local killList = getObj(searchType, container, params)
-	if killList != nil or killList != null then
-		for k,v in pairs(killList) do
-			v.destruct()
-		end
-		return true
-	else
-		return false
-	end
-end
-
----------------------findDeck or card
-function findDeck(zone)
-	local isDeck = false
-	local obj = {}
-	local deck = {}
-	local card = {}
-	local objs = zone.getObjects()
-	for k, v in pairs(objs) do
-		if string.find(v.tag,'Deck') then
-			isDeck = true
-			deck = v
-		elseif string.find(v.tag, 'Card') then
-			isDeck = false
-			card = v
-		end
-	end
-	local foundDeck = {}
-	if isDeck == true then
-		foundDeck = {deck, 'Deck'}
-		return foundDeck
-	elseif isDeck == false and card != nil then
-		foundDeck = {card, 'Card'}
-		return foundDeck
-	else
-		return nil
-	end
-end
-
----------------------trig calc
-function trig(obj, distance)
-    local r = obj.getRotation()[2]
-    r = math.rad(r)
-    return {distance * math.cos(r), 0, distance * math.sin(r)}
-end
-
-
----------------------findPos
-function findPos(var)
-	local guid =  placeholder[var].guid
-	local placeholder = getObjectFromGUID(guid)
-	local params = {}
-	if placeholder != nil or null then
-		local pos = placeholder.getPosition()
-		local rot = placeholder.getRotation()
-		params = {position = pos, rotation = rot}
-		return params
-	else
-		printToAll('Placeholder not found.', rgbError)
-		return nil
-	end
-end
-
------------------------check counts of essential objs
-function checkSumEssentials(table, var)
-	local checkSumPass = nil
-	if getObjectFromGUID(table[var].guid) != nil then
-		object = getObjectFromGUID(table[var].guid)
-		if object.getQuantity() < table[var].minCount then
-			checkSumPass = false
-			printToAll('Checksum on ' .. var .. ' failed.  Missing ' .. table[var].minCount - object.getQuantity() .. ' components...', rgbSystem)
-		else
-			checkSumPass = true
-		end
-	end
-	return checkSumPass
-end
-
-----------------------check essential decks -- checks decks by guid, returns table of [1]good decks and [2]broken decks by var
-function checkEssentialDecks(deckVars)
-	local decksToCheck = {}
-	local decksBroken = {}
-	local decksGood = {}
-	if deckVars != nil then
-		decksToCheck = deckVars
-	else
-		for k, v in pairs(essentialDecks) do
-			table.insert(decksToCheck, k)
-		end
-	end
-	for k,v in pairs(decksToCheck) do
-		local guid = essentialDecks[v].guid
-		if getObjectFromGUID(guid) == nil then
-			table.insert(decksBroken, v)
-		else
-			table.insert(decksGood, v)
-		end
-	end
-	local result = {decksGood, decksBroken}
-	return result
-end
-
-
---------------------reset essential decks --gets deck by guid, resets, and checks count, returns true if meets count, false if not, and nil if no deck
-function resetEssentialDeck(deckVar)
-	local deck = getObjectFromGUID(essentialDecks[deckVar].guid)
-	local reset = false
-	if deck != nil then
-		deck.reset()
-		for i=1, 60 do
-			coroutine.yield(0)
-		end
-		local count = deck.getQuantity()
-		if count < essentialDecks[deckVar].minCount then
-			reset = false
-		else
-			reset = true
-		end
-	else
-		reset = nil
-	end
-	return reset
-end
-
----------------------reconstruct essential decks --attempts to repair by getting all the cards to manually reset deck without changing deck
-function reconstructEssentialDeck(deckVar, zoneVar)
-	local reconstructed = false
-	local zone = {}
-	if zoneVar == nil then
-		zone = getObjectFromGUID(zones.zoneMain.guid)
-	else
-		zone = getObjectFromGUID(zones[zoneVar].guid)
-	end
-	local description = essentialDecks[deckVar].description
-	local nospaces = string.gsub(description, ' ', '')
-	local tags = {}
-	for i in string.gmatch(nospaces, '%a+') do
-		table.insert(tags, i)
-	end
-	local cards = getObj('tag',zone,{conditional = 'and', criteria = tags, exclude = {}})
-	local newDeck = {}
-	if cards != nil then
-		local i = 0
-		for k,v in pairs(cards) do
-			if v.tag != 'Deck' then
-				i=i+1
-				local pos = getObjectFromGUID(placeholders[deckVar].guid).getPosition()
-				local rot = getObjectFromGUID(placeholders[deckVar].guid).getRotation()
-				v.setPositionSmooth({pos[1],pos[2] + i+1,pos[3]})
-				v.setRotationSmooth(rot)
-			end
-		end
-		for i=1,120 do
-			coroutine.yield(0)
-		end
-	end
-	--rename/retag deck
-	local result = findDeck(getObjectFromGUID(zones[deckVar].guid))
-	if result[2] == 'Deck' then
-		local deck = result[1]
-		if deck != nil then
-			deck.setName(essentialDecks[deckVar].name)
-			deck.setDescription(essentialDecks[deckVar].description)
-			deck.tooltip = false
-			essentialDecks[deckVar].guid = deck.getGUID()
-			reconstructed = true
-		end
-	end
-	return reconstructed
-end
-
-----------------------respawn essential deck
-function respawnEssentialDeck(deckVar)
-	--purge existing
-	local description = essentialDecks[deckVar].description
-	local nospaces = string.gsub(description, ' ', '')
-	local tags = {}
-	for i in string.gmatch(nospaces, '%a+') do
-		table.insert(tags, i)
-	end
-	local zone = getObjectFromGUID(zones.zoneHunt.guid)
-	cleanup('tag',zone,{conditional = 'and', criteria = tags, exclude = {'drawn'}})
-	coroutine.yield(0)
-	--spawn new
-	local result = {}
-	local getDeck = getObj('name',gameBox, {conditional = 'matches',criteria = {essentialDecks[deckVar].name}, exclude = {}})
-	for k,v in pairs(getDeck) do
-		result[deckVar] = v
-	end
-	local deck = spawnFromBox(result, nil)
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	deck[deckVar].shuffle()
-	essentialDecks[deckVar].guid = deck[deckVar].guid
-end
-
-------------------debug essential decks
-function debugEssentialDecks(deckVars)
-	--identify bad decks
-	local checkPass = false
-	local checkedDecks = checkEssentialDecks(deckVars)
-	local badDecks = {}
-	local decksBroken = {}
-	local checkSum = nil
-	local decksBroken = checkedDecks[2]
-	if #decksBroken > 0 then
-		for k,v in pairs(checkedDecks[2]) do
-			table.insert(badDecks, v)
-		end
-	end
-	local decksGood = {}
-	local decksGood = checkedDecks[1]
-	if #decksGood > 0 then
-		for k,v in pairs(decksGood) do
-			checkSum = checkSumEssentials(essentialDecks, v)
-			if checkSum == false then
-				table.insert(badDecks, v)
-			end
-		end
-	end
-	local checkFail = false
-	if #badDecks < 1 then
-		checkPass = true
-	else
-		printToAll('Essential Deck failure. Attempting to repair...',rgbSystem)
-		--attempt repair
-		for k, v in pairs(badDecks) do
-			local deckVar = v
-			--printToAll(deckVar .. ' resetting...',rgbSystem)
-			local reset = resetEssentialDeck(deckVar)
-			if reset == false or reset == nil then
-				local fixed = false
-				--printToAll(deckVar .. ' reset failed...',rgbSystem)
-				--printToAll(deckVar .. ' reconstructing...',rgbSystem)
-				local reconstructed = reconstructEssentialDeck(deckVar, 'zoneMain')
-				if reconstructed == true then
-					--printToAll(deckVar .. ' reconstructed. Checksum...',rgbSystem)
-					for i=1,60 do
-						coroutine.yield(0)
-					end
-					checkSum = checkSumEssentials(essentialDecks, deckVar)
-					if checkSum == true then
-						fixed = true
-					end
-				else
-					--printToAll(deckVar .. ' reconstruct failed...',rgbSystem)
-				end
-				if fixed == false then
-					--printToAll(deckVar .. ' respawning from archive...',rgbSystem)
-					local deck = respawnEssentialDeck(deckVar)
-					--printToAll(deckVar .. ' respawned...',rgbSystem)
-					fixed = true
-				end
-			else
-				--printToAll(deckVar .. ' has reset...',rgbSystem)
-			end
-			--printToAll(deckVar .. ' final checksum...',rgbSystem)
-			checkSum = checkSumEssentials(essentialDecks, deckVar)
-			if checkSum == nil or checkSum == false then
-				printToAll('Automated debug of Essential Deck ' .. deckVar .. 'failed! Repair manually.', rgbError)
-				checkFail = true
-			end
-		end
-		if checkFail == true then
-			checkPass = false
-		else
-			checkPass = true
-		end
-		if checkPass == true then
-			printToAll('Repair successful.',rgbSystem)
-		end
-	end
-	debuggingDecks = false
-
-	return checkPass
-end
-
-
-----------------------------------------------------------------
---Features Functions
-----------------------------------------------------------------
-
-----------------------
---AutoHunt
-----------------------
-
-
---------launcher
-function setupHunt(monsterTable)
-	if huntInProgress == false and huntSettingUp == false and autoHunt == true and showdownInProgress == false and showdownSettingUp == false then
-		if monsterTable != nil then
-			currentQuarryTable = monsterTable
-		end
-		if currentQuarryTable.huntCardPlacement == nil or currentQuarryTable.huntLocation == nil then
-			printToAll(currentQuarryTable.monster .. ' cannot be hunted. ' .. currentQuarryTable.monster .. ' hunts you!', rgbError )
-			currentQuarryTable = nil
-		else
-			if showdownSettingUp == true or showdownCleaning == true then
-				if huntSetupPending != true then
-					huntSetupPending = true
-					startLuaCoroutine(Global, 'huntStandbyCoroutine')
-				end
-			else
-				huntSettingUp = true
-				if monsterResourcePlaced == true then
-					local zone = getObjectFromGUID(zones.zoneHunt.guid)
-					cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {}})
-					monsterResourcePlaced = false
-				end
-				startLuaCoroutine(Global,'setupHuntCoroutine')
-			end
-		end
-	elseif huntInProgress == true or huntSettingUp == true then
-			printToAll('A Hunt is already in progress!',rgbError)
-	elseif showdownInProgress == true or showdownSettingUp == true then
-			printToAll('A Showdown is already in progress!',rgbError)
-	end
-end
-
-function huntStandbyCoroutine()
-	while showdownSettingUp == true do
-		coroutine.yield(0)
-	end
-	while showdownCleaning == true do
-		coroutine.yield(0)
-	end
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	huntSetupPending = false
-	setupHunt()
-	return 1
-end
-
-
------------coroutine
-function setupHuntCoroutine()
-	local huntTable = currentQuarryTable
-	local monster = huntTable.monster
-	
-	printToAll(messages.msgSettingUpHunt1 .. monster .. messages.msgSettingUpHunt2, rgbNarrator)
-
-	--find components to spawn
-	local container = gameBox
-	local componentsToGet = {
-		deckMonsterHunt = {monster, 'Hunt Events Deck', 'matches'},
-		deckMonsterResources = {monster, 'Resources Deck', 'matches'},
-		deckMonsterSpecialHunt = {monster, 'Special Hunt Events Deck', 'matches'},
-	}
-	local result = {}
-	local result2 = {}
-	for k,v in pairs(componentsToGet) do
-		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
-		if result[k] != nil then
-			for j, h in pairs(result) do
-				result2[k] = h[1]
-			end
-		else
-			if k == 'deckMonsterSpecialHunt' or k == 'deckMonsterResources' then
-			else
-				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
-				cancelHuntSetup = true
-			end
-		end
-	end
-
-	--spawn components
-	if cancelHuntSetup == false then
-		local objects = {}
-		local objects = spawnFromBox(result2, nil)
-		local decks = {}
-		for k,v in pairs(objects) do
-
-			if v.tag == 'Deck' then
-				decks[k] = v
-			end
-		end
-		for k, v in pairs(decks) do
-			v.shuffle()
-		end
-		--wait for cards to settle
-		for i=1,30,1 do
-			coroutine.yield(0)
-		end
-		monsterResourcePlaced = true
-
-
-		--check essential decks
-		debuggingDecks = true
-		local essential = {'deckBasicHunt','deckSpecialHunt'}
-		local checkPass = debugEssentialDecks(essential)
-		while debuggingDecks == true do
-			coroutine.yield(1)
-		end
-		if checkPass != true then
-			cancelHuntSetup = true
-		end
-		
-		--[[disabled until fixed
-		--reset look decks
-		local lootDecks = {'deckBasicResources','deckStrangeResources','deckVermin'}
-		local lootDeck = {}
-		for k, v in pairs(lootDecks) do
-			lootDeck = respawnEssentialDeck(v)
-			coroutine.yield(0)
-		end
-		--]]
-
-		--set positions for hunt cards
-		getHuntPositions()
-
-		--set params
-		local params = {}
-		params.rotation = {}
-		params.position = {}
-
-		if cancelHuntSetup == false then
-			--determine cards to which location and deal cards to hunt board
-			local huntSpace = huntTable.huntCardPlacement
-			local basicHuntDeck = getObjectFromGUID(essentialDecks.deckBasicHunt.guid)
-			for i=1,#huntSpace do
-				params.position = huntPos[i]
-				params.rotation = huntRot[i]
-				if huntSpace[i] == 'E' then
-					decks.deckMonsterHunt.takeObject(params)
-				elseif huntSpace[i] == 'S' then
-					decks.deckMonsterSpecialHunt.takeObject(params)
-				elseif huntSpace[i] == '' then
-					basicHuntDeck.takeObject(params)
-				end
-				coroutine.yield(0)
-			end
-
-			--wait for cards to settle
-			for i=1,120,1 do
-				coroutine.yield(0)
-			end
-			placeHuntMonster()
-
-			setupHuntClose(monster)
-		else
-			printToAll('Hunt setup is cancelling due to critical error.',rgbError)
-			huntSettingUp = false
-			huntInProgress = true
-			cleanupHunt()
-			cancelHuntSetup = false
-		end
-	else
-		printToAll('Hunt setup is cancelling due to critical error.',rgbError)
-		huntSettingUp = false
-		huntInProgress = true
-		cleanupHunt()
-		cancelHuntSetup = false
-	end
-	return 1
-end
-
---set hunt pos by placeholders
-function getHuntPositions()
-	huntPos = {}
-	huntRot = {}
-	for i=1, 13 do
-		local var = 'cardHunt' .. tostring(i)
-		local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
-		local position = {pos[1], pos[2] + 1, pos[3]}
-		huntPos[i] = position
-		local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
-		huntRot[i] = rot
-	end
-end
-
-
---[[ INACTIVE, set position by board version
-function getHuntPositions()
-	--set positions for hunt cards
-	huntPos = {}
-	huntRot = {}
-	local offset = {}
-	local scale = boardHunt.getScale()
-	scale = offsetScaleHuntBoard / scale.x
-	offset = offsetXHuntCards
-	--translate offsets by any scale changes
-	local offsetScaled = {}
-	for i=1, #offset do
-		offsetScaled[i] = offset[i] * scale
-	end
-	local origin = {}
-	origin = boardHunt.getPosition()
-
-	--translate offsets with trig and set positions
-	for i=1, #offsetScaled do
-		local offsetTrig = {}
-		offsetTrig[i] = trig(boardHunt,offset[i])
-		huntPos[i] = {origin.x + offsetTrig[i][1], origin.y + offsetTrig[i][2] + 1, origin.z + offsetTrig[i][3]}
-	end
-	for i=1, 13 do
-		huntRot[i] = {boardHunt.getRotation().x, boardHunt.getRotation().y, boardHunt.getRotation().z + 180}
-end
---]]
-
----------------place monster by level
-function placeHuntMonster()
-	local monster = currentQuarryTable.monster
-	local placedMonster = ''
-	if monsterFigurinePlaced != nil or huntMonsterFigurine != nil then
-		placedMonster = monsterFigurinePlaced
-		if placedMonster != monster or huntMonsterFigurine == nil then
-			--clear other monster figurines
-			local zone = getObjectFromGUID(zones.zoneMain.guid)
-			cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
-			monsterFigurinePlaced = nil
-		end
-	end
-	--place monster
-	if monsterFigurinePlaced == nil then
-		local huntTable = currentQuarryTable
-		local level = currentHuntLevel
-		local location = huntTable.huntLocation
-		local space = location[level]
-		getHuntPositions()
-		local params = {}
-		params.position = huntPos[space]
-		params.rotation = {boardHunt.getRotation().x, boardHunt.getRotation().y + 180, boardHunt.getRotation().z}
-		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {monster}, exclude = {}})
-		if figurineGUID == nil then
-			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
-		else
-			local figureTable = spawnFromBox(figurineGUID, params)
-			huntMonsterFigurine = figureTable[1]
-			monsterFigurinePlaced = monster
-		end
-	end
-end
-
--------------------change hunt level
-function changeHuntLevel(level)
-	local unconvertedLevel = level[1]
-	local num = string.gsub(unconvertedLevel,'lvl','')
-	currentHuntLevel = tonumber(num)
-	--update monster position
-	getHuntPositions()
-	if huntMonsterFigurine != nil and huntPos != nil and huntInProgress == true then
-		local huntTable = currentQuarryTable
-		local space = huntTable.huntLocation[currentHuntLevel]
-		local pos = huntPos[space]
-		huntMonsterFigurine.setPositionSmooth({pos[1], pos[2] + 2, pos[3]})
-	end
-end
-
-
----------------------closing fcn for hunt setup
-function setupHuntClose(monster)
-	huntInProgress = true
-	huntSettingUp = false
-	printToAll(messages.msgHuntIsSetup1 .. monster .. messages.msgHuntIsSetup2,rgbNarrator)
-end
-
--------------------clean up hunt
-function cleanupHunt()
-	if huntSettingUp == false and huntInProgress == true and huntCleaning == false and huntCleanPending == false then
-		huntCleaning = true
-		startLuaCoroutine(Global,'cleanupHuntCoroutine')
-	elseif huntSettingUp == true and huntCleaning == false and huntCleanPending == false then
-		huntCleanPending = true
-		startLuaCoroutine(Global,'cleanupHuntCoroutineStandby')
-	end
-end
-
-function cleanupHuntCoroutineStandby()
-	while huntSettingUp == true do
-		coroutine.yield(0)
-	end
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	huntCleanPending = false
-	startLuaCoroutine(Global,'cleanupHuntCoroutine')
-	return 1
-end
-
-function cleanupHuntCoroutine()
-	--clear components
-	local zone = getObjectFromGUID(zones.zoneHunt.guid)
-	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'hunt'}, exclude = {'resource'}})
-
-	--reset essential decks
-	--reset basic hunt deck
-	local deck = 'deckBasicHunt'
-	resetEssentialDeck(deck)
-	deck = 'deckSpecialHunt'
-	resetEssentialDeck(deck)
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	local decks = {'deckBasicHunt', 'deckSpecialHunt'}
-	debugEssentialDecks(decks)
-
-	--wait for cards to settle
-	for i=1,30 do
-		coroutine.yield(0)
-	end
-	huntInProgress = false
-	huntSettingUp = false
-	printToAll(huntCleared,rgbNarrator)
-	huntCleaning = false
-	return 1
-end
-
-
-----------------------
---AutoShowdown
-----------------------
-
---------launcher
-function setupShowdown(monsterTable)
-	if showdownInProgress == false and showdownSettingUp == false and showdownCleaning == false and autoShowdown == true then
-		if monsterTable != nil then
-			currentShowdownTable = monsterTable
-		end
-		if huntSettingUp == true or huntCleaning == true then
-			if showdownSetupPending != true then
-				showdownSetupPending = true
-				startLuaCoroutine(Global, 'showdownStandbyCoroutine')
-			end
-		else
-			showdownSettingUp = true
-			if monsterResourcePlaced == true then
-				if currentQuarryTable.monster != nil then
-					if currentShowdownTable.monster != currentQuarryTable.monster then
-						local zone = getObjectFromGUID(zones.zoneMain.guid)
-						local criteriaParam = currentQuarryTable.monster .. ' Resources Deck'
-						cleanup('name', zone, {conditional = 'matches', criteria = {criteriaParam}, exclude = {}})
-						monsterResourcePlaced = false
-					end
-				end
-			end
-			startLuaCoroutine(Global,'setupShowdownCoroutine')
-		end
-	elseif showdownInProgress == true or showdownSettingUp == true then
-		printToAll('The survivors are already in a fight!',rgbError)
-	end
-end
-
-function showdownStandbyCoroutine()
-	while huntSettingUp == true do
-		coroutine.yield(0)
-	end
-	while huntCleanPending == true do
-		coroutine.yield(0)
-	end
-	while huntCleaning == true do
-		coroutine.yield(0)
-	end
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	showdownSetupPending = false
-	setupShowdown()
-	return 1
-end
-
------------coroutine
-function setupShowdownCoroutine()
-	local showdownTable = currentShowdownTable
-	local monster = showdownTable.monster
-
-	printToAll(messages.msgSettingUpShowdown1 .. monster .. messages.msgSettingUpShowdown2, rgbNarrator)
-
-	--find components to spawn
-	local container = gameBox
-	local componentsToGet = {
-		cardMonsterBasicAction = {monster, 'Basic Action Card', 'matches'},
-		deckMonsterHitLocations = {monster, 'Hit Locations Deck', 'matches'},
-		deckMonsterAIBasic = {monster, 'Basic AI Deck', 'matches'},
-		deckMonsterAIAdvanced = {monster, 'Advanced AI Deck', 'matches'},
-		deckMonsterAILegendary = {monster, 'Legendary AI Deck', 'matches'},
-		deckMonsterAISpecial = {monster, 'Special AI Deck', 'matches'},
-	}
-	local huntMonster = ''
-	if currentQuarryTable != nil then
-		huntMonster = currentQuarryTable.monster
-	end
-	if monsterResourcePlaced == false then
-		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
-	elseif monster != huntMonster then
-		--clear old monster Resources
-		local zone = getObjectFromGUID(zones.zoneMain.guid)
-		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {'drawn'}})
-		coroutine.yield(0)
-		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
-	end
-	local result = {}
-	local result2 = {}
-	for k,v in pairs(componentsToGet) do
-		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
-		if result[k] != nil then
-			for j, h in pairs(result) do
-				result2[k] = h[1]
-			end
-		else
-			if k == 'deckMonsterAIAdvanced' or k == 'deckMonsterAISpecial' or k == 'deckMonsterAILegendary' or k == 'deckMonsterAISpecial' or k == 'deckMonsterResources' then
-			else
-				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
-				cancelShowdownSetup = true
-			end
-		end
-	end
-
-	--spawn components
-	if cancelShowdownSetup == false then
-		local objects = {}
-		local objects = spawnFromBox(result2, nil)
-		local decks = {}
-		for k,v in pairs(objects) do
-			if v.tag == 'Deck' then
-				decks[k] = v
-			end
-			if string.find(string.lower(v.getDescription()), string.lower('resource')) then
-				monsterResourcePlaced = true
-			end
-		end
-		for i=1,30 do
-			coroutine.yield(0)
-		end
-		for k, v in pairs(decks) do
-			v.shuffle()
-		end
-
-		--spawn monster
-		placeShowdownMonster()
-
-		coroutine.yield(0)
-
-		--spawn terrain
-		generateShowdownTerrain()
-
-		--wait for cards to settle
-		for i=1,120,1 do
-			coroutine.yield(0)
-		end
-
-		setupShowdownClose(monster)
-	else
-		printToAll('Showdown setup is cancelling due to critical error.',rgbError)
-		showdownSettingUp = false
-		showdownInProgress = true
-		cleanupShowdown()
-	end
-	return 1
-end
-
-function placeShowdownMonster()
-	local huntMonster = ''
-	if currentQuarryTable != nil then
-		huntMonster = currentQuarryTable.monster
-	end
-	local showdownMonster = currentShowdownTable.monster
-	local params = {}
-	params.position = {-9.5,2,0}
-	params.rotation = {0,180,0}
-	if  showdownMonster == huntMonster and huntMonsterFigurine != nil then
-		--move hunt figurine to showdown
-		huntMonsterFigurine.setPositionSmooth(params.position)
-		huntMonsterFigurine.setRotationSmooth(params.rotation)
-	else
-		--clear other monster figurines
-		local zone = getObjectFromGUID(zones.zoneMain.guid)
-		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
-		monsterFigurinePlaced = nil
-		--spawn new figurine
-		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {showdownMonster}, exclude = {}})
-		if figurineGUID == nil then
-			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
-		else
-			local figureTable = spawnFromBox(figurineGUID, params)
-			showdownMonsterFigurine = figureTable[1]
-			monsterFigurinePlaced = showdownMonster
-		end
-	end
-end
-
-function generateShowdownTerrain()
-	local cancelTerrainSetup = false
-	--get card counts by type
-	local inputTable = currentShowdownTable.showdownTerrain.specifiedCards
-	local specifiedCards = {}
-	if inputTable != nil then
-		for k,v in pairs (inputTable) do
-			local prefix = string.sub(v,1,2)
-			local cardName = string.gsub(v,prefix,'')
-			local string = string.gsub(prefix, ' ', '')
-			local integer = tonumber(string)
-			specifiedCards[cardName] = integer
-		end
-		--check terrain deck
-		local decks = {'deckTerrain'}
-		debugEssentialDecks(decks)
-		--get cards to take
-		local cardsToTake = {}
-		local tilesToGet = {}
-		local num = 1
-		local deck = getObjectFromGUID(essentialDecks.deckTerrain.guid)
-		for k, v in pairs (specifiedCards) do
-			local count = 1
-			local maxCount = v
-			local result = {}
-			local keyLabel = ''
-			result[k] = getObj('name', deck, {conditional = 'matches', criteria = {k},exclude = {}})
-			if result[k] != nil then
-				local result2 = {}
-				for i=1, #result[k] do
-					if count <=maxCount then
-						result2[i] = result[k][i]
-						local var = 'cardTerrain' .. tostring(num)
-						num = num + 1
-						count = count + 1
-						cardsToTake[var] = result2[i]
-						tilesToGet[var] = k
-					end
-				end
-			else
-				printToAll(k .. ' is missing from the Terrain Deck. Manually setup Terrain.', rgbError)
-				cancelTerrainSetup = true
-			end
-		end
-
-		if cancelTerrainSetup == false then
-			--take cards
-			local cardsTaken = {}
-			local params = {}
-			for k, v in pairs (cardsToTake) do
-				local rot = getObjectFromGUID(placeholders.cardTerrain1.guid).getRotation()
-				params.rotation = {rot[1], rot[2], 0}
-				local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
-				params.position = {pos[1], pos[2] + 2, pos[3]}
-				params.guid = v
-				cardsTaken[k] = deck.takeObject(params)
-
-				for i = 1, 30 do
-					coroutine.yield(0)
-				end
-			end
-
-			deck.shuffle()
-
-			for i=1,30 do
-				coroutine.yield(0)
-			end
-
-			--spawn random cards
-			local randomCount = currentShowdownTable.showdownTerrain.randomCards
-			params = {}
-			for i=1, randomCount do
-				local var = 'cardTerrain' .. tostring(num)
-				num = num + 1
-				local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
-				params.rotation = {rot[1], rot[2], 0}
-				local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
-				params.position = {pos[1], pos[2] + 2, pos[3]}
-				cardsTaken[var] = deck.takeObject(params)
-			end
-
-				--[[ inactive
-			--get tiles
-			local tilesToTake = {}
-			for k,v in pairs (tilesToGet) do
-				local result = {}
-				result = getObj('name', getObjectFromGUID(staticObjs.gameBox.guid), {conditional = 'matches', criteria = {v}, exclude = {}})
-				if result[1] != nil then
-
-					tilesToTake[k] = result[1]
-
-				--]]
-
-		end
-	end
-end
-
----------------------closing fcn for showdown setup
-function setupShowdownClose(monster)
-	showdownInProgress = true
-	showdownSettingUp = false
-	printToAll(messages.msgShowdownIsSetup,rgbNarrator)
-end
-
----------------------level change for showdown monster
-function changeShowdownLevel(level)
-	local unconvertedLevel = level[1]
-	--update monster stats
-	if showdownInProgress == true then
-		local showdownTable = currentShowdownTable
-		local stats = {}
-		local stats = showdownTable.showdownStats[unconvertedLevel]
-		if stats != nil then
-			local board = getObjectFromGUID(boards.boardMonster.guid)
-			board.setTable('transferStats', stats)
-			board.call('transfer', nil)
-		end
-	end
-end
-
--------------------clean up showdown
-function cleanupShowdown()
-	if showdownSettingUp == false and showdownInProgress == true and showdownCleanPending == false and showdownCleaning == false then
-		showdownCleaning = true
-		startLuaCoroutine(Global,'cleanupShowdownCoroutine')
-	elseif showdownSettingUp == true and showdownCleaning == false and showdownCleanPending == false then
-		showdownCleanPending = true
-		startLuaCoroutine(Global,'cleanupShowdownCoroutineStandby')
-	end
-end
-
-function cleanupShowdownCoroutineStandby()
-	while showdownSettingUp == true do
-		coroutine.yield(0)
-	end
-	showdownCleanPending = false
-	startLuaCoroutine(Global,'cleanupShowdownCoroutine')
-	return 1
-end
-
-function cleanupShowdownCoroutine()
-	--clear components
-	local zone = getObjectFromGUID(zones.zoneMain.guid)
-	cleanup('tag', zone, {conditional = 'and', criteria = {'terrain tile'}, exclude = {}})
-	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown'}, exclude = {'drawn'}})
-	--reset terrain deck
-	local deck = 'deckTerrain'
-	resetEssentialDeck(deck)
-	for i=1, 30 do
-		coroutine.yield(0)
-	end
-	local decks = {deck}
-	debugEssentialDecks(decks)
-
-	local board = getObjectFromGUID(boards.boardMonster.guid)
-	board.call('clear', nil)
-
-	for i=1, 60 do
-		coroutine.yield(0)
-	end
-
-	monsterFigurinePlaced = nil
-	monsterResourcePlaced = false
-	showdownInProgress = false
-	showdownSettingUp = false
-	currentQuarryTable = {'null'}
-	currentShowdownTable = {'null'}
-	printToAll(messages.msgShowdownCleared,rgbNarrator)
-	showdownCleaning = false
-	return 1
-end
\ No newline at end of file
diff --git a/Lua/Level Marker.302128.lua b/Lua/Level Marker.302128.lua
deleted file mode 100644
index fda439b..0000000
--- a/Lua/Level Marker.302128.lua	
+++ /dev/null
@@ -1,46 +0,0 @@
---KDM Level Marker for Hunt
-
--------------------------
---variables
----------------------------
-
-level1guid = '8c918d'
-level2guid = '844c0e'
-level3guid = '5ffbab'
------------------------
---init
-------------------------
-function onLoad()
-	initialized = true
-end
-
-
-------------------------
---Triggers
-------------------------
-function onCollisionEnter(info)
-	if info.collision_object != nil and initialized == true then
-		local obj = info.collision_object
-		local guid = obj.getGUID()
-		local level = ''
-		if guid == level1guid then
-			level = 'lvl1'
-			changeHuntLevel(level)
-		elseif guid == level2guid then
-			level = 'lvl2'
-			changeHuntLevel(level)
-		elseif guid == level3guid then
-			level = 'lvl3'
-			changeHuntLevel(level)
-		end
-	end
-end
-
-
--------------------------
---Global Calls
-------------------------
-
-function changeHuntLevel(level)
-	Global.call('changeHuntLevel', {level})
-end
\ No newline at end of file
diff --git a/Lua/Level Marker.df1a46.lua b/Lua/Level Marker.df1a46.lua
deleted file mode 100644
index c3eded3..0000000
--- a/Lua/Level Marker.df1a46.lua	
+++ /dev/null
@@ -1,46 +0,0 @@
---KDM Level Marker for Showdown
-
--------------------------
---variables
----------------------------
-
-level1guid = 'd55917'
-level2guid = 'c0087a'
-level3guid = '6d5b9b'
------------------------
---init
-------------------------
-function onLoad()
-	initialized = true
-end
-
-
-------------------------
---Triggers
-------------------------
-function onCollisionEnter(info)
-	if info.collision_object != nil and initialized == true then
-		local obj = info.collision_object
-		local guid = obj.getGUID()
-		local level = ''
-		if guid == level1guid then
-			level = 'lvl1'
-			changeShowdownLevel(level)
-		elseif guid == level2guid then
-			level = 'lvl2'
-			changeShowdownLevel(level)
-		elseif guid == level3guid then
-			level = 'lvl3'
-			changeShowdownLevel(level)
-		end
-	end
-end
-
-
--------------------------
---Global Calls
-------------------------
-
-function changeShowdownLevel(level)
-	Global.call('changeShowdownLevel', {level})
-end
\ No newline at end of file
diff --git a/Lua/Monster Board.24f67c.lua b/Lua/Monster Board.24f67c.lua
deleted file mode 100644
index 896613d..0000000
--- a/Lua/Monster Board.24f67c.lua	
+++ /dev/null
@@ -1,369 +0,0 @@
--- KDM Survivor Sheet lazily adapted by Eskander (FULL SIZE VERSION)
--- Script adapted from soulburner's DnD sheets
--- which seems to have been adapted from Universal Counter Tokens by Mr. Stump
--- this script is a chimaera, you can likely easily clean it up
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-    local data_to_save = {}
-        data_to_save.saved_counts = {}
-        for i,v in pairs(buttons.counts) do
-            data_to_save.saved_counts[tostring(i)] = v or 0
-        end
-
-    saved_data = JSON.encode(data_to_save)
-	data_for_transfer = data_to_save
-
-    --Uncomment this line to reset the save data, necessary when messing with variable names
-    --saved_data = ''
-    return saved_data
-end
-
-transferStats = {}
-
--------------
---transfer from level
--------------
-function transfer()
-	if transferStats != nil then
-		for k,v in pairs(transferStats) do
-			buttons.counts[k] = v
-		end
-	end
-	updateDisplay(false)
-end
-
-function clear()
-	if transferStats != nil then
-		for k,v in pairs(transferStats) do
-			buttons.counts[k] = 0
-		end
-	end
-	updateDisplay(false)
-end
---------------------
-
---Loads the saved data then creates the buttons
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-
-    ------------------------------
-    --Edit below this line
-    ------------------------------
-	thick = 0.14
-
-	--stats
-	dx = -0.74; dy =-2.4; py = 0.8
-	createCounter('lck', 'big', dx, dy); dy = dy + py;
-	createCounter('mov', 'big', dx, dy); dy = dy + py;
-	createCounter('acc', 'big', dx, dy); dy = dy + py;
-	createCounter('evs', 'big', dx, dy); dy = dy + py;
-	createCounter('spd', 'big', dx, dy); dy = dy + py;
-	createCounter('dmg', 'big', dx, dy); dy = dy + py;
-	createCounter('tgh', 'big', dx, dy); dy = dy + py;
-	
-	
-	
-	
-	
-
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-
-
-    ------------------------------
-    --Don't touch below this line
-    ------------------------------
-
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --Checks if there is a saved data. If there is, it gets the saved value for 'buttons.counts.ct'
-
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
-
-
-------------------------------
---customize sizes
-------------------------------
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-
-
-    --make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 25, height = 25, font = 50},
-        button = {width = 25, height = 25, font = 50},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 200},
-        button = {width = 50, height = 50, font = 50},
-        offsets = { bottomButtons = {x = 0.075, y = 0, z = -0.34}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-
-    buttons.params.sizes.toggle = {
-        display = {width = 25, height = 25, font = 50},
-        button = {width = 25, height = 25, font = 50},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 50},
-        button = {width = 50, height = 50, font = 50},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = { type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-
-end
-
-----------------------
---actions on button click
------------------------
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location)
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        --params.type = 'PlayerPawn'
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-		--final_pos = {pos.x + 2, pos.y, pos.z+2}
-
-        o = spawnObject({
-            type = 'backgammon_piece_brown',
-            --position = {mpos[1] + pos.x, mpos[2] + pos.y+2, mpos[3] - pos.z},
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            --position = button.position,
-            scale = {1, 1, 1}
-        })
-        --o.position = button.position
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
-
-
---This is activated when onload runs. This sets all parameters for our buttons.
---I do not have to put this all into a function, but I prefer to do it this way.
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-			--if label == '+' then
-				--isLeft = true
-			--elseif label == '-' then
-				--isLeft = false
-			--end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-    --updateDisplay()
-
-end
-
-
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            if (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
\ No newline at end of file
diff --git a/Lua/Nemesis Monsters.0f3f64.lua b/Lua/Nemesis Monsters.0f3f64.lua
deleted file mode 100644
index e041ac2..0000000
--- a/Lua/Nemesis Monsters.0f3f64.lua	
+++ /dev/null
@@ -1,29 +0,0 @@
-function onload()
-  b_display = { index = 0,
-                      click_function = 'updateDisplay',
-                      label = self.getName(),
-                      function_owner = self,
-                      position = {0, 0.09, 0},
-                      rotation = {0, 0, 0},
-                      width = 6000,
-                      height = 500,
-                      font_size = 300}
-
-  local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-  end
-
-  self.createButton(b_display)
-end
-
-function updateDisplay()
-    b_display.label = self.getName()
-
-    local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-    end
-
-    self.editButton(b_display)
-end
\ No newline at end of file
diff --git a/Lua/P1.1a3b6e.lua b/Lua/P1.1a3b6e.lua
deleted file mode 100644
index 3f5a075..0000000
--- a/Lua/P1.1a3b6e.lua
+++ /dev/null
@@ -1,398 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-    dx = 6.35; dy = -8.7; px =2.36
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
-	createCounter('armor_legs', 'big', dx, dy)
-
-	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px;
-	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_body_h', dx, dy); dx = dx + px;
-	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
-	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_arms_h', dx, dy); dx = dx + px;
-	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_legs_h', dx, dy)
-
-    dx = 18; dy = -5.25;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
---make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 800, height = 250, font = 130},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 1000},
-        button = {width = 280, height = 280, font = 350},
-        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 280, height = 280, font = 290},
-        button = {width = 300, height = 300, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
\ No newline at end of file
diff --git a/Lua/P2.b5d9e8.lua b/Lua/P2.b5d9e8.lua
deleted file mode 100644
index 3f5a075..0000000
--- a/Lua/P2.b5d9e8.lua
+++ /dev/null
@@ -1,398 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-    dx = 6.35; dy = -8.7; px =2.36
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
-	createCounter('armor_legs', 'big', dx, dy)
-
-	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px;
-	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_body_h', dx, dy); dx = dx + px;
-	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
-	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_arms_h', dx, dy); dx = dx + px;
-	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_legs_h', dx, dy)
-
-    dx = 18; dy = -5.25;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
---make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 800, height = 250, font = 130},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 1000},
-        button = {width = 280, height = 280, font = 350},
-        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 280, height = 280, font = 290},
-        button = {width = 300, height = 300, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
\ No newline at end of file
diff --git a/Lua/P3.c4017e.lua b/Lua/P3.c4017e.lua
deleted file mode 100644
index 3f5a075..0000000
--- a/Lua/P3.c4017e.lua
+++ /dev/null
@@ -1,398 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-    dx = 6.35; dy = -8.7; px =2.36
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
-	createCounter('armor_legs', 'big', dx, dy)
-
-	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px;
-	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_body_h', dx, dy); dx = dx + px;
-	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
-	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_arms_h', dx, dy); dx = dx + px;
-	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_legs_h', dx, dy)
-
-    dx = 18; dy = -5.25;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
---make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 800, height = 250, font = 130},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 1000},
-        button = {width = 280, height = 280, font = 350},
-        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 280, height = 280, font = 290},
-        button = {width = 300, height = 300, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
\ No newline at end of file
diff --git a/Lua/P4.3aadbe.lua b/Lua/P4.3aadbe.lua
deleted file mode 100644
index 3f5a075..0000000
--- a/Lua/P4.3aadbe.lua
+++ /dev/null
@@ -1,398 +0,0 @@
---KDM Gear Sheet (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-
-function initCustomButtons()
-	thick = 0.14
-
-	--armor and hit locations
-    dx = 6.35; dy = -8.7; px =2.36
-	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
-	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
-	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
-	createCounter('armor_legs', 'big', dx, dy)
-
-	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
-	createToggle('injury_head', dx, dy); dx = dx + px;
-	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_body_h', dx, dy); dx = dx + px;
-	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
-	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
-	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_arms_h', dx, dy); dx = dx + px;
-	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
-	createToggle('injury_legs_h', dx, dy)
-
-    dx = 18; dy = -5.25;
-    createResetArmor('resetArmor', dx, dy)
-	
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
---make a style of button by adding a new size
-    buttons.params.sizes.std = {
-        display = {width = 800, height = 250, font = 130},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 1000},
-        button = {width = 280, height = 280, font = 350},
-        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 280, height = 280, font = 290},
-        button = {width = 300, height = 300, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 150},
-        button = {width = 300, height = 200, font = 100},
-        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------curnil's standalone token script
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-FullCharSheet = ''
-tokens = {}
--------------
-
-
---Loads
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
-        end
-    end
-
-    generateButtonParameters()
-
-    --loads saved data
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-
-    updateDisplay(true)
-end
-
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createResetArmor(name, px, py)
-    name = "r_" .. name
-    buttons[name] = { type = 'std'}
-    buttons.params.positions[name] = {x = px, y= thick, z = py}
-end
-
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-			if (prefix == "r_") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isReset = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-	buttonInfo.function_owner = self
-	buttonInfo.index = buttons.index
-	buttonInfo.click_function = targetFunc
-	if offsets != nil then
-		reverse_x = offsets.x
-	end
-	--reversed
-	if isLeft then
-		orientationModifier = -1
-	else
-		orientationModifier = 1
-	end
-
-	if offsets == nil then
-		buttonInfo.position = {positions.x, positions.y, positions.z}
-	else
-		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-	end
-	buttonInfo.width = sizes.width
-	buttonInfo.height = sizes.height
-	buttonInfo.font_size = sizes.font
-	buttonInfo.label = label
-	buttons.index = buttons.index + 1
-	return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isReset == true) then
-				buttons[tostring(i)].display.label = 'Reset Armor'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                --if (buttons.toggles[tostring(i)].isClicked == false) then
-                    buttons[tostring(i)].display.label = "X"
-					--buttons.toggles[tostring(i)].isClicked = true
-                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
-                else
-                    buttons[tostring(i)].display.label = ""
-					--buttons.toggles[tostring(i)].isClicked = false
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-
-end
-
---------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function dud()
-end
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-	else
-		buttons.counts[location] = 1
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
---reset armor
-function resetArmor()
-    --Resets counts on each display to 0
-    --Resets Armor and Injuries
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'r_resetArmor' then
-            buttons.counts[tostring(i)] = 0
-        end
-    end
-    --This section will add armor counts for each area
-    --[[
-
-    ]]
-    updateDisplay(false)
-end
-
-
-
-----------------------------
---curnil's token scripts standlone
-----------------------------
-function onCollisionEnter(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isKDMFULL") then
-        if FullCharSheet == '' then
-            FullCharSheet = obj
-        end
-    end
-
-    -- special rules for bonus tiles
-    if obj.getVar("isKdmEffectsObject") then
-        tokens[obj.getGUID()] = obj.call("getEffects", nil)
-        if FullCharSheet ~= '' then
-			FullCharSheet.call('loadTokens', tokens)
-        end
-    end
-end
-
--- This function detaches the tile and saves data to it
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-        if obj.getVar("isKDMFULL") then
-            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
-                FullCharSheet = ''
-            end
-        end
-
-        if obj.getVar("isKdmEffectsObject") then
-            -- remove the token from the tokens collection
-            tokens[obj.getGUID()] = nil
-            if FullCharSheet ~= '' then
-                FullCharSheet.call('loadTokens', tokens)
-            end
-        end
-end
-
---[[
-function onObjectDestroyed(dying_object)
-    guid = dying_object.getGUID()
-    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
-        onCollisionExit({collision_object = dying_object})
-    end
-
-    if guid and (tokens and tokens[guid]) then
-        onCollisionExit({collision_object = dying_object})
-    end
-end
---]]
\ No newline at end of file
diff --git a/Lua/Quarries.9abd27.lua b/Lua/Quarries.9abd27.lua
deleted file mode 100644
index e041ac2..0000000
--- a/Lua/Quarries.9abd27.lua
+++ /dev/null
@@ -1,29 +0,0 @@
-function onload()
-  b_display = { index = 0,
-                      click_function = 'updateDisplay',
-                      label = self.getName(),
-                      function_owner = self,
-                      position = {0, 0.09, 0},
-                      rotation = {0, 0, 0},
-                      width = 6000,
-                      height = 500,
-                      font_size = 300}
-
-  local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-  end
-
-  self.createButton(b_display)
-end
-
-function updateDisplay()
-    b_display.label = self.getName()
-
-    local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-    end
-
-    self.editButton(b_display)
-end
\ No newline at end of file
diff --git a/Lua/Speed Token.943c9d.lua b/Lua/Speed Token.943c9d.lua
deleted file mode 100644
index c2936ac..0000000
--- a/Lua/Speed Token.943c9d.lua	
+++ /dev/null
@@ -1,14 +0,0 @@
-isKdmEffectsObject = true
-effects = {
-    speed = 1
-}
-
-function getEffects()
-    rot = self.getRotation()
-    if rot[3] > 345 or rot[3] < 15 then
-        effects.speed = -1
-    else
-        effects.speed = 1
-    end
-    return effects
-end
\ No newline at end of file
diff --git a/Lua/Story Board Left.40ac46.lua b/Lua/Story Board Left.40ac46.lua
deleted file mode 100644
index cdc5709..0000000
--- a/Lua/Story Board Left.40ac46.lua	
+++ /dev/null
@@ -1,496 +0,0 @@
---KDM Storybook
-
----------------------------------
---Vars
---------------------------------
-manualsIndex = {
-	tab1 = {
-		tabName = 'Rules', 
-		pages = {
-			{pageName = 'Introduction', stateNum = 2},
-			{pageName = 'Prologue', stateNum = 5},
-			{pageName = 'First Story', stateNum = 23},
-			{pageName = 'Survival Guide', stateNum = 36},
-			{pageName = 'Survivors', stateNum = 40},
-			{pageName = 'Monsters', stateNum = 48},
-			{pageName = 'Resources', stateNum = 56},
-			{pageName = 'Terrain', stateNum = 59},
-			{pageName = 'Hunt Phase', stateNum = 61},
-			{pageName = 'Showdown Phase', stateNum = 65},
-			{pageName = 'Settlement Phase', stateNum = 79},
-			{pageName = 'Game Variants', stateNum = 85},
-			{pageName = 'Glossary', stateNum = 87},
-		}
-	},
-	tab2 = {
-		tabName = 'Timeline Events', 
-		pages = {
-			{pageName = 'Returning Survivors', stateNum = 2},
-			{pageName = 'Endless Screams', stateNum = 4},
-			{pageName = 'Bone Witch', stateNum = 6},
-			{pageName = 'Hands of Heat', stateNum = 8},
-			{pageName = 'Armored Strangers', stateNum = 10},
-			{pageName = 'Phoenix Feather', stateNum = 12},
-			{pageName = 'Regal Visit', stateNum = 14},
-			{pageName = 'Principle: Conviction', stateNum = 16},
-			{pageName = 'Watched', stateNum = 18},
-		}
-	},
-	tab3 = {
-		tabName = 'Hunt Events', 
-		pages = {
-			{pageName = 'Random Events 1-8', stateNum = 2},
-			{pageName = 'Random Events 9-15', stateNum = 3},
-			{pageName = 'Random Events 16-25', stateNum = 4},
-			{pageName = 'Random Events 26-31', stateNum = 5},
-			{pageName = 'Random Events 32-44', stateNum = 6},
-			{pageName = 'Random Events 45-53', stateNum = 7},
-			{pageName = 'Random Events 54-63', stateNum = 8},
-			{pageName = 'Random Events 64-71', stateNum = 9},
-			{pageName = 'Random Events 72-80', stateNum = 10},
-			{pageName = 'Random Events 81-87', stateNum = 11},
-			{pageName = 'Random Events 88-96', stateNum = 12},
-			{pageName = 'Random Events 97-100', stateNum = 13},
-			{pageName = 'Overwhelming Darkness', stateNum = 14},
-			{pageName = 'Herb Gathering', stateNum = 16},
-			{pageName = 'Mineral Gathering', stateNum = 18},
-			{pageName = 'Run Away', stateNum = 20},
-		}
-	},
-	tab4 = {
-		tabName = 'Showdown Setups', 
-		pages = {
-			{pageName = 'White Lion', stateNum = 2},
-			{pageName = 'Screaming Antelope', stateNum = 4},
-			{pageName = 'Phoenix', stateNum = 6},
-			{pageName = 'Nemesis: Butcher', stateNum = 8},
-			{pageName = "Nemesis: King's Man", stateNum = 10},
-			{pageName = 'Nemesis: The Hand', stateNum = 12},
-			{pageName = 'Nemesis: Watcher', stateNum = 14},
-			{pageName = 'Legendary Monsters', stateNum = 16},
-		}
-	},
-	tab5 = {
-		tabName = 'Settlement Events', 
-		pages = {
-			{pageName = 'Intimacy', stateNum = 2},
-			{pageName = 'Birth of a Savior', stateNum = 4},
-			{pageName = 'Cooking', stateNum = 6},
-			{pageName = 'White Speaker', stateNum = 8},
-		}
-	},
-	tab6 = {
-		tabName = 'Milestone Events', 
-		pages = {
-			{pageName = 'Age', stateNum = 2},
-			{pageName = 'Bold', stateNum = 4},
-			{pageName = 'Insight', stateNum = 6},
-			{pageName = 'See the Truth', stateNum = 8},
-			{pageName = 'White Secret', stateNum = 10},
-			{pageName = 'Principle: New Life', stateNum = 12},
-			{pageName = 'Principle: Death', stateNum = 14},
-			{pageName = 'Principle: Society', stateNum = 16},
-			{pageName = 'Hooded Knight', stateNum = 18},
-			{pageName = 'Game Over', stateNum = 20},
-		}
-	},
-	tab7 = {
-		tabName = 'Severe Injuries', 
-		pages = {
-			{pageName = 'Brain Trauma', stateNum = 2},
-			{pageName = 'Head, Arms', stateNum = 3},
-			{pageName = 'Body, Waist, Legs', stateNum = 4},
-		}
-	},
-	tab8 = {
-		tabName = 'Monster Events', 
-		pages = {
-			{pageName = 'Zero Presence', stateNum = 2},
-			{pageName = 'Crush and Devour', stateNum = 4},
-			{pageName = 'Legendary Lungs', stateNum = 6},
-			{pageName = "King's Step", stateNum = 8},
-			{pageName = "King's Curse", stateNum = 10},
-			{pageName = 'Run Away', stateNum = 12},
-			{pageName = 'Blackout', stateNum = 14},
-		}
-	},
-}
-gameBoxGUID = ''
-zoneSelfGUID = ''
-
-activeBook = {}
-changingBook = false
-currentPage = 1
-
-cloneSpawnPos = {0,0,-80}
-
----------------------------------
---Init
---------------------------------
-
-
-function onLoad()
-
-	local table = Global.getTable('staticObjs')
-	gameBoxGUID = table.gameBox.guid
-	table = Global.getTable('zones')
-	zoneSelfGUID = table.zoneStoryL.guid
-	
-	initTabButtons()
-	initBrowseButtons()
-
-end
-
-function initTabButtons()
-	local index = manualsIndex
-	local col = 4
-	local row = 2
-	local dx = ( 24 / col / 2 ) - 12
-	local dy = 8.5
-	local w = (12000 / col) - (col * 25)
-	local px = 24/ col
-	local py = -1.25
-	local i = 1
-	local h = 600
-	local f = 350
-	for k,v in pairs(index) do
-		local func = k
-		local label = v.tabName
-		self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		if i < col or i > col then
-			dx = dx + px
-		elseif i == col then
-			dx = dx - (px*(col-1))
-			dy = dy + py
-		else
-			dx = dx
-		end
-		i = i+1
-	end
-end
-
-function initBrowseButtons()
-	self.createButton({
-		click_function = 'nextPage',
-		function_owner = self,
-		label = '>',
-		position = {-8.5,0.14,-1.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-	self.createButton({
-		click_function = 'previousPage',
-		function_owner = self,
-		label = '<',
-		position = {-8.5,0.14,-4.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-end
-
-
----------------------------------
---Events
---------------------------------
-
-function onDropped()
-	local zone = getObjectFromGUID(zoneSelfGUID)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
-
----------------------------------
---Button fnc
---------------------------------
-
-function nextPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			local obj = v.setState(currentPage + 1)
-			if obj != nil then
-				currentPage = currentPage + 1
-			end
-		end
-	end
-end
-
-function previousPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if currentPage != 1 then
-				local obj = v.setState(currentPage - 1)
-				if obj != nil then
-					currentPage = currentPage - 1
-				end
-			end
-		end
-	end
-end
-
-function tab1()
-	local tab = 'tab1'
-	tabClick(tab)
-end
-
-function tab2()
-	local tab = 'tab2'
-	tabClick(tab)
-end
-
-function tab3()
-	local tab = 'tab3'
-	tabClick(tab)
-end
-
-function tab4()
-	local tab = 'tab4'
-	tabClick(tab)
-end
-
-function tab5()
-	local tab = 'tab5'
-	tabClick(tab)
-end
-
-function tab6()
-	local tab = 'tab6'
-	tabClick(tab)
-end
-
-function tab7()
-	local tab = 'tab7'
-	tabClick(tab)
-end	
-
-function tab8()
-	local tab = 'tab8'
-	tabClick(tab)
-end
-
----------pages
-
-function page1()
-	local page = 1
-	pageClick(page)
-end
-
-function page2()
-	local page = 2
-	pageClick(page)
-end
-
-function page3()
-	local page = 3
-	pageClick(page)
-end
-
-function page4()
-	local page = 4
-	pageClick(page)
-end
-
-function page5()
-	local page = 5
-	pageClick(page)
-end
-
-function page6()
-	local page = 6
-	pageClick(page)
-end
-
-function page7()
-	local page = 7
-	pageClick(page)
-end	
-
-function page8()
-	local page = 8
-	pageClick(page)
-end
-
-function page9()
-	local page = 9
-	pageClick(page)
-end
-
-function page10()
-	local page = 10
-	pageClick(page)
-end
-
-function page11()
-	local page = 11
-	pageClick(page)
-end
-
-function page12()
-	local page = 12
-	pageClick(page)
-end
-
-function page13()
-	local page = 13
-	pageClick(page)
-end
-
-function page14()
-	local page = 14
-	pageClick(page)
-end
-
-function page15()
-	local page = 15
-	pageClick(page)
-end
-
-function page16()
-	local page = 16
-	pageClick(page)
-end	
-
-----------------------------------------
---primary fcns
----------------------------------------
-
-function tabClick(tab)
-	--clear books
-	changeBook(tab)
-	--clear last tab pages
-	local btns = self.getButtons()
-	for k,v in pairs(btns) do
-		local text = v.click_function
-		if string.find(text, 'page') then
-			local index = v.index
-			self.removeButton(index)
-		end
-	end
-	--create page list
-	local pagesTable = manualsIndex[tab].pages
-	local col = 1
-	local row = #pagesTable
-	local dx = 9
-	local dy = 5.75
-	local w = 2900
-	local px = 24/ col
-	local py = -0.95
-	local i = 1
-	local h = 400
-	local f = 300
-	local btn = {}
-	pageBtns = {}
-	for k,v in pairs(pagesTable) do
-		local func = 'page' .. i
-		local label = v.pageName
-		local btn = self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		dy = dy + py
-		i = i+1
-	end
-end
-
-function changeBook(tab)
-	if changingBook != true then
-		changingBook = true
-		local calledNameTag = manualsIndex[tab].tabName
-		activeBook = calledNameTag
-		startLuaCoroutine(self, 'changeBookCoroutine')
-	end
-end
-
-function changeBookCoroutine()
-	local alreadyExists = false
-	--clear old books
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if v.getName() != activeBook then
-				v.destruct()
-			else
-				alreadyExists = true
-			end
-		end
-	end
-	--spawn new one
-	if alreadyExists == false then
-		local book = {}
-		local gameBox = getObjectFromGUID(gameBoxGUID)
-		objects = gameBox.getObjects()
-		for k,v in pairs(objects) do
-			if v.name == activeBook then
-				table.insert(book, v.guid)
-			end
-		end
-		--spawn
-		if book[1] != nil then
-			local params = {}
-			params.guid = book[1]
-			local pos = self.getPosition()
-			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
-			local rot = self.getRotation()
-			params.rotation = {rot[1], rot[2] + 90, rot[3]}
-			book = gameBox.takeObject(params)
-			currentPage = 1
-			coroutine.yield(0)
-			--dupe
-			params = {}
-			params.position = cloneSpawnPos
-			local clone = book.clone(params)
-			coroutine.yield(0)
-			pos = gameBox.getPosition()
-			params = {pos[1],pos[2] + 2,pos[3]}
-			clone.setPositionSmooth(params)
-			coroutine.yield(0)
-		end
-	end
-	changingBook = false
-	return 1
-end
-
-function pageClick(pageNum)
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	local tabTable = {}
-	if activeBook != nil then
-		for k,v in pairs(manualsIndex) do
-			if v.tabName == activeBook then
-				tabTable = v
-			end
-		end
-		local state = tabTable.pages[pageNum].stateNum
-		for k,v in pairs(objects) do
-			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
-				if currentPage != state then
-					v.setState(state)
-					currentPage = state
-				end
-			end
-		end
-	end
-end
\ No newline at end of file
diff --git a/Lua/Story Board Top.fece67.lua b/Lua/Story Board Top.fece67.lua
deleted file mode 100644
index 319b407..0000000
--- a/Lua/Story Board Top.fece67.lua	
+++ /dev/null
@@ -1,496 +0,0 @@
---KDM Storybook
-
----------------------------------
---Vars
---------------------------------
-manualsIndex = {
-	tab1 = {
-		tabName = 'Rules', 
-		pages = {
-			{pageName = 'Introduction', stateNum = 2},
-			{pageName = 'Prologue', stateNum = 5},
-			{pageName = 'First Story', stateNum = 23},
-			{pageName = 'Survival Guide', stateNum = 36},
-			{pageName = 'Survivors', stateNum = 40},
-			{pageName = 'Monsters', stateNum = 48},
-			{pageName = 'Resources', stateNum = 56},
-			{pageName = 'Terrain', stateNum = 59},
-			{pageName = 'Hunt Phase', stateNum = 61},
-			{pageName = 'Showdown Phase', stateNum = 65},
-			{pageName = 'Settlement Phase', stateNum = 79},
-			{pageName = 'Game Variants', stateNum = 85},
-			{pageName = 'Glossary', stateNum = 87},
-		}
-	},
-	tab2 = {
-		tabName = 'Timeline Events', 
-		pages = {
-			{pageName = 'Returning Survivors', stateNum = 2},
-			{pageName = 'Endless Screams', stateNum = 4},
-			{pageName = 'Bone Witch', stateNum = 6},
-			{pageName = 'Hands of Heat', stateNum = 8},
-			{pageName = 'Armored Strangers', stateNum = 10},
-			{pageName = 'Phoenix Feather', stateNum = 12},
-			{pageName = 'Regal Visit', stateNum = 14},
-			{pageName = 'Principle: Conviction', stateNum = 16},
-			{pageName = 'Watched', stateNum = 18},
-		}
-	},
-	tab3 = {
-		tabName = 'Hunt Events', 
-		pages = {
-			{pageName = 'Random Events 1-8', stateNum = 2},
-			{pageName = 'Random Events 9-15', stateNum = 3},
-			{pageName = 'Random Events 16-25', stateNum = 4},
-			{pageName = 'Random Events 26-31', stateNum = 5},
-			{pageName = 'Random Events 32-44', stateNum = 6},
-			{pageName = 'Random Events 45-53', stateNum = 7},
-			{pageName = 'Random Events 54-63', stateNum = 8},
-			{pageName = 'Random Events 64-71', stateNum = 9},
-			{pageName = 'Random Events 72-80', stateNum = 10},
-			{pageName = 'Random Events 81-87', stateNum = 11},
-			{pageName = 'Random Events 88-96', stateNum = 12},
-			{pageName = 'Random Events 97-100', stateNum = 13},
-			{pageName = 'Overwhelming Darkness', stateNum = 14},
-			{pageName = 'Herb Gathering', stateNum = 16},
-			{pageName = 'Mineral Gathering', stateNum = 18},
-			{pageName = 'Run Away', stateNum = 20},
-		}
-	},
-	tab4 = {
-		tabName = 'Showdown Setups', 
-		pages = {
-			{pageName = 'White Lion', stateNum = 2},
-			{pageName = 'Screaming Antelope', stateNum = 4},
-			{pageName = 'Phoenix', stateNum = 6},
-			{pageName = 'Nemesis: Butcher', stateNum = 8},
-			{pageName = "Nemesis: King's Man", stateNum = 10},
-			{pageName = 'Nemesis: The Hand', stateNum = 12},
-			{pageName = 'Nemesis: Watcher', stateNum = 14},
-			{pageName = 'Legendary Monsters', stateNum = 16},
-		}
-	},
-	tab5 = {
-		tabName = 'Settlement Events', 
-		pages = {
-			{pageName = 'Intimacy', stateNum = 2},
-			{pageName = 'Birth of a Savior', stateNum = 4},
-			{pageName = 'Cooking', stateNum = 6},
-			{pageName = 'White Speaker', stateNum = 8},
-		}
-	},
-	tab6 = {
-		tabName = 'Milestone Events', 
-		pages = {
-			{pageName = 'Age', stateNum = 2},
-			{pageName = 'Bold', stateNum = 4},
-			{pageName = 'Insight', stateNum = 6},
-			{pageName = 'See the Truth', stateNum = 8},
-			{pageName = 'White Secret', stateNum = 10},
-			{pageName = 'Principle: New Life', stateNum = 12},
-			{pageName = 'Principle: Death', stateNum = 14},
-			{pageName = 'Principle: Society', stateNum = 16},
-			{pageName = 'Hooded Knight', stateNum = 18},
-			{pageName = 'Game Over', stateNum = 20},
-		}
-	},
-	tab7 = {
-		tabName = 'Severe Injuries', 
-		pages = {
-			{pageName = 'Brain Trauma', stateNum = 2},
-			{pageName = 'Head, Arms', stateNum = 3},
-			{pageName = 'Body, Waist, Legs', stateNum = 4},
-		}
-	},
-	tab8 = {
-		tabName = 'Monster Events', 
-		pages = {
-			{pageName = 'Zero Presence', stateNum = 2},
-			{pageName = 'Crush and Devour', stateNum = 4},
-			{pageName = 'Legendary Lungs', stateNum = 6},
-			{pageName = "King's Step", stateNum = 8},
-			{pageName = "King's Curse", stateNum = 10},
-			{pageName = 'Run Away', stateNum = 12},
-			{pageName = 'Blackout', stateNum = 14},
-		}
-	},
-}
-gameBoxGUID = ''
-zoneSelfGUID = ''
-
-activeBook = {}
-changingBook = false
-currentPage = 1
-
-cloneSpawnPos = {0,0,-80}
-
----------------------------------
---Init
---------------------------------
-
-
-function onLoad()
-
-	local table = Global.getTable('staticObjs')
-	gameBoxGUID = table.gameBox.guid
-	table = Global.getTable('zones')
-	zoneSelfGUID = table.zoneStoryT.guid
-	
-	initTabButtons()
-	initBrowseButtons()
-
-end
-
-function initTabButtons()
-	local index = manualsIndex
-	local col = 4
-	local row = 2
-	local dx = ( 24 / col / 2 ) - 12
-	local dy = 8.5
-	local w = (12000 / col) - (col * 25)
-	local px = 24/ col
-	local py = -1.25
-	local i = 1
-	local h = 600
-	local f = 350
-	for k,v in pairs(index) do
-		local func = k
-		local label = v.tabName
-		self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		if i < col or i > col then
-			dx = dx + px
-		elseif i == col then
-			dx = dx - (px*(col-1))
-			dy = dy + py
-		else
-			dx = dx
-		end
-		i = i+1
-	end
-end
-
-function initBrowseButtons()
-	self.createButton({
-		click_function = 'nextPage',
-		function_owner = self,
-		label = '>',
-		position = {-8.5,0.14,-1.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-	self.createButton({
-		click_function = 'previousPage',
-		function_owner = self,
-		label = '<',
-		position = {-8.5,0.14,-4.5},
-		rotation = {0,90,0},
-		width = 1400,
-		height = 600,
-		font_size = 350
-	})
-end
-
-
----------------------------------
---Events
---------------------------------
-
-function onDropped()
-	local zone = getObjectFromGUID(zoneSelfGUID)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
-
----------------------------------
---Button fnc
---------------------------------
-
-function nextPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			local obj = v.setState(currentPage + 1)
-			if obj != nil then
-				currentPage = currentPage + 1
-			end
-		end
-	end
-end
-
-function previousPage()
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if currentPage != 1 then
-				local obj = v.setState(currentPage - 1)
-				if obj != nil then
-					currentPage = currentPage - 1
-				end
-			end
-		end
-	end
-end
-
-function tab1()
-	local tab = 'tab1'
-	tabClick(tab)
-end
-
-function tab2()
-	local tab = 'tab2'
-	tabClick(tab)
-end
-
-function tab3()
-	local tab = 'tab3'
-	tabClick(tab)
-end
-
-function tab4()
-	local tab = 'tab4'
-	tabClick(tab)
-end
-
-function tab5()
-	local tab = 'tab5'
-	tabClick(tab)
-end
-
-function tab6()
-	local tab = 'tab6'
-	tabClick(tab)
-end
-
-function tab7()
-	local tab = 'tab7'
-	tabClick(tab)
-end	
-
-function tab8()
-	local tab = 'tab8'
-	tabClick(tab)
-end
-
----------pages
-
-function page1()
-	local page = 1
-	pageClick(page)
-end
-
-function page2()
-	local page = 2
-	pageClick(page)
-end
-
-function page3()
-	local page = 3
-	pageClick(page)
-end
-
-function page4()
-	local page = 4
-	pageClick(page)
-end
-
-function page5()
-	local page = 5
-	pageClick(page)
-end
-
-function page6()
-	local page = 6
-	pageClick(page)
-end
-
-function page7()
-	local page = 7
-	pageClick(page)
-end	
-
-function page8()
-	local page = 8
-	pageClick(page)
-end
-
-function page9()
-	local page = 9
-	pageClick(page)
-end
-
-function page10()
-	local page = 10
-	pageClick(page)
-end
-
-function page11()
-	local page = 11
-	pageClick(page)
-end
-
-function page12()
-	local page = 12
-	pageClick(page)
-end
-
-function page13()
-	local page = 13
-	pageClick(page)
-end
-
-function page14()
-	local page = 14
-	pageClick(page)
-end
-
-function page15()
-	local page = 15
-	pageClick(page)
-end
-
-function page16()
-	local page = 16
-	pageClick(page)
-end	
-
-----------------------------------------
---primary fcns
----------------------------------------
-
-function tabClick(tab)
-	--clear books
-	changeBook(tab)
-	--clear last tab pages
-	local btns = self.getButtons()
-	for k,v in pairs(btns) do
-		local text = v.click_function
-		if string.find(text, 'page') then
-			local index = v.index
-			self.removeButton(index)
-		end
-	end
-	--create page list
-	local pagesTable = manualsIndex[tab].pages
-	local col = 1
-	local row = #pagesTable
-	local dx = 9
-	local dy = 5.75
-	local w = 2900
-	local px = 24/ col
-	local py = -0.95
-	local i = 1
-	local h = 400
-	local f = 300
-	local btn = {}
-	pageBtns = {}
-	for k,v in pairs(pagesTable) do
-		local func = 'page' .. i
-		local label = v.pageName
-		local btn = self.createButton({
-			click_function = func,
-			function_owner = self,
-			label = label,
-			position = {dy,0.14,dx},
-			rotation = {0,90,0},
-			width = w,
-			height = h,
-			font_size = f
-		})
-		dy = dy + py
-		i = i+1
-	end
-end
-
-function changeBook(tab)
-	if changingBook != true then
-		changingBook = true
-		local calledNameTag = manualsIndex[tab].tabName
-		activeBook = calledNameTag
-		startLuaCoroutine(self, 'changeBookCoroutine')
-	end
-end
-
-function changeBookCoroutine()
-	local alreadyExists = false
-	--clear old books
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	for k,v in pairs(objects) do
-		if string.find(v.getDescription(), 'reference') then
-			if v.getName() != activeBook then
-				v.destruct()
-			else
-				alreadyExists = true
-			end
-		end
-	end
-	--spawn new one
-	if alreadyExists == false then
-		local book = {}
-		local gameBox = getObjectFromGUID(gameBoxGUID)
-		objects = gameBox.getObjects()
-		for k,v in pairs(objects) do
-			if v.name == activeBook then
-				table.insert(book, v.guid)
-			end
-		end
-		--spawn
-		if book[1] != nil then
-			local params = {}
-			params.guid = book[1]
-			local pos = self.getPosition()
-			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
-			local rot = self.getRotation()
-			params.rotation = {rot[1], rot[2] + 90, rot[3]}
-			book = gameBox.takeObject(params)
-			currentPage = 1
-			coroutine.yield(0)
-			--dupe
-			params = {}
-			params.position = cloneSpawnPos
-			local clone = book.clone(params)
-			coroutine.yield(0)
-			pos = gameBox.getPosition()
-			params = {pos[1],pos[2] + 2,pos[3]}
-			clone.setPositionSmooth(params)
-			coroutine.yield(0)
-		end
-	end
-	changingBook = false
-	return 1
-end
-
-function pageClick(pageNum)
-	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
-	local objects = zoneSelf.getObjects()
-	local tabTable = {}
-	if activeBook != nil then
-		for k,v in pairs(manualsIndex) do
-			if v.tabName == activeBook then
-				tabTable = v
-			end
-		end
-		local state = tabTable.pages[pageNum].stateNum
-		for k,v in pairs(objects) do
-			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
-				if currentPage != state then
-					v.setState(state)
-					currentPage = state
-				end
-			end
-		end
-	end
-end
\ No newline at end of file
diff --git a/Lua/Timeline Events.92b95e.lua b/Lua/Timeline Events.92b95e.lua
deleted file mode 100644
index e041ac2..0000000
--- a/Lua/Timeline Events.92b95e.lua	
+++ /dev/null
@@ -1,29 +0,0 @@
-function onload()
-  b_display = { index = 0,
-                      click_function = 'updateDisplay',
-                      label = self.getName(),
-                      function_owner = self,
-                      position = {0, 0.09, 0},
-                      rotation = {0, 0, 0},
-                      width = 6000,
-                      height = 500,
-                      font_size = 300}
-
-  local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-  end
-
-  self.createButton(b_display)
-end
-
-function updateDisplay()
-    b_display.label = self.getName()
-
-    local description = string.match(self.getDescription(), '%d+')
-    if description != '' and type(tonumber(description)) == 'number' then
-        b_display.font_size = tonumber(description)
-    end
-
-    self.editButton(b_display)
-end
\ No newline at end of file
diff --git a/Lua/Unnamed Survivor.2f95db.lua b/Lua/Unnamed Survivor.2f95db.lua
deleted file mode 100644
index 77b1b67..0000000
--- a/Lua/Unnamed Survivor.2f95db.lua	
+++ /dev/null
@@ -1,630 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 6.1; dy = -12.1
-	createMinimize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-11.5
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45; dy =-11.27; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--survival
-	dx = -5.265; dy =2
-	createCounter('survival', 'big', dx, dy)
-
-	dx = -7.73; dy = 2
-	createCounter('survival_limit', 'big', dx, dy)
-
-	--dx = -2.48; dy = -9.25
-	--createToggle('survival_disabled', dx, dy)
-
-	dx = -3.365; dy = 0.525; py = 0.925
-    createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-
-	--stats
-	dx = -7.45; dy = -3.4; px = 3
-	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
-	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
-	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
-	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('speed', 'bigAttr', dx, dy)
-
-	--insanity
-	dx = 4.55; dy = 1.9
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.55; dy = 3.6
-	createToggle('brain_injury', dx, dy)
-
-	--experience
-	dx = -8.5; dy = -9.1; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--dx = 4.94; dy = -6.9
-	--createToggle('no_hunt', dx, dy)
-
-	--skills
-	dx = 6; dy =-9.1
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.645; dy = -8.01; px = 0.667
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-	dx = -7.65; dy = 5.68; px =0.715
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-
-	dx = 1.78; dy = 5.68; px =0.719
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-
-	dx = -8.63; dy = 7.28; py = 0.71
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-
-	dx = 0.8; dy = 7.28; py = 0.71
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-
-	dx = 4.63; dy = 10.18; py = 0.71
-	createToggle('skip', dx, dy); dy = dy + py;
-	createToggle('survival', dx, dy); dy = dy + py;
-	createToggle('fightingarts', dx, dy)
-
-
-	dx = -2.5; dy = 11; px = 5
-	createTextField('notes', 'txt3', dx, dy); dx = dx + px
-
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
-    }
-    buttons.params.sizes.bigAttr = {
-        display = {width = 0, height = 0, font = 1200},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 300, height = 300, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 400, height = 250, font = 150},
-        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 450},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------------curnils tokens standalone
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-tokens = {}
-tempStats = {}
---------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-					--curnil token script
-					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
-                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                        updateStat(i)
-                    else
-					--
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-					end
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-
-
-
----------------------------
---Curnils token standalone script version
----------------------------
---Curnil's Token scripts
-function loadTokens(loadedTokens)
-    tokens = loadedTokens
-    updateDisplay(false)
-end
-
-function updateStat(stat)
-    local statIncrease = 0
-    for i,v in pairs(tokens) do
-        for j,w in pairs(v) do
-            if stat == "movement" and tostring(j) == "move" then
-                statIncrease = statIncrease + w
-            elseif stat == j then
-                statIncrease = statIncrease + w
-            end
-        end
-    end
-    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
-    loadComplete = true
-end
-
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isGearGrid") then
-        -- remove the token from the tokens collection
-        tokens = {}
-        updateDisplay(false)
-    end
-end
-
-function onPickedUp()
-	tokens = {}
-	updateDisplay(false)
-end
\ No newline at end of file
diff --git a/Lua/Unnamed Survivor.42d42b.lua b/Lua/Unnamed Survivor.42d42b.lua
deleted file mode 100644
index 77b1b67..0000000
--- a/Lua/Unnamed Survivor.42d42b.lua	
+++ /dev/null
@@ -1,630 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 6.1; dy = -12.1
-	createMinimize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-11.5
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45; dy =-11.27; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--survival
-	dx = -5.265; dy =2
-	createCounter('survival', 'big', dx, dy)
-
-	dx = -7.73; dy = 2
-	createCounter('survival_limit', 'big', dx, dy)
-
-	--dx = -2.48; dy = -9.25
-	--createToggle('survival_disabled', dx, dy)
-
-	dx = -3.365; dy = 0.525; py = 0.925
-    createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-
-	--stats
-	dx = -7.45; dy = -3.4; px = 3
-	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
-	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
-	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
-	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('speed', 'bigAttr', dx, dy)
-
-	--insanity
-	dx = 4.55; dy = 1.9
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.55; dy = 3.6
-	createToggle('brain_injury', dx, dy)
-
-	--experience
-	dx = -8.5; dy = -9.1; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--dx = 4.94; dy = -6.9
-	--createToggle('no_hunt', dx, dy)
-
-	--skills
-	dx = 6; dy =-9.1
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.645; dy = -8.01; px = 0.667
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-	dx = -7.65; dy = 5.68; px =0.715
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-
-	dx = 1.78; dy = 5.68; px =0.719
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-
-	dx = -8.63; dy = 7.28; py = 0.71
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-
-	dx = 0.8; dy = 7.28; py = 0.71
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-
-	dx = 4.63; dy = 10.18; py = 0.71
-	createToggle('skip', dx, dy); dy = dy + py;
-	createToggle('survival', dx, dy); dy = dy + py;
-	createToggle('fightingarts', dx, dy)
-
-
-	dx = -2.5; dy = 11; px = 5
-	createTextField('notes', 'txt3', dx, dy); dx = dx + px
-
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
-    }
-    buttons.params.sizes.bigAttr = {
-        display = {width = 0, height = 0, font = 1200},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 300, height = 300, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 400, height = 250, font = 150},
-        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 450},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------------curnils tokens standalone
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-tokens = {}
-tempStats = {}
---------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-					--curnil token script
-					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
-                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                        updateStat(i)
-                    else
-					--
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-					end
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-
-
-
----------------------------
---Curnils token standalone script version
----------------------------
---Curnil's Token scripts
-function loadTokens(loadedTokens)
-    tokens = loadedTokens
-    updateDisplay(false)
-end
-
-function updateStat(stat)
-    local statIncrease = 0
-    for i,v in pairs(tokens) do
-        for j,w in pairs(v) do
-            if stat == "movement" and tostring(j) == "move" then
-                statIncrease = statIncrease + w
-            elseif stat == j then
-                statIncrease = statIncrease + w
-            end
-        end
-    end
-    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
-    loadComplete = true
-end
-
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isGearGrid") then
-        -- remove the token from the tokens collection
-        tokens = {}
-        updateDisplay(false)
-    end
-end
-
-function onPickedUp()
-	tokens = {}
-	updateDisplay(false)
-end
\ No newline at end of file
diff --git a/Lua/Unnamed Survivor.87d89b.lua b/Lua/Unnamed Survivor.87d89b.lua
deleted file mode 100644
index 77b1b67..0000000
--- a/Lua/Unnamed Survivor.87d89b.lua	
+++ /dev/null
@@ -1,630 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 6.1; dy = -12.1
-	createMinimize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-11.5
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45; dy =-11.27; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--survival
-	dx = -5.265; dy =2
-	createCounter('survival', 'big', dx, dy)
-
-	dx = -7.73; dy = 2
-	createCounter('survival_limit', 'big', dx, dy)
-
-	--dx = -2.48; dy = -9.25
-	--createToggle('survival_disabled', dx, dy)
-
-	dx = -3.365; dy = 0.525; py = 0.925
-    createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-
-	--stats
-	dx = -7.45; dy = -3.4; px = 3
-	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
-	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
-	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
-	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('speed', 'bigAttr', dx, dy)
-
-	--insanity
-	dx = 4.55; dy = 1.9
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.55; dy = 3.6
-	createToggle('brain_injury', dx, dy)
-
-	--experience
-	dx = -8.5; dy = -9.1; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--dx = 4.94; dy = -6.9
-	--createToggle('no_hunt', dx, dy)
-
-	--skills
-	dx = 6; dy =-9.1
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.645; dy = -8.01; px = 0.667
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-	dx = -7.65; dy = 5.68; px =0.715
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-
-	dx = 1.78; dy = 5.68; px =0.719
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-
-	dx = -8.63; dy = 7.28; py = 0.71
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-
-	dx = 0.8; dy = 7.28; py = 0.71
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-
-	dx = 4.63; dy = 10.18; py = 0.71
-	createToggle('skip', dx, dy); dy = dy + py;
-	createToggle('survival', dx, dy); dy = dy + py;
-	createToggle('fightingarts', dx, dy)
-
-
-	dx = -2.5; dy = 11; px = 5
-	createTextField('notes', 'txt3', dx, dy); dx = dx + px
-
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
-    }
-    buttons.params.sizes.bigAttr = {
-        display = {width = 0, height = 0, font = 1200},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 300, height = 300, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 400, height = 250, font = 150},
-        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 450},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------------curnils tokens standalone
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-tokens = {}
-tempStats = {}
---------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-					--curnil token script
-					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
-                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                        updateStat(i)
-                    else
-					--
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-					end
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-
-
-
----------------------------
---Curnils token standalone script version
----------------------------
---Curnil's Token scripts
-function loadTokens(loadedTokens)
-    tokens = loadedTokens
-    updateDisplay(false)
-end
-
-function updateStat(stat)
-    local statIncrease = 0
-    for i,v in pairs(tokens) do
-        for j,w in pairs(v) do
-            if stat == "movement" and tostring(j) == "move" then
-                statIncrease = statIncrease + w
-            elseif stat == j then
-                statIncrease = statIncrease + w
-            end
-        end
-    end
-    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
-    loadComplete = true
-end
-
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isGearGrid") then
-        -- remove the token from the tokens collection
-        tokens = {}
-        updateDisplay(false)
-    end
-end
-
-function onPickedUp()
-	tokens = {}
-	updateDisplay(false)
-end
\ No newline at end of file
diff --git a/Lua/Unnamed Survivor.aa7e77.lua b/Lua/Unnamed Survivor.aa7e77.lua
deleted file mode 100644
index 77b1b67..0000000
--- a/Lua/Unnamed Survivor.aa7e77.lua	
+++ /dev/null
@@ -1,630 +0,0 @@
---KDM Survivor Sheet-Full (Slate) v.3
---by Eskander and Curnil
---Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
-
--------------------------------------------------------------
---Customizable Buttons EDIT BELOW
--------------------------------------------------------------
-function initCustomButtons()
-	thick = 0.14
-
-	--minimize button
-	dx = 6.1; dy = -12.1
-	createMinimize('minimize', 'collapse', dx, dy)
-
-	--header
-	dx = -1; dy =-11.5
-	createTextField('survivor_name', 'txtbig', dx, dy)
-
-	dx =7.45; dy =-11.27; px = 1.25
-	createToggle('gender_m', dx, dy); dx = dx + px;
-	createToggle('gender_f', dx, dy)
-
-	--survival
-	dx = -5.265; dy =2
-	createCounter('survival', 'big', dx, dy)
-
-	dx = -7.73; dy = 2
-	createCounter('survival_limit', 'big', dx, dy)
-
-	--dx = -2.48; dy = -9.25
-	--createToggle('survival_disabled', dx, dy)
-
-	dx = -3.365; dy = 0.525; py = 0.925
-    createToggle('dodge', dx, dy); dy = dy + py;
-	createToggle('encourage', dx, dy); dy = dy + py;
-	createToggle('surge', dx, dy); dy = dy + py;
-	createToggle('dash', dx, dy)
-
-	--stats
-	dx = -7.45; dy = -3.4; px = 3
-	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
-	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
-	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
-	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
-	createCounter('speed', 'bigAttr', dx, dy)
-
-	--insanity
-	dx = 4.55; dy = 1.9
-	createCounter('insanity', 'big', dx, dy)
-	dx = 4.55; dy = 3.6
-	createToggle('brain_injury', dx, dy)
-
-	--experience
-	dx = -8.5; dy = -9.1; px = 0.665
-	createToggle('xp_1', dx, dy); dx = dx + px;
-	createToggle('xp_2', dx, dy); dx = dx + px;
-	createToggle('xp_3', dx, dy); dx = dx + px;
-	createToggle('xp_4', dx, dy); dx = dx + px;
-	createToggle('xp_5', dx, dy); dx = dx + px;
-	createToggle('xp_6', dx, dy); dx = dx + px;
-	createToggle('xp_7', dx, dy); dx = dx + px;
-	createToggle('xp_8', dx, dy); dx = dx + px;
-	createToggle('xp_9', dx, dy); dx = dx + px;
-	createToggle('xp_10', dx, dy); dx = dx + px;
-	createToggle('xp_11', dx, dy); dx = dx + px;
-	createToggle('xp_12', dx, dy); dx = dx + px;
-	createToggle('xp_13', dx, dy); dx = dx + px;
-	createToggle('xp_14', dx, dy); dx = dx + px;
-	createToggle('xp_15', dx, dy); dx = dx + px;
-	createToggle('xp_16', dx, dy)
-
-	--dx = 4.94; dy = -6.9
-	--createToggle('no_hunt', dx, dy)
-
-	--skills
-	dx = 6; dy =-9.1
-	createTextField('proficiency_type', 'txt', dx, dy)
-
-	dx = 3.645; dy = -8.01; px = 0.667
-	createToggle('proficiency_1', dx, dy); dx = dx + px;
-	createToggle('proficiency_2', dx, dy); dx = dx + px;
-	createToggle('proficiency_3', dx, dy); dx = dx + px;
-	createToggle('proficiency_4', dx, dy); dx = dx + px;
-	createToggle('proficiency_5', dx, dy); dx = dx + px;
-	createToggle('proficiency_6', dx, dy); dx = dx + px;
-	createToggle('proficiency_7', dx, dy); dx = dx + px;
-	createToggle('proficiency_8', dx, dy)
-
-	dx = -7.65; dy = 5.68; px =0.715
-	createToggle('courage_1', dx, dy); dx = dx + px;
-	createToggle('courage_2', dx, dy); dx = dx + px;
-	createToggle('courage_3', dx, dy); dx = dx + px;
-	createToggle('courage_4', dx, dy); dx = dx + px;
-	createToggle('courage_5', dx, dy); dx = dx + px;
-	createToggle('courage_6', dx, dy); dx = dx + px;
-	createToggle('courage_7', dx, dy); dx = dx + px;
-	createToggle('courage_8', dx, dy); dx = dx + px;
-	createToggle('courage_9', dx, dy)
-
-	dx = 1.78; dy = 5.68; px =0.719
-	createToggle('understanding_1', dx, dy); dx = dx + px;
-	createToggle('understanding_2', dx, dy); dx = dx + px;
-	createToggle('understanding_3', dx, dy); dx = dx + px;
-	createToggle('understanding_4', dx, dy); dx = dx + px;
-	createToggle('understanding_5', dx, dy); dx = dx + px;
-	createToggle('understanding_6', dx, dy); dx = dx + px;
-	createToggle('understanding_7', dx, dy); dx = dx + px;
-	createToggle('understanding_8', dx, dy); dx = dx + px;
-	createToggle('understanding_9', dx, dy)
-
-	dx = -8.63; dy = 7.28; py = 0.71
-	createToggle('stalwart', dx, dy); dy = dy + py;
-	createToggle('prepared', dx, dy); dy = dy + py;
-	createToggle('matchmaker', dx, dy)
-
-	dx = 0.8; dy = 7.28; py = 0.71
-	createToggle('analyze', dx, dy); dy = dy + py;
-	createToggle('explore', dx, dy); dy = dy + py;
-	createToggle('tinker', dx, dy)
-
-	dx = 4.63; dy = 10.18; py = 0.71
-	createToggle('skip', dx, dy); dy = dy + py;
-	createToggle('survival', dx, dy); dy = dy + py;
-	createToggle('fightingarts', dx, dy)
-
-
-	dx = -2.5; dy = 11; px = 5
-	createTextField('notes', 'txt3', dx, dy); dx = dx + px
-
-	--------------------
-	--backside buttons
-	-------------------
-	thick = -0.14
-	
-
-    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
-    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
-
-end
-
-------------------
---Style Sheet
-------------------
-
-function initButtonsTable()
-
-    buttons = {}
-    buttons.index = 0
-    buttons.counts = {}
-    buttons.params = {}
-    buttons.params.positions = {}
-	buttons.params.rotations = {}
-    buttons.params.positions.offsets = {}
-    buttons.params.sizes = {}
-    buttons.targetFunc = {}
-	
-	--make a style of button by adding a new size
-	buttons.params.sizes.collapse = {
-        display = {width = 250, height = 250, font = 250},
-        button = {width = 0, height = 0, font = 100},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-	}
-    buttons.params.sizes.std = {
-        display = {width = 200, height = 150, font = 100},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.mid = {
-        display = {width = 0, height = 0, font = 400},
-        button = {width = 150, height = 200, font = 200},
-        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
-    }
-    buttons.params.sizes.big = {
-        display = {width = 0, height = 0, font = 800},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
-    }
-    buttons.params.sizes.bigAttr = {
-        display = {width = 0, height = 0, font = 1200},
-        button = {width = 280, height = 280, font = 400},
-        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
-    }
-    buttons.params.sizes.small = {
-        display = {width = 0, height = 0, font = 80},
-        button = {width = 100, height = 100, font = 100},
-        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
-    }
-    buttons.params.sizes.toggle = {
-        display = {width = 150, height = 150, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.genderToggle = {
-        display = {width = 300, height = 300, font = 300},
-        button = {width = 200, height = 200, font = 300},
-        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt = {
-        display = {width = 0, height = 0, font = 300},
-        button = {width = 400, height = 250, font = 150},
-        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-
-    buttons.params.sizes.txt2 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txt3 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt4 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-	buttons.params.sizes.txt5 = {
-        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig = {
-        display = {width = 0, height = 0, font = 450},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
-    }
-    buttons.params.sizes.txtbig2 = {
-        display = {width = 0, height = 0, font = 300},
-        button = buttons.params.sizes.txt.button,
-        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
-    }
-end
-
-----------------------------------------------------
---DO NO EDIT BELOW unless you know what you're doing
---SAVE
-----------------------------------------------------
-
---Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
-function onSave()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	
-	--Uncomment this line to reset the save data
-	--saved_data = ''
-	return saved_data
-end
-
-----------------------------------------------------
---INIT
-----------------------------------------------------
-
--------------curnils tokens standalone
---used to determine if collision(enter/exit) is Full Char Sheet
-isKDMFULL = true
-tokens = {}
-tempStats = {}
---------------
-
---loads buttons and gets saved data
-function onload(saved_data)
-    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
-    initButtonsTable()
-    objs = {}
-	initCustomButtons()
-	
-	--categorize buttons
-    for i,v in pairs(buttons) do
-        buttons.counts[tostring(i)] = 0
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
-            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
-            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
-			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
-        end
-    end
-    generateButtonParameters()
-
-    --loads saved data if exists
-    if saved_data != '' then
-        local loaded_data = JSON.decode(saved_data)
-        buttons.counts = loaded_data.saved_counts
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                if buttons.counts[tostring(i)] == nil then
-                    buttons.counts[tostring(i)] = 0
-                end
-            end
-        end
-    else
-        for i,v in pairs(buttons) do
-            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
-                buttons.counts[tostring(i)] = 0
-            end
-        end
-    end
-	
-	--update display
-    updateDisplay(true)
-end
-
---------------------------
---creates buttons by type
--------------------------
-
-function createToggle(name, px, py)
-    createCounter('t_' .. name, 'toggle', px, py)
-end
-
-function createCounter(name, btype, px, py)
-    buttons[name] = {type = btype}
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createTextField(sname, type, px, py)
-    name = '__' .. sname;
-    buttons[name] = {type = type }
-    buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMinimize(name, type, px, py)
-	name = 'm-' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function createMaximize(name, type, px, py)
-	name = 'm+' .. name
-	buttons[name] = {type = type}
-	buttons.params.positions[name] = {x = px, y = thick, z = py}
-end
-
-function dud()
-end
-
---gets buttons params
-function generateButtonParameters()
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-            btn = tostring(i)
-            prefix = string.sub(btn, 1, 2)
-            if (prefix == "__") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-                buttons[tostring(i)].isText = true
-			elseif (prefix == "m-") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMinimize = true
-			elseif (prefix == "m+") then
-				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-				buttons[tostring(i)].isMaximize = true
-            elseif (prefix != "t_") then
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
-                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
-            else
-                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
-                buttons[tostring(i)].isToggle = true
-            end
-        end
-    end
-end
-
---creates buttons
-function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
-    local buttonInfo = {}
-        buttonInfo.function_owner = self
-        buttonInfo.index = buttons.index
-        buttonInfo.click_function = targetFunc
-		--reverse things for backside
-		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
-			buttonInfo.rotation = {0,0,180}
-			if offsets != nil then
-				reverse_x = -offsets.x
-			end
-		elseif offsets != nil then
-			reverse_x = offsets.x
-		end
-		--reversed
-        if isLeft then
-            orientationModifier = -1
-        else
-            orientationModifier = 1
-        end
-
-        if offsets == nil then
-            buttonInfo.position = {positions.x, positions.y, positions.z}
-        else
-            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
-        end
-        buttonInfo.width = sizes.width
-        buttonInfo.height = sizes.height
-        buttonInfo.font_size = sizes.font
-        buttonInfo.label = label
-    buttons.index = buttons.index + 1
-
-    return buttonInfo
-end
-
-----------------------------------------------
---Utility functions
-----------------------------------------------
-function updateDisplay(firstTime)
-    for i,v in pairs(buttons) do
-        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
-			if (buttons[tostring(i)].isMinimize == true) then
-				buttons[tostring(i)].display.label = '-'
-			elseif (buttons[tostring(i)].isMaximize == true) then
-				buttons[tostring(i)].display.label = '+'
-            elseif (buttons[tostring(i)].isToggle == true) then
-				if (buttons.counts[tostring(i)] > 0) then
-                    buttons[tostring(i)].display.label = "X"
-                else
-                    buttons[tostring(i)].display.label = ""
-                end
-            else
-                if (buttons[tostring(i)].isText == true) then
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                    if (objs[tostring(i)] == nil) then
-                        buttons[tostring(i)].minusOne.label = "Edit"
-                    else
-                        buttons[tostring(i)].minusOne.label = "Done"
-                    end
-                else
-					--curnil token script
-					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
-                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-                        updateStat(i)
-                    else
-					--
-                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
-					end
-                end
-            end
-            if (firstTime) then
-                self.createButton(buttons[tostring(i)].display)
-                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
-                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
-            else
-                self.editButton(buttons[tostring(i)].display)
-            end
-        end
-    end
-end
-
----------------------------------------------
---functions activated by button click/other
---------------------------------------------
-
-function toggleClick(location)
-	if buttons.counts[location] > 0 then
-		buttons.counts[location] = 0
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_gender_f"] = 0
-		end
-	else
-		buttons.counts[location] = 1
-		if location == "t_gender_m" or location == "t_b_gender_m" then
-			buttons.counts["t_gender_f"] = 0
-			buttons.counts["t_b_gender_f"] = 0
-			buttons.counts["t_b_gender_m"] = 1
-			buttons.counts["t_gender_m"] = 1
-		elseif location == "t_gender_f" or location == "t_b_gender_f" then
-			buttons.counts["t_gender_f"] = 1
-			buttons.counts["t_b_gender_f"] = 1
-			buttons.counts["t_b_gender_m"] = 0
-			buttons.counts["t_gender_m"] = 0
-		end
-	end
-    updateDisplay(false)
-end
-
-function plus(location, amount)
-    buttons.counts[location] = buttons.counts[location] + amount
-    updateDisplay(false)
-end
-
-function minus(location, amount)
-    --Prevents count from going below 0
-    --if buttons.counts[location] > amount - 1 then
-        buttons.counts[location] = buttons.counts[location] - amount
-    --else
-    --    buttons.counts[location] = 0
-    --end
-    updateDisplay(false)
-end
-
-function editclick(location)
-    nm = tostring(location) --string.gsub(location, "", "")
-    local sizes = buttons.params.sizes[buttons[nm].type].offsets
-    mpos = self.getPosition(); pos = buttons.params.positions[nm]
-    local btns = self.getButtons()
-    if (btns == nil) then return end
-    button = nil
-    fname = tostring(location) .. 'EditClick'
-    ppos = {pos.x + 2, pos.y, pos.z}
-    if (objs[nm] != nil) then
-        buttons.counts[nm] = objs[nm].getDescription()
-			if nm == '__survivor_name' then
-				buttons.counts.__b_survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			elseif nm == '__b_survivor_name' then
-				buttons.counts.__survivor_name = objs[nm].getDescription()
-				buttons.counts.__b_fam_self = objs[nm].getDescription()
-				self.setName(objs[nm].getDescription())
-			end
-        destroyObject(objs[nm])
-        objs[nm] = nil
-    else
-        local pos = self.getPosition()
-        local rot = self.getRotation()
-        local sca = self.getScale()
-        local pawn_pos = {}
-        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
-        pawn_pos['z'] = pos['z']-ppos[3] --1.8
-        --translate point to origin
-        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
-        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
-        --now apply rotation
-        local rad_rot = math.rad(original_rot['y'] - rot['y'])
-        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
-        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
-        --translate back
-        local new_pawn_x = obj_rotatedX + pos['x'];
-        local new_pawn_z = obj_rotatedZ + pos['z'];
-        local params = {}
-        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
-
-        o = spawnObject({
-            type = 'go_game_piece_black',
-            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
-            scale = {1, 1, 1}
-        })
-        objs[nm] = o
-        o.setDescription(tostring(buttons.counts[nm]))
-		o.setName('Edit my description and re-click Edit')
-    end
-    updateDisplay(false)
-end
-
---------------------------
---transfer for minimize
---------------------------
-function minimizeSheet()
-	if buttons.counts != nil then
-		--hardsave
-		local data_to_save = {}
-		data_to_save.saved_counts = {}
-		for i,v in pairs(buttons.counts) do
-			data_to_save.saved_counts[tostring(i)] = v or 0
-		end
-		saved_data = JSON.encode(data_to_save)
-		self.script_state = saved_data
-		transfer_data = data_to_save
-		startLuaCoroutine(self, 'transferCoroutine')
-	end
-end
-
-function transferCoroutine()
-	local object = self.setState(2)
-	coroutine.yield(0)
-    object.call('loadData', transfer_data)
-	return 1
-end
-
---------------------------
---save when dropped (for dropping into bags)
---------------------------
-function onDropped()
-	local data_to_save = {}
-	data_to_save.saved_counts = {}
-	for i,v in pairs(buttons.counts) do
-		data_to_save.saved_counts[tostring(i)] = v or 0
-	end
-	saved_data = JSON.encode(data_to_save)
-	self.script_state = saved_data
-end
-
-
-
-
----------------------------
---Curnils token standalone script version
----------------------------
---Curnil's Token scripts
-function loadTokens(loadedTokens)
-    tokens = loadedTokens
-    updateDisplay(false)
-end
-
-function updateStat(stat)
-    local statIncrease = 0
-    for i,v in pairs(tokens) do
-        for j,w in pairs(v) do
-            if stat == "movement" and tostring(j) == "move" then
-                statIncrease = statIncrease + w
-            elseif stat == j then
-                statIncrease = statIncrease + w
-            end
-        end
-    end
-    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
-    loadComplete = true
-end
-
-function onCollisionExit(collision_info)
-    local obj = collision_info.collision_object
-    if obj.getVar("isGearGrid") then
-        -- remove the token from the tokens collection
-        tokens = {}
-        updateDisplay(false)
-    end
-end
-
-function onPickedUp()
-	tokens = {}
-	updateDisplay(false)
-end
\ No newline at end of file
diff --git a/Lua/deckAbilities.625f68.lua b/Lua/deckAbilities.625f68.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckAbilities.625f68.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckBasicHunt.4e9d9e.lua b/Lua/deckBasicHunt.4e9d9e.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckBasicHunt.4e9d9e.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckBasicResources.4b6997.lua b/Lua/deckBasicResources.4b6997.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckBasicResources.4b6997.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckDisorders.3a5452.lua b/Lua/deckDisorders.3a5452.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckDisorders.3a5452.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckFightingArts.515434.lua b/Lua/deckFightingArts.515434.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckFightingArts.515434.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckSecretFightingArs.b6c374.lua b/Lua/deckSecretFightingArs.b6c374.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckSecretFightingArs.b6c374.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckSevereInjuries.421db1.lua b/Lua/deckSevereInjuries.421db1.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckSevereInjuries.421db1.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckSpecialHunt.148b16.lua b/Lua/deckSpecialHunt.148b16.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckSpecialHunt.148b16.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckStrangeResources.7aadc0.lua b/Lua/deckStrangeResources.7aadc0.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckStrangeResources.7aadc0.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/Lua/deckVermin.8c28ba.lua b/Lua/deckVermin.8c28ba.lua
deleted file mode 100644
index 79187ae..0000000
--- a/Lua/deckVermin.8c28ba.lua
+++ /dev/null
@@ -1,14 +0,0 @@
---placeholder script
-
-function onLoad()
-end
-
-function onDropped()
-	local var = self.getName()
-	local zoneTable = {}
-	local zoneTable = Global.getTable('zones')
-	local guid = zoneTable[var].guid
-	local zone = getObjectFromGUID(guid)
-	local pos = self.getPosition()
-	zone.setPosition(pos)
-end
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..4f7d702
--- /dev/null
+++ b/README.md
@@ -0,0 +1,3 @@
+# KDM-TTS-Mod
+
+This is an example readme. We should put a brief description of what we're doing here, and instructions on how to get started (DETAILED instructions on the loop from pulling info from github, making a change, testing it locally. and pushing it back.
diff --git a/alpha/README.lua b/alpha/README.lua
new file mode 100644
index 0000000..7fa9fc6
--- /dev/null
+++ b/alpha/README.lua
@@ -0,0 +1,2 @@
+--TODO: PLACEHOLDER file in directory for alpha devleopment.
+--TODO: DELETE THIS FILE when other files are added to directory.
diff --git a/beta/Admin Button.a12e8c.lua b/beta/Admin Button.a12e8c.lua
new file mode 100644
index 0000000..a7ed729
--- /dev/null
+++ b/beta/Admin Button.a12e8c.lua	
@@ -0,0 +1,34 @@
+--------------------
+--KDM Admin Button
+-------------------
+
+-------------------
+--Variables
+------------------
+
+-------------------
+--Init
+--------------------
+function onLoad()
+
+	--show admin
+	self.createButton({
+		click_function = 'showAdmin',
+		function_owner = self,
+		label = 'Show Admin Console',
+		position = {0,0.5,0},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+
+end
+
+--------------------
+--Fcns
+--------------------
+
+function showAdmin()
+	Global.call('showAdmin')
+end
\ No newline at end of file
diff --git a/beta/Admin Console.e00199.lua b/beta/Admin Console.e00199.lua
new file mode 100644
index 0000000..2970487
--- /dev/null
+++ b/beta/Admin Console.e00199.lua	
@@ -0,0 +1,229 @@
+--------------------
+--KDM Admin Console
+-------------------
+
+-------------------
+--Variables
+------------------
+
+-------------------
+--Init
+--------------------
+function onLoad()
+
+	local label = {}
+	if Global.getVar('autoHunt') == false then
+		label.huntLabel = 'Auto-Hunt is OFF'
+	elseif Global.getVar('autoHunt') == true then
+		label.huntLabel = 'Auto-Hunt is ON'
+	end
+	if Global.getVar('autoShowdown') == false then
+		label.showdownLabel = 'Auto-Showdown is OFF'
+	elseif Global.getVar('autoShowdown') == true then
+		label.showdownLabel = 'Auto-Showdown is ON'
+	end
+	if Global.getVar('devMode') == true then
+		label.devLabel = 'Dev Mode is ON'
+	elseif Global.getVar('devMode') == false then
+		label.devLabel = 'Dev Mode is OFF'
+	end
+	if Global.getVar('autoDeckRefresh') == true then
+		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
+	elseif Global.getVar('autoDeckRefresh') == false then
+		label.deckRefreshLabel = 'Essential Deck Refresh (INACTIVE)'
+	end
+	if Global.getVar('autoMonsterDeck') == true then
+		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
+	elseif Global.getVar('autoMonsterDeck') == false then
+		label.monsterDeckLabel = 'Showdown Deckbuilder (INACTIVE)'
+	end
+
+
+	--reset saved data
+	self.createButton({
+		click_function = 'clearSavedData',
+		function_owner = self,
+		label = 'Reset Script Variables',
+		position = {4,1,-1},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--dev mode(unlock statics)
+	self.createButton({
+		click_function = 'devModeToggle',
+		function_owner = self,
+		label = label.devLabel,
+		position = {4,1,-3},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--auto hunt
+	self.createButton({
+		click_function = 'autoHuntToggle',
+		function_owner = self,
+		label = label.huntLabel,
+		position = {-4,1,-5},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--auto showdown
+	self.createButton({
+		click_function = 'autoShowdownToggle',
+		function_owner = self,
+		label = label.showdownLabel,
+		position = {-4,1,-3},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--auto showdown deck build (inactive)
+	self.createButton({
+		click_function = 'autoShowdownDeckBuildToggle',
+		function_owner = self,
+		label = label.monsterDeckLabel,
+		position = {-4,1,-1},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--auto deck refresh (inactive)
+	self.createButton({
+		click_function = 'autoDeckRefreshToggle',
+		function_owner = self,
+		label = label.deckRefreshLabel,
+		position = {-4,1,1},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+	--hide
+	self.createButton({
+		click_function = 'hideConsole',
+		function_owner = self,
+		label = 'Hide Console',
+		position = {4,1,-5},
+		rotation = {0,0,0},
+		width = 3000,
+		height = 400,
+		font_size = 200
+	})
+
+end
+
+--------------------
+--Fcns
+--------------------
+
+
+function updateLabels()
+	local buttonList = {}
+	buttonList = self.getButtons()
+	btns = {}
+	for k,v in pairs(buttonList) do
+		local index = v.index
+		local key = v.click_function
+		btns[key] = index
+	end
+
+	params = {}
+	if Global.getVar('autoHunt') == false then
+		params.index = btns.autoHuntToggle
+		params.label = 'Auto-Hunt is OFF'
+		self.editButton(params)
+	elseif Global.getVar('autoHunt') == true then
+		params.index = btns.autoHuntToggle
+		params.label = 'Auto-Hunt is ON'
+		self.editButton(params)
+	end
+	if Global.getVar('autoShowdown') == false then
+		params.index = btns.autoShowdownToggle
+		params.label = 'Auto-Showdown is OFF'
+		self.editButton(params)
+	elseif Global.getVar('autoShowdown') == true then
+		params.index = btns.autoShowdownToggle
+		params.label = 'Auto-Showdown is ON'
+		self.editButton(params)
+	end
+	if Global.getVar('devMode') == true then
+		params.index = btns.devModeToggle
+		params.label = 'Dev Mode is ON'
+		self.editButton(params)
+	elseif Global.getVar('devMode') == false then
+		params.index = btns.devModeToggle
+		params.label = 'Dev Mode is OFF'
+		self.editButton(params)
+	end
+	if Global.getVar('autoDeckRefresh') == true then
+		params.index = btns.autoDeckRefreshToggle
+		params.label = 'Essential Deck Refresh (INACTIVE)'
+		self.editButton(params)
+	elseif Global.getVar('autoDeckRefresh') == false then
+		params.index = btns.autoDeckRefreshToggle
+		params.label = 'Essential Deck Refresh (INACTIVE)'
+		self.editButton(params)
+	end
+	if Global.getVar('autoMonsterDeck') == true then
+		params.index = btns.autoShowdownDeckBuildToggle
+		params.label = 'Showdown Deckbuilder (INACTIVE)'
+		self.editButton(params)
+	elseif Global.getVar('autoMonsterDeck') == false then
+		params.index = btns.autoShowdownDeckBuildToggle
+		params.label = 'Showdown Deckbuilder (INACTIVE)'
+		self.editButton(params)
+	end
+end
+
+function clearSavedData()
+	Global.setVar('clearSavedData', true)
+	printToAll('Saved scripted variables have been cleared.',{0,0.8,0})
+	printToAll('IMPORTANT, Manually delete any remaining hunt/showdown components that would normally be cleaned up or you may trigger errors in future auto setups.',{0.8,0,0})
+	printToAll('Save and reload the game to complete variable reset.',{0,0.8,0})
+end
+
+function autoHuntToggle()
+	Global.call('toggleAutoHunt')
+	updateLabels()
+end
+
+function autoShowdownToggle()
+	Global.call('toggleAutoShowdown')
+	updateLabels()
+end
+
+function autoShowdownDeckBuildToggle()
+	printToAll('Feature is not implemented.',{0.8,0,0})
+	Global.call('toggleAutoMonsterDeck')
+	updateLabels()
+end
+
+function autoDeckRefreshToggle()
+	printToAll('Feature is not implemented.',{0.8,0,0})
+	Global.call('toggleAutoDeckRefresh')
+	updateLabels()
+end
+
+function devModeToggle()
+	Global.call('toggleDevMode')
+	updateLabels()
+end
+
+function hideConsole()
+	local params = {0,5,80}
+	self.setPosition(params)
+	self.interactable = false
+	self.setRotation({0,180,180})
+end
+
+function showConsole()
+
+
+end
\ No newline at end of file
diff --git a/beta/Custom Token.ba32c7.lua b/beta/Custom Token.ba32c7.lua
new file mode 100644
index 0000000..94a9e90
--- /dev/null
+++ b/beta/Custom Token.ba32c7.lua	
@@ -0,0 +1,522 @@
+--KDM Nog Settlement Sheet
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+function initCustomButtons()
+	thick = 0.05
+
+	--example counter (clicky +/- to change number)
+    dx = 0.29; dy = -1.666 --position of vert/horizontal
+	createCounter('thingy1', 'big', dx, dy)
+
+	--example counter (clicky +/- to change number)
+    dx = 0.73; dy = -1.666 --position of vert/horizontal
+	createCounter('thingy4', 'big', dx, dy)
+	
+	--example counter (clicky +/- to change number)
+    dx = 1.18; dy = -1.666 --position of vert/horizontal
+	createCounter('thingy5', 'big', dx, dy)
+
+	--example textfield (clicky to make a text field with edit button)
+	dx = 0.7; dy = -2.2 --position of vert/horizontal
+	createTextField('thingy3','txt', dx, dy)
+
+	--example of a series aligned horizontally with each other
+	dx = -1.359; dy = -2.179; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('A', dx, dy); dy = dy + py;
+	createToggle('B', dx, dy); dy = dy + py;
+	createToggle('C', dx, dy); dy = dy + py;
+	createToggle('D', dx, dy); dy = dy + py;
+	createToggle('E', dx, dy); dy = dy + py;
+	createToggle('F', dx, dy); dy = dy + py;
+	createToggle('G', dx, dy); dy = dy + py;
+	createToggle('H', dx, dy); dy = dy + py;
+	createToggle('I', dx, dy); dy = dy + py;
+	createToggle('J', dx, dy)
+	dx = -1.359; dy = -1.347; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('AA', dx, dy); dy = dy + py;
+	createToggle('BB', dx, dy); dy = dy + py;
+	createToggle('CC', dx, dy); dy = dy + py;
+	createToggle('DD', dx, dy); dy = dy + py;
+	createToggle('EE', dx, dy); dy = dy + py;
+	createToggle('FF', dx, dy); dy = dy + py;
+	createToggle('GG', dx, dy); dy = dy + py;
+	createToggle('HH', dx, dy); dy = dy + py;
+	createToggle('II', dx, dy); dy = dy + py;
+	createToggle('JJ', dx, dy)
+	dx = -1.359; dy = -0.51; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('AAA', dx, dy); dy = dy + py;
+	createToggle('BBB', dx, dy); dy = dy + py;
+	createToggle('CCC', dx, dy); dy = dy + py;
+	createToggle('DDD', dx, dy); dy = dy + py;
+	createToggle('EEE', dx, dy); dy = dy + py;
+	createToggle('FFF', dx, dy); dy = dy + py;
+	createToggle('GGG', dx, dy); dy = dy + py;
+	createToggle('HHH', dx, dy); dy = dy + py;
+	createToggle('III', dx, dy); dy = dy + py;
+	createToggle('JJJ', dx, dy)
+	dx = -1.359; dy = 0.328; px = 1; py = 0.083; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('AAAA', dx, dy); dy = dy + py;
+	createToggle('BBBB', dx, dy); dy = dy + py;
+	createToggle('CCCC', dx, dy); dy = dy + py;
+	createToggle('DDDD', dx, dy); dy = dy + py;
+	createToggle('EEEE', dx, dy); dy = dy + py;
+	createToggle('FFFF', dx, dy); dy = dy + py;
+	createToggle('GGGG', dx, dy); dy = dy + py;
+	createToggle('HHHH', dx, dy); dy = dy + py;
+	createToggle('IIII', dx, dy); dy = dy + py;
+	createToggle('JJJJ', dx, dy)
+	
+	dx = -1.303; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Quarry', dx, dy); dy = dy + py;
+	createToggle('Quarry1', dx, dy); dy = dy + py;
+	createToggle('Quarry2', dx, dy); dy = dy + py;
+	createToggle('Quarry3', dx, dy); dy = dy + py;
+	createToggle('Quarry4', dx, dy); dy = dy + py;
+	
+	dx = -0.5; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Quarry5', dx, dy); dy = dy + py;
+	createToggle('Quarry6', dx, dy); dy = dy + py;
+	createToggle('Quarry7', dx, dy); dy = dy + py;
+	createToggle('Quarry8', dx, dy); dy = dy + py;
+	createToggle('Quarry9', dx, dy); dy = dy + py;
+	
+	dx = 0.351; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Nem', dx, dy); dy = dy + py;
+	createToggle('Nem1', dx, dy); dy = dy + py;
+	createToggle('Nem2', dx, dy); dy = dy + py;
+	createToggle('Nem3', dx, dy); dy = dy + py;
+	createToggle('Nem4', dx, dy); dy = dy + py;
+	
+	dx = 0.87; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Nem5', dx, dy); dy = dy + py;
+	createToggle('Nem6', dx, dy); dy = dy + py;
+	createToggle('Nem7', dx, dy); dy = dy + py;
+	createToggle('Nem8', dx, dy); dy = dy + py;
+	createToggle('Nem9', dx, dy); dy = dy + py;
+	
+	dx = 1.038; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Nem10', dx, dy); dy = dy + py;
+	createToggle('Nem11', dx, dy); dy = dy + py;
+	createToggle('Nem12', dx, dy); dy = dy + py;
+	createToggle('Nem13', dx, dy); dy = dy + py;
+	createToggle('Nem14', dx, dy); dy = dy + py;
+	
+	dx = 1.213; dy = 1.379; px = 1; py = 0.105; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Nem15', dx, dy); dy = dy + py;
+	createToggle('Nem16', dx, dy); dy = dy + py;
+	createToggle('Nem17', dx, dy); dy = dy + py;
+	createToggle('Nem18', dx, dy); dy = dy + py;
+	createToggle('Nem19', dx, dy); dy = dy + py;
+	
+	dx = 0.239; dy = -0.76; px = 1; py = 0.1905; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('MileStone1', dx, dy); dy = dy + py;
+	createToggle('Milestone2', dx, dy); dy = dy + py;
+	createToggle('MileStone3', dx, dy); dy = dy + py;
+	createToggle('MileStone4', dx, dy); dy = dy + py;
+	createToggle('MileStone5', dx, dy); dy = dy + py;
+	createToggle('MileStone6', dx, dy); dy = dy + py;
+	createToggle('Milestone7', dx, dy); dy = dy + py;
+	createToggle('MileStone8', dx, dy); dy = dy + py;
+	createToggle('MileStone9', dx, dy); dy = dy + py;
+	createToggle('MileStone10', dx, dy); dy = dy + py;
+	
+	dx = -1.333; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Death1', dx, dy); dx = dx + px;
+	createToggle('Death2', dx, dy); dx = dx + px;
+	createToggle('Death3', dx, dy); dx = dx + px;
+	createToggle('Death4', dx, dy); dx = dx + px;
+	createToggle('Death5', dx, dy); dx = dx + px;
+	createToggle('Death6', dx, dy); dx = dx + px;
+	createToggle('Death7', dx, dy); dx = dx + px;
+	createToggle('Death8', dx, dy); dx = dx + px;
+	createToggle('Death9', dx, dy); dx = dx + px;
+	createToggle('Death10', dx, dy); dx = dx + px;
+	createToggle('Death11', dx, dy); dx = dx + px;
+	createToggle('Death12', dx, dy); dx = dx + px;
+	createToggle('Death13', dx, dy); dx = dx + px;
+	createToggle('Death14', dx, dy); dx = dx + px;
+	createToggle('Death15', dx, dy); dx = dx + px;
+	createToggle('Death16', dx, dy); dx = dx + px;
+	createToggle('Death17', dx, dy); dx = dx + px;
+	createToggle('Death18', dx, dy); dx = dx + px;
+	createToggle('Death19', dx, dy); dx = dx + px;
+	
+	dx = -1.333; dy = 2.2; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('Death20', dx, dy); dx = dx + px;
+	createToggle('Death21', dx, dy); dx = dx + px;
+	createToggle('Death22', dx, dy); dx = dx + px;
+	createToggle('Death23', dx, dy); dx = dx + px;
+	createToggle('Death24', dx, dy); dx = dx + px;
+	createToggle('Death25', dx, dy); dx = dx + px;
+	createToggle('Death26', dx, dy); dx = dx + px;
+	createToggle('Death27', dx, dy); dx = dx + px;
+	createToggle('Death28', dx, dy); dx = dx + px;
+	createToggle('Death29', dx, dy); dx = dx + px;
+	createToggle('Death30', dx, dy); dx = dx + px;
+	createToggle('Death31', dx, dy); dx = dx + px;
+	createToggle('Death32', dx, dy); dx = dx + px;
+	createToggle('Death33', dx, dy); dx = dx + px;
+	createToggle('Death34', dx, dy); dx = dx + px;
+	createToggle('Death35', dx, dy); dx = dx + px;
+	createToggle('Death36', dx, dy); dx = dx + px;
+	createToggle('Death37', dx, dy); dx = dx + px;
+	createToggle('Death38', dx, dy); dx = dx + px;
+	
+	dx = 0.09; dy = 2.14; px = 0.065; py = 1; ry = dy --positions with px/py as the distance between each (in horiz and in vertical)
+	createToggle('LS1', dx, dy); dx = dx + px;
+	createToggle('LS2', dx, dy); dx = dx + px;
+	createToggle('LS3', dx, dy); dx = dx + px;
+	createToggle('LS4', dx, dy); dx = dx + px;
+	createToggle('LS5', dx, dy); dx = dx + px;
+	createToggle('LS6', dx, dy); dx = dx + px;
+	createToggle('LS7', dx, dy); dx = dx + px;
+	createToggle('LS8', dx, dy); dx = dx + px;
+	createToggle('LS9', dx, dy); dx = dx + px;
+	createToggle('LS10', dx, dy); dx = dx + px;
+	createToggle('LS11', dx, dy); dx = dx + px;
+	createToggle('LS12', dx, dy); dx = dx + px;
+	createToggle('LS13', dx, dy); dx = dx + px;
+	createToggle('LS14', dx, dy); dx = dx + px;
+	createToggle('LS15', dx, dy); dx = dx + px;
+	createToggle('LS16', dx, dy); dx = dx + px;
+	createToggle('LS17', dx, dy); dx = dx + px;
+	createToggle('LS18', dx, dy); dx = dx + px;
+	createToggle('LS19', dx, dy); dx = dx + px;
+	createToggle('LS20', dx, dy); dx = dx + px;
+   
+   --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+	--make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 100, height = 100, font = 100},
+        button = {width = 50, height = 50, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 200},
+        button = {width = 80, height = 80, font = 100},
+        offsets = { bottomButtons = {x = 0.10, y = 0, z = 0.26}}
+	}
+    buttons.params.sizes.toggle = {
+        display = {width = 17, height = 17, font = 40},
+        button = {width = 20, height = 20, font = 150},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 60},
+        button = {width = 80, height = 30, font = 40},
+        offsets = { bottomButtons = {x = -0.58, y = 0, z = 0.195}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 6, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+
+--loads buttons and gets saved data
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+	
+	--categorize buttons
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+        end
+    end
+    generateButtonParameters()
+
+    --loads saved data if exists
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+	
+	--update display
+    updateDisplay(true)
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = {type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+end
+
+--gets buttons params
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+--creates buttons
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+	local buttonInfo = {}
+	buttonInfo.function_owner = self
+	buttonInfo.index = buttons.index
+	buttonInfo.click_function = targetFunc
+	--reverse things for backside
+	if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+		buttonInfo.rotation = {0,0,180}
+		if offsets != nil then
+			reverse_x = -offsets.x
+		end
+	elseif offsets != nil then
+		reverse_x = offsets.x
+	end
+	--reversed
+	if isLeft then
+		orientationModifier = -1
+	else
+		orientationModifier = 1
+	end
+	if offsets == nil then
+		buttonInfo.position = {positions.x, positions.y, positions.z}
+	else
+		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+	end
+	buttonInfo.width = sizes.width
+	buttonInfo.height = sizes.height
+	buttonInfo.font_size = sizes.font
+	buttonInfo.label = label
+	buttons.index = buttons.index + 1
+	return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            if (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                    buttons[tostring(i)].display.label = "X"
+                else
+                    buttons[tostring(i)].display.label = ""
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then 
+					self.createButton(buttons[tostring(i)].plusOne) 
+				end
+                if (buttons[tostring(i)].minusOne != nil) then 
+					self.createButton(buttons[tostring(i)].minusOne) 
+				end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
+
+---------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+		--buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location) --string.gsub(location, "", "")
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then 
+		return 
+	end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+    ppos = {pos.x + 0.5, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+		if nm == '__survivor_name' then
+			buttons.counts.__b_survivor_name = objs[nm].getDescription()
+			buttons.counts.__b_fam_self = objs[nm].getDescription()
+			self.setName(objs[nm].getDescription())
+		elseif nm == '__b_survivor_name' then
+			buttons.counts.__survivor_name = objs[nm].getDescription()
+			buttons.counts.__b_fam_self = objs[nm].getDescription()
+			self.setName(objs[nm].getDescription())
+		end
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+
+        o = spawnObject({
+            type = 'go_game_piece_black',
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            scale = {1, 1, 1}
+        })
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+--------------------------
+--save when dropped (for dropping into bags)
+--------------------------
+function onDropped()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	self.script_state = saved_data
+end
+
+function onPickedUp()
+	updateDisplay(false)
+end
\ No newline at end of file
diff --git a/beta/Global.-1.lua b/beta/Global.-1.lua
new file mode 100644
index 0000000..24083e1
--- /dev/null
+++ b/beta/Global.-1.lua
@@ -0,0 +1,1892 @@
+--KDM Global Script
+--script created by Eskander
+--script v0.3
+
+----------------------------------------------------------------
+--Globals
+----------------------------------------------------------------
+
+---------------------
+--Edit Prefs
+---------------------
+--unsaved
+bypassSavedLoad = false 	-- used to bypass load init manually
+prologueBypass = true  	--not ready, keep true
+--saved
+clearSavedData = false 		-- used to clear save data
+autoHunt = true		--allows automatic hunt deployment of objects
+autoShowdown = true 	--allows automatic showdown deployment of objects
+autoMonsterDeck = false		--not ready, keep false
+autoDeckRefresh = false		--not ready, keep false
+debug = false		--not ready, keep false
+devMode = false		--changes interactive for static/placeholder objects, toggles rest interactive options below
+interactBox = false 	--makes gamebox interactable if true
+interactPlaceholders = false 	-- makes placeholders interactable if true
+interactStatics = false		--makes static objs interactable if true
+
+---------------------
+--Vars
+---------------------
+--tables
+messages = {
+	msgLine = '__________________________________________',
+	msgBlank = '                                          ',
+	msgPageBreak = '------------------------------------------',
+	msgWelcomeTitle = 'Welcome to KINGDOM DEATH MONSTER.',
+	msgWelcomeSubtitle = "Brought to TTS by Nognoth's consortium.",
+	msgSettingUpHunt1 = 'The survivors have chosen their quarry. A ',
+	msgSettingUpHunt2 = '. The survivors prepare...',
+	msgHuntIsSetup1 = 'The Hunt for the ',
+	msgHuntIsSetup2 = ' awaits.  Prepare any Special Hunt Events and begin.',
+	msgHuntCleared = 'The Hunt is ended. The untaken paths erased.',
+	msgSettingUpShowdown1 = 'Before the survivors stands the ',
+	msgSettingUpShowdown2 = '...',
+	msgShowdownIsSetup = 'The survivors prepare to fight.',
+	msgShowdownCleared = 'The battle ends.  The settlement provides refuge for any that survive.'
+}
+
+boards = {
+	boardHunt = {guid = 'f6a581'},
+	boardMonster = {guid = '24f67c'},
+	boardStoryL = {guid = '40ac46'},
+	boardStoryR = {guid = 'a4960e'},
+boardStoryT = {guid = ' fece67'}
+}
+
+staticObjs = {
+	gameBox = {guid = '93281a'},
+	consoleAdmin = {guid = 'e00199'},
+	decorPlayerL = {guid = 'fc9c14'},
+	decorPlayerR = {guid = 'ef94c5'},
+	decorTableExtension = {guid = '12090a'},
+	decorTableEdgeD = {guid = 'ca277c'},
+	decorTableEdgeL = {guid = '32e351'},
+	decorTableEdgeR = {guid = 'f01594'},
+	decorTableEdgeU = {guid = '80e8da'},
+	decorBackPanelL = {guid = '22cf74'},
+	decorBackPanelR = {guid = 'aee909'},
+	decorBackPlanelSR = {guid = 'cfe52c'},
+	decorBackPlanelSL = {guid = '029e44'},
+	decorUpperTable1 = {guid = '1c9769'},
+	decorUpperTable2 = {guid = '0e954b'},
+	decorUpperTable3 = {guid = 'fee027'},
+	decorUpperTable4 = {guid = '053039'},
+}
+
+placeholders = {
+	--essentialDecks
+	deckBasicHunt = {guid = '4e9d9e'},
+	deckSpecialHunt = {guid = '148b16'},
+	deckAbilities = {guid = '625f68'},
+	deckSecretFightingArs = {guid = 'b6c374'},
+	deckFightingArts = {guid = '515434'},
+	deckDisorders = {guid = '3a5452'},
+	deckStrangeResources = {guid = '7aadc0'},
+	deckBasicResources = {guid = '4b6997'},
+	deckVermin = {guid = '8c28ba'},
+	deckTerrain = {guid = '51b305'},
+	deckSevereInjuries = {guid = '421db1'},
+	--monsterDecks
+	deckMonsterHunt = {guid = 'e80e92'},
+	deckMonsterSpecialHunt = {guid = '1dca94'},
+	deckMonsterResources = {guid = 'f8c095'},
+	deckMonsterAIBasic = {guid = 'be3886'},
+	deckMonsterAIAdvanced = {guid = '3b984a'},
+	deckMonsterAILegendary = {guid = '918627'},
+	deckMonsterAISpecial = {guid = 'da09a1', flip = true},
+	cardMonsterBasicAction = {guid = 'ce146d'},
+	deckMonsterHitLocations = {guid = '24cc56'},
+	--terrainspawn
+	cardTerrain1 = {guid = '15a593', flip = true},
+	cardTerrain2 = {guid = 'ec1cc4', flip = true},
+	cardTerrain3 = {guid = 'fc1740', flip = true},
+	cardTerrain4 = {guid = 'fa7080', flip = true},
+	cardTerrain5 = {guid = 'fe26f3', flip = true},
+	--huntPos
+	cardHunt1 = {guid = '5ba408', flip = true},
+	cardHunt2 = {guid = 'e17cae', flip = true},
+	cardHunt3 = {guid = '29c3c8', flip = true},
+	cardHunt4 = {guid = '0a3d67', flip = true},
+	cardHunt5 = {guid = 'b2af08', flip = true},
+	cardHunt6 = {guid = 'd32460', flip = true},
+	cardHunt7 = {guid = '9bac20', flip = true},
+	cardHunt8 = {guid = 'b344bb', flip = true},
+	cardHunt9 = {guid = 'd1549b', flip = true},
+	cardHunt10 = {guid = 'da6ad7', flip = true},
+	cardHunt11 = {guid = '9ce940', flip = true},
+	cardHunt12 = {guid = '4ac212', flip = true},
+	cardHunt13 = {guid = '5ac354', flip = true},
+}
+
+essentialDecks = {
+	--essential card decks
+	deckBasicHunt = {
+		guid = 'a0bf77',
+		name = 'Basic Hunt Events Deck',
+		description = 'essential, hunt, basic',
+		minCount = 12
+	},
+	deckSpecialHunt = {
+		guid = 'ca5915',
+		name = 'Special Hunt Events Deck',
+		description = 'essential, hunt, special',
+		minCount = 2
+	},
+	deckAbilities = {
+		guid = '092e97',
+		name = 'Abilities Deck',
+		description = 'essential, character, abilities',
+		minCount = 45
+	},
+	deckSecretFightingArs = {
+		guid = 'd08a37',
+		name = 'Secret Fighting Arts Deck',
+		description = 'essential, character, fighting art, secret',
+		minCount = 6
+	},
+	deckFightingArts = {
+		guid = '48e0af',
+		name = 'Fighting Arts Deck',
+		description = 'essential, character, fighting art',
+		minCount = 20
+	},
+	deckDisorders = {
+		guid = 'bd1ee8',
+		name = 'Disorders Deck',
+		description = 'essential, character, disorder',
+		minCount = 23
+	},
+	deckStrangeResources = {
+		guid = '697d92',
+		name = 'Strange Resources Deck',
+		description = 'essential, resource, strange',
+		minCount = 21
+	},
+	deckBasicResources = {
+		guid = '6668a5',
+		name = 'Basic Resources Deck',
+		description = 'essential, resource, basic',
+		minCount = 21
+	},
+	deckVermin = {
+		guid = '19d17b',
+		name = 'Vermin Deck',
+		description = 'essential, vermin',
+		minCount = 8
+	},
+	deckTerrain = {
+		guid = '4f9528',
+		name = 'Terrain Deck',
+		description = 'essential, terrain card',
+		minCount = 21
+	},
+	deckSevereInjuries = {
+		guid = '5be3e9',
+		name = 'Severe Injuries Deck',
+		description = 'essential, character, psi',
+		minCount = 18
+	},
+}
+
+	--added monster decks
+monsterDecks = {
+	deckMonsterHunt = {
+		name = '__ Hunt Events Deck',
+	},
+	deckMonsterSpecialHunt = {
+		name = '__ Special Hunt Events Deck',
+	},
+	deckMonsterResources = {
+		name = '__ Resources Deck',
+	},
+	deckMonsterAIBasic = {
+		name = '__ Basic AI Deck',
+	},
+	deckMonsterAIAdvanced = {
+		name = '__ Advanced AI Deck',
+	},
+	deckMonsterAILegendary = {
+		name = '__ Legendary AI Deck',
+	},
+	deckMonsterAISpecial = {
+		name = '__ Special AI Deck',
+	},
+	cardMonsterBasicAction = {
+		name = '__ Basic Action Card',
+	},
+	deckMonsterHitLocations = {
+		name = '__ Hit Locations Deck',
+	},
+}
+
+zones = {
+	zoneAll = {guid ='fc5df0'},
+	--general areas
+	zoneMain = {guid = 'f7d522'},
+	zoneHunt = {guid = '8fdea1'},
+	zoneSettlement = {guid = '000000'},
+	zoneSurvivors = {guid = '83dc7e'},
+	--specific areas
+	zoneStoryL = {guid = 'df9ce3'},
+	zoneStoryR = {guid = '7ede24'},
+	zoneStoryT = {guid = '6097d8'},
+	zoneP1 = {guid = '000000'},
+	zoneP2 = {guid = '000000'},
+	zoneP3 = {guid = '000000'},
+	zoneP4 = {guid = '000000'},
+	--essential decks
+	deckBasicHunt = {guid = '9e8411'},
+	deckSpecialHunt = {guid = '9b055d'},
+	deckAbilities = {guid = 'fd06c1'},
+	deckSecretFightingArs = {guid = 'c0437f'},
+	deckFightingArts = {guid = 'ad419f'},
+	deckDisorders = {guid = '682896'},
+	deckStrangeResources = {guid = '7c3e97'},
+	deckBasicResources = {guid = '405bff'},
+	deckVermin = {guid = '5cccc8'},
+	deckTerrain = {guid = '09fd7e'},
+	deckSevereInjuries = {guid = 'b29037'}
+}
+
+currentQuarryTable = {'null'}
+currentShowdownTable = {'null'}
+
+--vars
+--[[ INACTIVE, placeholders used instead
+offsetXHuntCards = {-27.5,-22.92,-18.3,-13.75,-9.17,-4.58,0,4.58,9.17,13.75,18.3,22.92,27.5}
+offsetScaleHuntBoard = 0.425000429
+--]]
+
+--tracking
+--always saved
+firstGameLoad = true
+currentHuntLevel = 1
+currentShowdownLevel = 1
+--saved unless cleared
+huntInProgress = false
+huntSettingUp = false
+showdownInProgress = false
+showdownSettingUp = false
+cancelHuntSetup = false
+monsterFigurinePlaced = nil
+monsterResourcePlaced = false
+monsterResourceToBePlace = false
+cancelShowdownSetup = false
+huntCleaning = false
+showdownCleaning = false
+huntCleanPending = false
+showdownCleanPending = false
+
+
+--Colors
+rgbWhite = {1,1,1}
+rgbBlack = {0,0,0}
+rgbDarkRed = {0.8,0,0}
+rgbError = {1,0,0}
+rgbSystem = {0,1,0}
+rgbNarrator = {0.3,0.6,0.8}
+
+
+---------------------
+--Save data
+---------------------
+function onSave()
+    local dataToSave = {}
+
+	if clearSavedData == false then
+		dataToSave = {
+			['clearSavedData'] = clearSavedData,
+			['autoHunt'] = autoHunt,
+			['autoShowdown'] = autoShowdown,
+			['autoMonsterDeck'] = autoMonsterDeck,
+			['autoDeckRefresh'] = autoDeckRefresh,
+			['debug'] = debug,
+			['devMode'] = devMode,
+			['interactBox'] = interactBox,
+			['interactPlaceholders'] = interactPlaceholders,
+			['interactStatics'] = interactStatics,
+			['currentQuarryTable'] = currentQuarryTable,
+			['currentShowdownTable'] = currentShowdownTable,
+			['firstGameLoad'] = firstGameLoad,
+			['currentHuntLevel'] = currentHuntLevel,
+			['currentShowdownLevel'] = currentShowdownLevel,
+			['huntInProgress'] = huntInProgress,
+			['huntSettingUp'] = huntSettingUp,
+			['showdownInProgress'] = showdownInProgress,
+			['showdownSettingUp'] = showdownSettingUp,
+			['cancelHuntSetup'] = cancelHuntSetup,
+			['monsterFigurinePlaced'] = monsterFigurinePlaced,
+			['monsterResourcePlaced'] = monsterResourcePlaced,
+			['monsterResourceToBePlace'] = monsterResourceToBePlace,
+			['cancelShowdownSetup'] = cancelShowdownSetup,
+			['huntCleaning'] = huntCleaning,
+			['showdownCleaning'] = showdownCleaning,
+			['huntCleanPending'] = huntCleanPending,
+			['showdownCleanPending'] = showdownCleanPending,
+		}
+	else
+		dataToSave = {
+			['clearSavedData'] = clearSavedData,
+			['autoHunt'] = autoHunt,
+			['autoShowdown'] = autoShowdown,
+			['autoMonsterDeck'] = autoMonsterDeck,
+			['autoDeckRefresh'] = autoDeckRefresh,
+			['debug'] = debug,
+			['devMode'] = devMode,
+			['interactBox'] = interactBox,
+			['interactPlaceholders'] = interactPlaceholders,
+			['interactStatics'] = interactStatics,
+			['firstGameLoad'] = firstGameLoad,
+			['currentQuarryTable'] = currentQuarryTable,
+			['currentShowdownTable'] = currentShowdownTable,
+			['currentHuntLevel'] = currentHuntLevel,
+			['currentShowdownLevel'] = currentShowdownLevel,
+		}
+	end
+
+	saved_data = JSON.encode(dataToSave)
+
+	--Uncomment this line to manually clear the save data
+	--saved_data = ''
+
+    return saved_data
+end
+
+----------------------------------------------------------------
+--Initialize
+----------------------------------------------------------------
+
+function onLoad(saved_data)
+	----------------------------initial chat messages
+	printToAll(messages.msgLine,rgbBlack)
+	printToAll(messages.msgBlank,rgbBlack)
+	printToAll(messages.msgWelcomeTitle,rgbDarkRed)
+	printToAll(messages.msgWelcomeSubtitle,rgbWhite)
+	printToAll(messages.msgLine,rgbBlack)
+
+	--load saved from previous session
+	if bypassSavedLoad == false then
+		if saved_data != '' then
+			resumeLoadInit(saved_data)
+		else
+			clearSavedData = false
+		end
+	end
+
+	--------------------------------always init
+	--[[deactivated
+	--clear deprecated zones
+	local objs = getAllObjects()
+	local protected = false
+	for k,v in pairs (objs) do
+		if v.tag == 'Scripting' then
+			protected = false
+			for j, h in pairs (zones) do
+				if h.guid == v.guid then
+					protected = true
+				end
+			end
+			if protected == false then
+				v.destruct()
+			end
+		end
+	end
+	--]]
+	
+	------------------admin move/resize zones, normally disabled
+	--[[--]]
+	local zone = getObjectFromGUID(zones.zoneAll.guid)
+	local pos = zone.getPosition()
+	local adjPos = zone.setPosition({pos[1], 10, pos[3]})
+	local scale = zone.getScale()
+	zone.setScale({scale[1], 20, scale[3]})
+	zone = getObjectFromGUID(zones.zoneHunt.guid)
+	pos = zone.getPosition()
+	adjPos = zone.setPosition({pos[1], 10, pos[3]})
+	scale = zone.getScale()
+	zone.setScale({scale[1], 20, scale[3]})
+	zone = getObjectFromGUID(zones.zoneMain.guid)
+	pos = zone.getPosition()
+	adjPos = zone.setPosition({pos[1], 10, pos[3]})
+	scale = zone.getScale()
+	zone.setScale({scale[1], 20, scale[3]})
+	zone = getObjectFromGUID(zones.zoneSurvivors.guid)
+	pos = zone.getPosition()
+	adjPos = zone.setPosition({pos[1], 10, pos[3]})
+	scale = zone.getScale()
+	zone.setScale({scale[1], 20, scale[3]})
+	zone = getObjectFromGUID(zones.zoneAll.guid)
+	pos = zone.getPosition()
+	adjPos = zone.setPosition({pos[1], 10, pos[3]})
+	scale = zone.getScale()
+	zone.setScale({scale[1], 20, scale[3]})
+	
+	
+	
+	-----------------load essential obj refs
+	gameBox = getObjectFromGUID(staticObjs.gameBox.guid)
+	consoleAdmin = getObjectFromGUID(staticObjs.consoleAdmin.guid)
+
+
+	
+	--[[deactivated
+	--update essential obj zones
+	for k,v in pairs(placeholders) do
+		local obj = getObjectFromGUID(v.guid)
+		local rot = obj.getRotation()
+		local pos = obj.getPosition()
+		zones[k] = spawnObject({
+			type = 'ScriptingTrigger',
+			position = pos,
+			rotation = rot,
+			scale = {3, 3, 3}
+		})
+	end
+	--]]
+
+	---------------load prefs
+	if devMode == true then
+		devModeOn()
+	else
+		devModeOff()
+	end
+	if interactBox == true then
+		unlockGameBox()
+	else
+		lockGameBox()
+	end
+	if interactPlaceholders == true then
+		unlockPlaceholders()
+	else
+		lockPlaceholders()
+	end
+	if interactStatics == true then
+		unlockStatics()
+	else
+		lockStatics()
+	end
+
+	--prologue setup load, not ready yet
+	if prologueBypass == false and firstGameLoad == true then
+		prologueInit()
+	elseif firstGameLoad == true then
+		firstGameLoad = false
+		bypassPrologueLoad()
+	else
+		fullLoadInit()
+	end
+end
+
+-----------------------------------------loads saved vars from previous session
+function resumeLoadInit(saved_data)
+	local dataToLoad = JSON.decode(saved_data)
+	clearSavedData = dataToLoad.clearSavedData
+	autoHunt = dataToLoad.autoHunt
+	autoShowdown = dataToLoad.autoShowdown
+	autoMonsterDeck = dataToLoad.autoMonsterDeck
+	autoDeckRefresh = dataToLoad.autoDeckRefresh
+	debug = dataToLoad.debug
+	devMode = dataToLoad.devMode
+	interactBox = dataToLoad.interactBox
+	interactPlaceholders = dataToLoad.interactPlaceholders
+	interactStatics = dataToLoad.interactStatics
+	firstGameLoad = dataToLoad.firstGameLoad
+	currentQuarryTable = dataToLoad.currentQuarryTable
+	currentShowdownTable = dataToLoad.currentShowdownTable
+	currentHuntLevel = dataToLoad.currentHuntLevel
+	currentShowdownLevel = dataToLoad.currentShowdownLevel
+	if clearSavedData == false then
+		huntInProgress = dataToLoad.huntInProgress
+		huntSettingUp = dataToLoad.huntSettingUp
+		showdownInProgress = dataToLoad.showdownInProgress
+		showdownSettingUp = dataToLoad.showdownSettingUp
+		cancelHuntSetup = dataToLoad.cancelHuntSetup
+		monsterFigurinePlaced = dataToLoad.monsterFigurinePlaced
+		monsterResourcePlaced = dataToLoad.monsterResourcePlaced
+		monsterResourceToBePlace = dataToLoad.monsterResourceToBePlace
+		cancelShowdownSetup = dataToLoad.cancelShowdownSetup
+		huntCleaning = dataToLoad.huntCleaning
+		showdownCleaning = dataToLoad.showdownCleaning
+		huntCleanPending = dataToLoad.huntCleanPending
+		showdownCleanPending = dataToLoad.showdownCleanPending
+	else
+		clearSavedData = false
+	end
+end
+
+
+
+--------------------------------loads only prologue setup, currently not ready
+function prologueInit()
+	printToAll('Choose how to proceed. Choose wisely.', rgbNarrator)
+	--gameBox2 = getObjectFromGUID('')
+end
+
+--------------------------------loads all assets that would be loaded in stages during prologue
+function bypassPrologueLoad()
+	fullLoadInit()
+end
+
+-----------------------------------------loads normal full init
+function fullLoadInit()
+	--board ref
+	boardHunt = getObjectFromGUID(boards.boardHunt.guid)
+	boardMonster = getObjectFromGUID(boards.boardMonster.guid)
+
+end
+
+
+----------------------------------------------------------------
+--Prologue setup
+----------------------------------------------------------------
+
+--triggered by bypass button press, players read the intro story, guided on state change for manuals
+function prologue1()
+	--move manual gamebox, setscale difference
+	gameBox2.setPosition({30,10,30})
+	gameBox2.setScale({1,1,1})
+	--get bag of prologue items
+	prologueBag = gameBox2.takeObject({guid = '',position = {0,0,-30},rotation = {0,0,0}})
+	prologueBag.lock()
+	--spawn prologue book
+	prologueBag.takeObject({guid = '',position = {0,0,0},rotation ={0,0,0}})
+	--spawn guide for state change
+	prologueBag.takeObject({guid = '',position = {0,0,10},rotation ={0,0,0}})
+	--spawn essential decks
+	sstartLuaCoroutine(Global, 'spawnEssentials1Coroutine')
+end
+
+function spawnEssentials1Coroutine()
+	local decks = {}
+	local d = 1
+	for k, v in pairs(essentialDecks) do
+		local params = {}
+		params.guid = v.guid
+		local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
+		params.position = {pos[1],pos[2] + 2,pos[3]}
+		params.rotation = getObjectFromGUID(placeholders[k].guid).getRotation()
+		decks[d] = prologueBag.takeObject(params)
+		d = d + 1
+		for i=1, 30 do
+			coroutine.yield(0)
+		end
+	end
+	for k, v in pairs(decks) do
+		v.shuffle()
+	end
+	return 1
+end
+
+
+--triggered by state change to char gen page, players introed to char stations and set char names
+function prologue2()
+	--load player stations,starting gear, figurines, stat tokens, and sheet bags
+	--spawn guides for sheets
+	--spawn manual for create char
+end
+
+--triggered by state change on last story page, players introed to showdown setup
+function prologue3()
+	--load lion statue, showdown setup story book, other needed story books
+	--load guides for setting up showdown
+	--load manual for conducting showdown
+end
+
+--triggered by showdown cleanup, players introed to settlement phase
+function prologue4()
+	--spawn settlement board, settlement sheets, settlement guides, settlement story books, innovations board, settlement upgrades
+end
+
+--triggered by??
+function prologue5()
+	--spawn hunt board, hunt guide, hunt etc
+end
+
+
+
+
+----------------------------------------------------------------
+--Admin Console
+----------------------------------------------------------------
+
+function showAdmin()
+	local params = {0, 10, 0}
+	consoleAdmin.setPosition(params)
+	consoleAdmin.interactable = true
+	consoleAdmin.setRotation({0,180,0})
+end
+
+function togglePlaceholders()
+	if interactPlaceholders == false then
+		unlockPlaceholders()
+	else
+		lockPlaceholders()
+	end
+end
+
+function lockPlaceholders()
+	for k,v in pairs(placeholders) do
+		local obj = getObjectFromGUID(v.guid)
+		if obj != nil then
+			obj.tooltip = false
+			obj.lock()
+			obj.interactable = false
+		end
+	end
+	interactPlaceholders = false
+end
+
+function unlockPlaceholders()
+	for k,v in pairs(placeholders) do
+		local obj = getObjectFromGUID(v.guid)
+		if obj != nil then
+			obj.tooltip = true
+			obj.unlock()
+			obj.interactable = true
+		end
+	end
+	interactPlaceholders = true
+end
+
+function toggleGameBox()
+	if gameBox.interactable == true then
+		gameBox.interactable = false
+		interactBox = false
+	else
+		gameBox.interactable = true
+		interactBox = true
+	end
+end
+
+function unlockGameBox()
+	gameBox.interactable = true
+	interactBox = true
+end
+
+function lockGameBox()
+	gameBox.interactable = false
+	interactBox = false
+end
+
+function devModeOn()
+	unlockGameBox()
+	unlockPlaceholders()
+	unlockStatics()
+	devMode = true
+end
+
+function devModeOff()
+	lockGameBox()
+	lockPlaceholders()
+	lockStatics()
+	devMode = false
+end
+
+function toggleDevMode()
+	if devMode == true then
+		devModeOff()
+	elseif devMode == false then
+		devModeOn()
+	end
+end
+
+
+function unlockStatics()
+	for k, v in pairs(staticObjs) do
+		if k != gameBox or k != consoleAdmin then
+			local object = getObjectFromGUID(v.guid)
+			object.interactable = true
+		end
+	end
+	interactStatics = true
+end
+
+function lockStatics()
+	for k, v in pairs(staticObjs) do
+		if k != gameBox or k != consoleAdmin then
+			local object = getObjectFromGUID(v.guid)
+			object.interactable = false
+		end
+	end
+	interactStatics = false
+end
+
+function toggleAutoHunt()
+	if autoHunt == true then
+		autoHunt = false
+	elseif autoHunt == false then
+		autoHunt = true
+	end
+end
+
+function toggleAutoShowdown()
+	if autoShowdown == true then
+		autoShowdown = false
+	elseif autoShowdown == false then
+		autoShowdown = true
+	end
+end
+
+function toggleAutoMonsterDeck()
+	if autoMonsterDeck == true then
+		autoMonsterDeck = false
+	elseif autoMonsterDeck == false then
+		autoMonsterDeck = true
+	end
+end
+
+function toggleAutoDeckRefresh()
+	if deckRefresh == true then
+		deckRefresh = false
+	elseif deckRefresh == false then
+		deckRefresh = true
+	end
+end
+
+
+
+----------------------------------------------------------------
+--Common Utility Functions
+----------------------------------------------------------------
+
+--[[ ------------------------------custom get obj fcn, searches for obj(s) through custom searches
+types of search and params
+tag = search for objs by tags, includes/excludes, params = {conditional = 'and' or 'or', criteria = string looked for, exclude = strings to exclude obj if found}
+name = search for objs by name, with varying strings, params = {conditional = 'contains' or 'matches', criteria = string looked for, exclude = strings to exclude obj if found}
+--]]
+function getObj(searchType, container, params)  --params = {conditional = '', criteria = {}, exclude = {}}
+	if container != nil then
+		local containerType = container.tag
+		local objs = container.getObjects()
+		local objGUIDs = {}
+		local text = {}
+		local excludes = params.exclude
+		local includes = params.criteria
+		local objAdded = false
+		local isFound = false
+		local foundCount = 0
+		if searchType ==  'tag' then
+			for k, v in pairs(objs) do
+				objAdded = false
+				isFound = false
+				foundCount = 0
+				text = v.getDescription()
+				for i = 1, #includes do
+					if string.find(string.lower(text), string.lower(includes[i])) then
+						foundCount = foundCount + 1
+					end
+				end
+				if params.conditional == 'and' then
+					if foundCount == #includes then
+						isFound = true
+					end
+				elseif params.conditional == 'or' then
+					if foundCount > 0 then
+						isFound = true
+					end
+				end
+				if isFound == true then
+					table.insert(objGUIDs, v.getGUID())
+					objAdded = true
+				end
+				isFound = false
+				if #excludes > 0 then
+					for i = 1, #excludes do
+						if string.find(string.lower(text), string.lower(excludes[i])) then
+							isFound = true
+						end
+					end
+					if objAdded == true and isFound == true then
+						table.remove(objGUIDs)
+					end
+				end
+			end
+		elseif searchType == 'name' then
+			for k, v in pairs(objs) do
+				objAdded = false
+				isFound = false
+				if containerType == 'Bag' then
+					text = v.name
+				elseif containerType == 'Deck' then
+					text = v.nickname
+				else
+					text = v.getName()
+				end
+				for i = 1, #includes do
+					if params.conditional == 'matches' then
+						if text == includes[i] then
+							isFound = true
+						end
+
+					elseif params.conditional == 'contains' then
+						if string.find(text, includes[i]) then
+							isFound = true
+						end
+					end
+					if isFound == true then
+						table.insert(objGUIDs, v.guid)
+						objAdded = true
+					end
+				end
+				isFound = false
+				if #excludes > 0 then
+					for i = 1, #excludes do
+						if params.conditional == 'matches' then
+							if text == excludes[i] then
+								isFound = true
+							end
+						elseif params.conditional == 'contains' then
+							if string.find(text, excludes[i]) then
+								isFound = true
+							end
+						end
+					end
+					if objAdded == true and isFound == true then
+						table.remove(objGUIDs)
+					end
+				end
+			end
+		end
+		if #objGUIDs > 0 then
+			local obj = {}
+			if containerType == 'Bag' or containerType == 'Deck' then
+				obj = objGUIDs
+			else
+				for i=1,#objGUIDs do
+					obj[i] = getObjectFromGUID(objGUIDs[i])
+				end
+			end
+			return obj
+		else
+			return nil
+		end
+	else
+		printToAll('Container not found!',rgbError)
+	end
+end
+
+----------------------spawn from box
+function spawnFromBox(objects, paramsOverride)
+	local dy = 0
+	local dz = 120
+	local py = 2
+	local pz = -3
+	local params = {}
+	local params2 = {}
+	local result = {}
+	local result2 = {}
+	local container = gameBox
+	for k,v in pairs(objects) do
+		--set params
+		if paramsOverride != nil then
+			params.position = paramsOverride.position
+			params.rotation = paramsOverride.rotation
+		else
+			local placeholder = getObjectFromGUID(placeholders[k].guid)
+			params.position = placeholder.getPosition()
+			params.rotation = placeholder.getRotation()
+			if placeholders[k].flip != nil then
+				if placeholders[k].flip == true then
+					params.rotation.z = 0
+				end
+			end
+		end
+		params.position[2] = params.position[2] + 5
+		params.guid = v
+		--take
+		result[k] = container.takeObject(params)
+		--dupe
+		coroutine.yield(0)
+		if result[k] != nil then
+			dz = dz + pz
+			dy = dy + py
+			params2.position = gameBox.getPosition()
+			params2.position.z = params2.position.z + dz
+			result2[k] = duplicate(result[k], params2)
+			for i=1,45,1 do
+				coroutine.yield(0)
+			end
+			params2.position = gameBox.getPosition()
+			params2.position.y = params2.position.y + dy
+			result2[k].setPositionSmooth(params2.position)
+			for i=1,45,1 do
+				coroutine.yield(0)
+			end
+			--if result[k].tag == 'Deck' then
+				--result[k].shuffle()
+			--end
+			--coroutine.yield(0)
+		else
+			printToAll(k .. ' not found! Check component in Master Game Box or remove excess decks on placeholder.', rgbError)
+		end
+	end
+	return result
+end
+
+
+-------------------duplicate object
+function duplicate(object, params)
+	if object != nil then
+		return object.clone(params)
+	else
+		return nil
+	end
+end
+
+
+
+-------------------clear objs
+function cleanup(searchType, container, params)
+	local killList = getObj(searchType, container, params)
+	if killList != nil or killList != null then
+		for k,v in pairs(killList) do
+			v.destruct()
+		end
+		return true
+	else
+		return false
+	end
+end
+
+---------------------findDeck or card
+function findDeck(zone)
+	local isDeck = false
+	local obj = {}
+	local deck = {}
+	local card = {}
+	local objs = zone.getObjects()
+	for k, v in pairs(objs) do
+		if string.find(v.tag,'Deck') then
+			isDeck = true
+			deck = v
+		elseif string.find(v.tag, 'Card') then
+			isDeck = false
+			card = v
+		end
+	end
+	local foundDeck = {}
+	if isDeck == true then
+		foundDeck = {deck, 'Deck'}
+		return foundDeck
+	elseif isDeck == false and card != nil then
+		foundDeck = {card, 'Card'}
+		return foundDeck
+	else
+		return nil
+	end
+end
+
+---------------------trig calc
+function trig(obj, distance)
+    local r = obj.getRotation()[2]
+    r = math.rad(r)
+    return {distance * math.cos(r), 0, distance * math.sin(r)}
+end
+
+
+---------------------findPos
+function findPos(var)
+	local guid =  placeholder[var].guid
+	local placeholder = getObjectFromGUID(guid)
+	local params = {}
+	if placeholder != nil or null then
+		local pos = placeholder.getPosition()
+		local rot = placeholder.getRotation()
+		params = {position = pos, rotation = rot}
+		return params
+	else
+		printToAll('Placeholder not found.', rgbError)
+		return nil
+	end
+end
+
+-----------------------check counts of essential objs
+function checkSumEssentials(table, var)
+	local checkSumPass = nil
+	if getObjectFromGUID(table[var].guid) != nil then
+		object = getObjectFromGUID(table[var].guid)
+		if object.getQuantity() < table[var].minCount then
+			checkSumPass = false
+			printToAll('Checksum on ' .. var .. ' failed.  Missing ' .. table[var].minCount - object.getQuantity() .. ' components...', rgbSystem)
+		else
+			checkSumPass = true
+		end
+	end
+	return checkSumPass
+end
+
+----------------------check essential decks -- checks decks by guid, returns table of [1]good decks and [2]broken decks by var
+function checkEssentialDecks(deckVars)
+	local decksToCheck = {}
+	local decksBroken = {}
+	local decksGood = {}
+	if deckVars != nil then
+		decksToCheck = deckVars
+	else
+		for k, v in pairs(essentialDecks) do
+			table.insert(decksToCheck, k)
+		end
+	end
+	for k,v in pairs(decksToCheck) do
+		local guid = essentialDecks[v].guid
+		if getObjectFromGUID(guid) == nil then
+			table.insert(decksBroken, v)
+		else
+			table.insert(decksGood, v)
+		end
+	end
+	local result = {decksGood, decksBroken}
+	return result
+end
+
+
+--------------------reset essential decks --gets deck by guid, resets, and checks count, returns true if meets count, false if not, and nil if no deck
+function resetEssentialDeck(deckVar)
+	local deck = getObjectFromGUID(essentialDecks[deckVar].guid)
+	local reset = false
+	if deck != nil then
+		deck.reset()
+		for i=1, 60 do
+			coroutine.yield(0)
+		end
+		local count = deck.getQuantity()
+		if count < essentialDecks[deckVar].minCount then
+			reset = false
+		else
+			reset = true
+		end
+	else
+		reset = nil
+	end
+	return reset
+end
+
+---------------------reconstruct essential decks --attempts to repair by getting all the cards to manually reset deck without changing deck
+function reconstructEssentialDeck(deckVar, zoneVar)
+	local reconstructed = false
+	local zone = {}
+	if zoneVar == nil then
+		zone = getObjectFromGUID(zones.zoneMain.guid)
+	else
+		zone = getObjectFromGUID(zones[zoneVar].guid)
+	end
+	local description = essentialDecks[deckVar].description
+	local nospaces = string.gsub(description, ' ', '')
+	local tags = {}
+	for i in string.gmatch(nospaces, '%a+') do
+		table.insert(tags, i)
+	end
+	local cards = getObj('tag',zone,{conditional = 'and', criteria = tags, exclude = {}})
+	local newDeck = {}
+	if cards != nil then
+		local i = 0
+		for k,v in pairs(cards) do
+			if v.tag != 'Deck' then
+				i=i+1
+				local pos = getObjectFromGUID(placeholders[deckVar].guid).getPosition()
+				local rot = getObjectFromGUID(placeholders[deckVar].guid).getRotation()
+				v.setPositionSmooth({pos[1],pos[2] + i+1,pos[3]})
+				v.setRotationSmooth(rot)
+			end
+		end
+		for i=1,120 do
+			coroutine.yield(0)
+		end
+	end
+	--rename/retag deck
+	local result = findDeck(getObjectFromGUID(zones[deckVar].guid))
+	if result[2] == 'Deck' then
+		local deck = result[1]
+		if deck != nil then
+			deck.setName(essentialDecks[deckVar].name)
+			deck.setDescription(essentialDecks[deckVar].description)
+			deck.tooltip = false
+			essentialDecks[deckVar].guid = deck.getGUID()
+			reconstructed = true
+		end
+	end
+	return reconstructed
+end
+
+----------------------respawn essential deck
+function respawnEssentialDeck(deckVar)
+	--purge existing
+	local description = essentialDecks[deckVar].description
+	local nospaces = string.gsub(description, ' ', '')
+	local tags = {}
+	for i in string.gmatch(nospaces, '%a+') do
+		table.insert(tags, i)
+	end
+	local zone = getObjectFromGUID(zones.zoneHunt.guid)
+	cleanup('tag',zone,{conditional = 'and', criteria = tags, exclude = {'drawn'}})
+	coroutine.yield(0)
+	--spawn new
+	local result = {}
+	local getDeck = getObj('name',gameBox, {conditional = 'matches',criteria = {essentialDecks[deckVar].name}, exclude = {}})
+	for k,v in pairs(getDeck) do
+		result[deckVar] = v
+	end
+	local deck = spawnFromBox(result, nil)
+	for i=1, 30 do
+		coroutine.yield(0)
+	end
+	deck[deckVar].shuffle()
+	essentialDecks[deckVar].guid = deck[deckVar].guid
+end
+
+------------------debug essential decks
+function debugEssentialDecks(deckVars)
+	--identify bad decks
+	local checkPass = false
+	local checkedDecks = checkEssentialDecks(deckVars)
+	local badDecks = {}
+	local decksBroken = {}
+	local checkSum = nil
+	local decksBroken = checkedDecks[2]
+	if #decksBroken > 0 then
+		for k,v in pairs(checkedDecks[2]) do
+			table.insert(badDecks, v)
+		end
+	end
+	local decksGood = {}
+	local decksGood = checkedDecks[1]
+	if #decksGood > 0 then
+		for k,v in pairs(decksGood) do
+			checkSum = checkSumEssentials(essentialDecks, v)
+			if checkSum == false then
+				table.insert(badDecks, v)
+			end
+		end
+	end
+	local checkFail = false
+	if #badDecks < 1 then
+		checkPass = true
+	else
+		printToAll('Essential Deck failure. Attempting to repair...',rgbSystem)
+		--attempt repair
+		for k, v in pairs(badDecks) do
+			local deckVar = v
+			--printToAll(deckVar .. ' resetting...',rgbSystem)
+			local reset = resetEssentialDeck(deckVar)
+			if reset == false or reset == nil then
+				local fixed = false
+				--printToAll(deckVar .. ' reset failed...',rgbSystem)
+				--printToAll(deckVar .. ' reconstructing...',rgbSystem)
+				local reconstructed = reconstructEssentialDeck(deckVar, 'zoneMain')
+				if reconstructed == true then
+					--printToAll(deckVar .. ' reconstructed. Checksum...',rgbSystem)
+					for i=1,60 do
+						coroutine.yield(0)
+					end
+					checkSum = checkSumEssentials(essentialDecks, deckVar)
+					if checkSum == true then
+						fixed = true
+					end
+				else
+					--printToAll(deckVar .. ' reconstruct failed...',rgbSystem)
+				end
+				if fixed == false then
+					--printToAll(deckVar .. ' respawning from archive...',rgbSystem)
+					local deck = respawnEssentialDeck(deckVar)
+					--printToAll(deckVar .. ' respawned...',rgbSystem)
+					fixed = true
+				end
+			else
+				--printToAll(deckVar .. ' has reset...',rgbSystem)
+			end
+			--printToAll(deckVar .. ' final checksum...',rgbSystem)
+			checkSum = checkSumEssentials(essentialDecks, deckVar)
+			if checkSum == nil or checkSum == false then
+				printToAll('Automated debug of Essential Deck ' .. deckVar .. 'failed! Repair manually.', rgbError)
+				checkFail = true
+			end
+		end
+		if checkFail == true then
+			checkPass = false
+		else
+			checkPass = true
+		end
+		if checkPass == true then
+			printToAll('Repair successful.',rgbSystem)
+		end
+	end
+	debuggingDecks = false
+
+	return checkPass
+end
+
+
+----------------------------------------------------------------
+--Features Functions
+----------------------------------------------------------------
+
+----------------------
+--AutoHunt
+----------------------
+
+
+--------launcher
+function setupHunt(monsterTable)
+	if huntInProgress == false and huntSettingUp == false and autoHunt == true and showdownInProgress == false and showdownSettingUp == false then
+		if monsterTable != nil then
+			currentQuarryTable = monsterTable
+		end
+		if currentQuarryTable.huntCardPlacement == nil or currentQuarryTable.huntLocation == nil then
+			printToAll(currentQuarryTable.monster .. ' cannot be hunted. ' .. currentQuarryTable.monster .. ' hunts you!', rgbError )
+			currentQuarryTable = nil
+		else
+			if showdownSettingUp == true or showdownCleaning == true then
+				if huntSetupPending != true then
+					huntSetupPending = true
+					startLuaCoroutine(Global, 'huntStandbyCoroutine')
+				end
+			else
+				huntSettingUp = true
+				if monsterResourcePlaced == true then
+					local zone = getObjectFromGUID(zones.zoneHunt.guid)
+					cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {}})
+					monsterResourcePlaced = false
+				end
+				startLuaCoroutine(Global,'setupHuntCoroutine')
+			end
+		end
+	elseif huntInProgress == true or huntSettingUp == true then
+			printToAll('A Hunt is already in progress!',rgbError)
+	elseif showdownInProgress == true or showdownSettingUp == true then
+			printToAll('A Showdown is already in progress!',rgbError)
+	end
+end
+
+function huntStandbyCoroutine()
+	while showdownSettingUp == true do
+		coroutine.yield(0)
+	end
+	while showdownCleaning == true do
+		coroutine.yield(0)
+	end
+	for i=1, 30 do
+		coroutine.yield(0)
+	end
+	huntSetupPending = false
+	setupHunt()
+	return 1
+end
+
+
+-----------coroutine
+function setupHuntCoroutine()
+	local huntTable = currentQuarryTable
+	local monster = huntTable.monster
+	
+	printToAll(messages.msgSettingUpHunt1 .. monster .. messages.msgSettingUpHunt2, rgbNarrator)
+
+	--find components to spawn
+	local container = gameBox
+	local componentsToGet = {
+		deckMonsterHunt = {monster, 'Hunt Events Deck', 'matches'},
+		deckMonsterResources = {monster, 'Resources Deck', 'matches'},
+		deckMonsterSpecialHunt = {monster, 'Special Hunt Events Deck', 'matches'},
+	}
+	local result = {}
+	local result2 = {}
+	for k,v in pairs(componentsToGet) do
+		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
+		if result[k] != nil then
+			for j, h in pairs(result) do
+				result2[k] = h[1]
+			end
+		else
+			if k == 'deckMonsterSpecialHunt' or k == 'deckMonsterResources' then
+			else
+				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
+				cancelHuntSetup = true
+			end
+		end
+	end
+
+	--spawn components
+	if cancelHuntSetup == false then
+		local objects = {}
+		local objects = spawnFromBox(result2, nil)
+		local decks = {}
+		for k,v in pairs(objects) do
+
+			if v.tag == 'Deck' then
+				decks[k] = v
+			end
+		end
+		for k, v in pairs(decks) do
+			v.shuffle()
+		end
+		--wait for cards to settle
+		for i=1,30,1 do
+			coroutine.yield(0)
+		end
+		monsterResourcePlaced = true
+
+
+		--check essential decks
+		debuggingDecks = true
+		local essential = {'deckBasicHunt','deckSpecialHunt'}
+		local checkPass = debugEssentialDecks(essential)
+		while debuggingDecks == true do
+			coroutine.yield(1)
+		end
+		if checkPass != true then
+			cancelHuntSetup = true
+		end
+		
+		--[[disabled until fixed
+		--reset look decks
+		local lootDecks = {'deckBasicResources','deckStrangeResources','deckVermin'}
+		local lootDeck = {}
+		for k, v in pairs(lootDecks) do
+			lootDeck = respawnEssentialDeck(v)
+			coroutine.yield(0)
+		end
+		--]]
+
+		--set positions for hunt cards
+		getHuntPositions()
+
+		--set params
+		local params = {}
+		params.rotation = {}
+		params.position = {}
+
+		if cancelHuntSetup == false then
+			--determine cards to which location and deal cards to hunt board
+			local huntSpace = huntTable.huntCardPlacement
+			local basicHuntDeck = getObjectFromGUID(essentialDecks.deckBasicHunt.guid)
+			for i=1,#huntSpace do
+				params.position = huntPos[i]
+				params.rotation = huntRot[i]
+				if huntSpace[i] == 'E' then
+					decks.deckMonsterHunt.takeObject(params)
+				elseif huntSpace[i] == 'S' then
+					decks.deckMonsterSpecialHunt.takeObject(params)
+				elseif huntSpace[i] == '' then
+					basicHuntDeck.takeObject(params)
+				end
+				coroutine.yield(0)
+			end
+
+			--wait for cards to settle
+			for i=1,120,1 do
+				coroutine.yield(0)
+			end
+			placeHuntMonster()
+
+			setupHuntClose(monster)
+		else
+			printToAll('Hunt setup is cancelling due to critical error.',rgbError)
+			huntSettingUp = false
+			huntInProgress = true
+			cleanupHunt()
+			cancelHuntSetup = false
+		end
+	else
+		printToAll('Hunt setup is cancelling due to critical error.',rgbError)
+		huntSettingUp = false
+		huntInProgress = true
+		cleanupHunt()
+		cancelHuntSetup = false
+	end
+	return 1
+end
+
+--set hunt pos by placeholders
+function getHuntPositions()
+	huntPos = {}
+	huntRot = {}
+	for i=1, 13 do
+		local var = 'cardHunt' .. tostring(i)
+		local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
+		local position = {pos[1], pos[2] + 1, pos[3]}
+		huntPos[i] = position
+		local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
+		huntRot[i] = rot
+	end
+end
+
+
+--[[ INACTIVE, set position by board version
+function getHuntPositions()
+	--set positions for hunt cards
+	huntPos = {}
+	huntRot = {}
+	local offset = {}
+	local scale = boardHunt.getScale()
+	scale = offsetScaleHuntBoard / scale.x
+	offset = offsetXHuntCards
+	--translate offsets by any scale changes
+	local offsetScaled = {}
+	for i=1, #offset do
+		offsetScaled[i] = offset[i] * scale
+	end
+	local origin = {}
+	origin = boardHunt.getPosition()
+
+	--translate offsets with trig and set positions
+	for i=1, #offsetScaled do
+		local offsetTrig = {}
+		offsetTrig[i] = trig(boardHunt,offset[i])
+		huntPos[i] = {origin.x + offsetTrig[i][1], origin.y + offsetTrig[i][2] + 1, origin.z + offsetTrig[i][3]}
+	end
+	for i=1, 13 do
+		huntRot[i] = {boardHunt.getRotation().x, boardHunt.getRotation().y, boardHunt.getRotation().z + 180}
+end
+--]]
+
+---------------place monster by level
+function placeHuntMonster()
+	local monster = currentQuarryTable.monster
+	local placedMonster = ''
+	if monsterFigurinePlaced != nil or huntMonsterFigurine != nil then
+		placedMonster = monsterFigurinePlaced
+		if placedMonster != monster or huntMonsterFigurine == nil then
+			--clear other monster figurines
+			local zone = getObjectFromGUID(zones.zoneMain.guid)
+			cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
+			monsterFigurinePlaced = nil
+		end
+	end
+	--place monster
+	if monsterFigurinePlaced == nil then
+		local huntTable = currentQuarryTable
+		local level = currentHuntLevel
+		local location = huntTable.huntLocation
+		local space = location[level]
+		getHuntPositions()
+		local params = {}
+		params.position = huntPos[space]
+		params.rotation = {boardHunt.getRotation().x, boardHunt.getRotation().y + 180, boardHunt.getRotation().z}
+		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {monster}, exclude = {}})
+		if figurineGUID == nil then
+			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
+		else
+			local figureTable = spawnFromBox(figurineGUID, params)
+			huntMonsterFigurine = figureTable[1]
+			monsterFigurinePlaced = monster
+		end
+	end
+end
+
+-------------------change hunt level
+function changeHuntLevel(level)
+	local unconvertedLevel = level[1]
+	local num = string.gsub(unconvertedLevel,'lvl','')
+	currentHuntLevel = tonumber(num)
+	--update monster position
+	getHuntPositions()
+	if huntMonsterFigurine != nil and huntPos != nil and huntInProgress == true then
+		local huntTable = currentQuarryTable
+		local space = huntTable.huntLocation[currentHuntLevel]
+		local pos = huntPos[space]
+		huntMonsterFigurine.setPositionSmooth({pos[1], pos[2] + 2, pos[3]})
+	end
+end
+
+
+---------------------closing fcn for hunt setup
+function setupHuntClose(monster)
+	huntInProgress = true
+	huntSettingUp = false
+	printToAll(messages.msgHuntIsSetup1 .. monster .. messages.msgHuntIsSetup2,rgbNarrator)
+end
+
+-------------------clean up hunt
+function cleanupHunt()
+	if huntSettingUp == false and huntInProgress == true and huntCleaning == false and huntCleanPending == false then
+		huntCleaning = true
+		startLuaCoroutine(Global,'cleanupHuntCoroutine')
+	elseif huntSettingUp == true and huntCleaning == false and huntCleanPending == false then
+		huntCleanPending = true
+		startLuaCoroutine(Global,'cleanupHuntCoroutineStandby')
+	end
+end
+
+function cleanupHuntCoroutineStandby()
+	while huntSettingUp == true do
+		coroutine.yield(0)
+	end
+	for i=1,30 do
+		coroutine.yield(0)
+	end
+	huntCleanPending = false
+	startLuaCoroutine(Global,'cleanupHuntCoroutine')
+	return 1
+end
+
+function cleanupHuntCoroutine()
+	--clear components
+	local zone = getObjectFromGUID(zones.zoneHunt.guid)
+	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'hunt'}, exclude = {'resource'}})
+
+	--reset essential decks
+	--reset basic hunt deck
+	local deck = 'deckBasicHunt'
+	resetEssentialDeck(deck)
+	deck = 'deckSpecialHunt'
+	resetEssentialDeck(deck)
+	for i=1,30 do
+		coroutine.yield(0)
+	end
+	local decks = {'deckBasicHunt', 'deckSpecialHunt'}
+	debugEssentialDecks(decks)
+
+	--wait for cards to settle
+	for i=1,30 do
+		coroutine.yield(0)
+	end
+	huntInProgress = false
+	huntSettingUp = false
+	printToAll(huntCleared,rgbNarrator)
+	huntCleaning = false
+	return 1
+end
+
+
+----------------------
+--AutoShowdown
+----------------------
+
+--------launcher
+function setupShowdown(monsterTable)
+	if showdownInProgress == false and showdownSettingUp == false and showdownCleaning == false and autoShowdown == true then
+		if monsterTable != nil then
+			currentShowdownTable = monsterTable
+		end
+		if huntSettingUp == true or huntCleaning == true then
+			if showdownSetupPending != true then
+				showdownSetupPending = true
+				startLuaCoroutine(Global, 'showdownStandbyCoroutine')
+			end
+		else
+			showdownSettingUp = true
+			if monsterResourcePlaced == true then
+				if currentQuarryTable.monster != nil then
+					if currentShowdownTable.monster != currentQuarryTable.monster then
+						local zone = getObjectFromGUID(zones.zoneMain.guid)
+						local criteriaParam = currentQuarryTable.monster .. ' Resources Deck'
+						cleanup('name', zone, {conditional = 'matches', criteria = {criteriaParam}, exclude = {}})
+						monsterResourcePlaced = false
+					end
+				end
+			end
+			startLuaCoroutine(Global,'setupShowdownCoroutine')
+		end
+	elseif showdownInProgress == true or showdownSettingUp == true then
+		printToAll('The survivors are already in a fight!',rgbError)
+	end
+end
+
+function showdownStandbyCoroutine()
+	while huntSettingUp == true do
+		coroutine.yield(0)
+	end
+	while huntCleanPending == true do
+		coroutine.yield(0)
+	end
+	while huntCleaning == true do
+		coroutine.yield(0)
+	end
+	for i=1, 30 do
+		coroutine.yield(0)
+	end
+	showdownSetupPending = false
+	setupShowdown()
+	return 1
+end
+
+-----------coroutine
+function setupShowdownCoroutine()
+	local showdownTable = currentShowdownTable
+	local monster = showdownTable.monster
+
+	printToAll(messages.msgSettingUpShowdown1 .. monster .. messages.msgSettingUpShowdown2, rgbNarrator)
+
+	--find components to spawn
+	local container = gameBox
+	local componentsToGet = {
+		cardMonsterBasicAction = {monster, 'Basic Action Card', 'matches'},
+		deckMonsterHitLocations = {monster, 'Hit Locations Deck', 'matches'},
+		deckMonsterAIBasic = {monster, 'Basic AI Deck', 'matches'},
+		deckMonsterAIAdvanced = {monster, 'Advanced AI Deck', 'matches'},
+		deckMonsterAILegendary = {monster, 'Legendary AI Deck', 'matches'},
+		deckMonsterAISpecial = {monster, 'Special AI Deck', 'matches'},
+	}
+	local huntMonster = ''
+	if currentQuarryTable != nil then
+		huntMonster = currentQuarryTable.monster
+	end
+	if monsterResourcePlaced == false then
+		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
+	elseif monster != huntMonster then
+		--clear old monster Resources
+		local zone = getObjectFromGUID(zones.zoneMain.guid)
+		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'resource'}, exclude = {'drawn'}})
+		coroutine.yield(0)
+		componentsToGet.deckMonsterResources = {monster, 'Resources Deck', 'matches'}
+	end
+	local result = {}
+	local result2 = {}
+	for k,v in pairs(componentsToGet) do
+		result[k] = getObj('name', container, {conditional = v[3], criteria = {v[1] .. ' ' .. v[2]}, exclude = {}})
+		if result[k] != nil then
+			for j, h in pairs(result) do
+				result2[k] = h[1]
+			end
+		else
+			if k == 'deckMonsterAIAdvanced' or k == 'deckMonsterAISpecial' or k == 'deckMonsterAILegendary' or k == 'deckMonsterAISpecial' or k == 'deckMonsterResources' then
+			else
+				printToAll(v[1] .. ' ' .. v[2] .. ' is missing from the Box under the table. Manually replace deck in the Box.', rgbError )
+				cancelShowdownSetup = true
+			end
+		end
+	end
+
+	--spawn components
+	if cancelShowdownSetup == false then
+		local objects = {}
+		local objects = spawnFromBox(result2, nil)
+		local decks = {}
+		for k,v in pairs(objects) do
+			if v.tag == 'Deck' then
+				decks[k] = v
+			end
+			if string.find(string.lower(v.getDescription()), string.lower('resource')) then
+				monsterResourcePlaced = true
+			end
+		end
+		for i=1,30 do
+			coroutine.yield(0)
+		end
+		for k, v in pairs(decks) do
+			v.shuffle()
+		end
+
+		--spawn monster
+		placeShowdownMonster()
+
+		coroutine.yield(0)
+
+		--spawn terrain
+		generateShowdownTerrain()
+
+		--wait for cards to settle
+		for i=1,120,1 do
+			coroutine.yield(0)
+		end
+
+		setupShowdownClose(monster)
+	else
+		printToAll('Showdown setup is cancelling due to critical error.',rgbError)
+		showdownSettingUp = false
+		showdownInProgress = true
+		cleanupShowdown()
+	end
+	return 1
+end
+
+function placeShowdownMonster()
+	local huntMonster = ''
+	if currentQuarryTable != nil then
+		huntMonster = currentQuarryTable.monster
+	end
+	local showdownMonster = currentShowdownTable.monster
+	local params = {}
+	params.position = {-9.5,2,0}
+	params.rotation = {0,180,0}
+	if  showdownMonster == huntMonster and huntMonsterFigurine != nil then
+		--move hunt figurine to showdown
+		huntMonsterFigurine.setPositionSmooth(params.position)
+		huntMonsterFigurine.setRotationSmooth(params.rotation)
+	else
+		--clear other monster figurines
+		local zone = getObjectFromGUID(zones.zoneMain.guid)
+		cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown','figurine'}, exclude = {}})
+		monsterFigurinePlaced = nil
+		--spawn new figurine
+		local figurineGUID = getObj('name', gameBox, {conditional = "matches", criteria = {showdownMonster}, exclude = {}})
+		if figurineGUID == nil then
+			printToAll('The ' .. monster .. ' Figurine was not found in the box!', rgbError)
+		else
+			local figureTable = spawnFromBox(figurineGUID, params)
+			showdownMonsterFigurine = figureTable[1]
+			monsterFigurinePlaced = showdownMonster
+		end
+	end
+end
+
+function generateShowdownTerrain()
+	local cancelTerrainSetup = false
+	--get card counts by type
+	local inputTable = currentShowdownTable.showdownTerrain.specifiedCards
+	local specifiedCards = {}
+	if inputTable != nil then
+		for k,v in pairs (inputTable) do
+			local prefix = string.sub(v,1,2)
+			local cardName = string.gsub(v,prefix,'')
+			local string = string.gsub(prefix, ' ', '')
+			local integer = tonumber(string)
+			specifiedCards[cardName] = integer
+		end
+		--check terrain deck
+		local decks = {'deckTerrain'}
+		debugEssentialDecks(decks)
+		--get cards to take
+		local cardsToTake = {}
+		local tilesToGet = {}
+		local num = 1
+		local deck = getObjectFromGUID(essentialDecks.deckTerrain.guid)
+		for k, v in pairs (specifiedCards) do
+			local count = 1
+			local maxCount = v
+			local result = {}
+			local keyLabel = ''
+			result[k] = getObj('name', deck, {conditional = 'matches', criteria = {k},exclude = {}})
+			if result[k] != nil then
+				local result2 = {}
+				for i=1, #result[k] do
+					if count <=maxCount then
+						result2[i] = result[k][i]
+						local var = 'cardTerrain' .. tostring(num)
+						num = num + 1
+						count = count + 1
+						cardsToTake[var] = result2[i]
+						tilesToGet[var] = k
+					end
+				end
+			else
+				printToAll(k .. ' is missing from the Terrain Deck. Manually setup Terrain.', rgbError)
+				cancelTerrainSetup = true
+			end
+		end
+
+		if cancelTerrainSetup == false then
+			--take cards
+			local cardsTaken = {}
+			local params = {}
+			for k, v in pairs (cardsToTake) do
+				local rot = getObjectFromGUID(placeholders.cardTerrain1.guid).getRotation()
+				params.rotation = {rot[1], rot[2], 0}
+				local pos = getObjectFromGUID(placeholders[k].guid).getPosition()
+				params.position = {pos[1], pos[2] + 2, pos[3]}
+				params.guid = v
+				cardsTaken[k] = deck.takeObject(params)
+
+				for i = 1, 30 do
+					coroutine.yield(0)
+				end
+			end
+
+			deck.shuffle()
+
+			for i=1,30 do
+				coroutine.yield(0)
+			end
+
+			--spawn random cards
+			local randomCount = currentShowdownTable.showdownTerrain.randomCards
+			params = {}
+			for i=1, randomCount do
+				local var = 'cardTerrain' .. tostring(num)
+				num = num + 1
+				local rot = getObjectFromGUID(placeholders[var].guid).getRotation()
+				params.rotation = {rot[1], rot[2], 0}
+				local pos = getObjectFromGUID(placeholders[var].guid).getPosition()
+				params.position = {pos[1], pos[2] + 2, pos[3]}
+				cardsTaken[var] = deck.takeObject(params)
+			end
+
+				--[[ inactive
+			--get tiles
+			local tilesToTake = {}
+			for k,v in pairs (tilesToGet) do
+				local result = {}
+				result = getObj('name', getObjectFromGUID(staticObjs.gameBox.guid), {conditional = 'matches', criteria = {v}, exclude = {}})
+				if result[1] != nil then
+
+					tilesToTake[k] = result[1]
+
+				--]]
+
+		end
+	end
+end
+
+---------------------closing fcn for showdown setup
+function setupShowdownClose(monster)
+	showdownInProgress = true
+	showdownSettingUp = false
+	printToAll(messages.msgShowdownIsSetup,rgbNarrator)
+end
+
+---------------------level change for showdown monster
+function changeShowdownLevel(level)
+	local unconvertedLevel = level[1]
+	--update monster stats
+	if showdownInProgress == true then
+		local showdownTable = currentShowdownTable
+		local stats = {}
+		local stats = showdownTable.showdownStats[unconvertedLevel]
+		if stats != nil then
+			local board = getObjectFromGUID(boards.boardMonster.guid)
+			board.setTable('transferStats', stats)
+			board.call('transfer', nil)
+		end
+	end
+end
+
+-------------------clean up showdown
+function cleanupShowdown()
+	if showdownSettingUp == false and showdownInProgress == true and showdownCleanPending == false and showdownCleaning == false then
+		showdownCleaning = true
+		startLuaCoroutine(Global,'cleanupShowdownCoroutine')
+	elseif showdownSettingUp == true and showdownCleaning == false and showdownCleanPending == false then
+		showdownCleanPending = true
+		startLuaCoroutine(Global,'cleanupShowdownCoroutineStandby')
+	end
+end
+
+function cleanupShowdownCoroutineStandby()
+	while showdownSettingUp == true do
+		coroutine.yield(0)
+	end
+	showdownCleanPending = false
+	startLuaCoroutine(Global,'cleanupShowdownCoroutine')
+	return 1
+end
+
+function cleanupShowdownCoroutine()
+	--clear components
+	local zone = getObjectFromGUID(zones.zoneMain.guid)
+	cleanup('tag', zone, {conditional = 'and', criteria = {'terrain tile'}, exclude = {}})
+	cleanup('tag', zone, {conditional = 'and', criteria = {'monster', 'showdown'}, exclude = {'drawn'}})
+	--reset terrain deck
+	local deck = 'deckTerrain'
+	resetEssentialDeck(deck)
+	for i=1, 30 do
+		coroutine.yield(0)
+	end
+	local decks = {deck}
+	debugEssentialDecks(decks)
+
+	local board = getObjectFromGUID(boards.boardMonster.guid)
+	board.call('clear', nil)
+
+	for i=1, 60 do
+		coroutine.yield(0)
+	end
+
+	monsterFigurinePlaced = nil
+	monsterResourcePlaced = false
+	showdownInProgress = false
+	showdownSettingUp = false
+	currentQuarryTable = {'null'}
+	currentShowdownTable = {'null'}
+	printToAll(messages.msgShowdownCleared,rgbNarrator)
+	showdownCleaning = false
+	return 1
+end
\ No newline at end of file
diff --git a/beta/Level Marker.302128.lua b/beta/Level Marker.302128.lua
new file mode 100644
index 0000000..fda439b
--- /dev/null
+++ b/beta/Level Marker.302128.lua	
@@ -0,0 +1,46 @@
+--KDM Level Marker for Hunt
+
+-------------------------
+--variables
+---------------------------
+
+level1guid = '8c918d'
+level2guid = '844c0e'
+level3guid = '5ffbab'
+-----------------------
+--init
+------------------------
+function onLoad()
+	initialized = true
+end
+
+
+------------------------
+--Triggers
+------------------------
+function onCollisionEnter(info)
+	if info.collision_object != nil and initialized == true then
+		local obj = info.collision_object
+		local guid = obj.getGUID()
+		local level = ''
+		if guid == level1guid then
+			level = 'lvl1'
+			changeHuntLevel(level)
+		elseif guid == level2guid then
+			level = 'lvl2'
+			changeHuntLevel(level)
+		elseif guid == level3guid then
+			level = 'lvl3'
+			changeHuntLevel(level)
+		end
+	end
+end
+
+
+-------------------------
+--Global Calls
+------------------------
+
+function changeHuntLevel(level)
+	Global.call('changeHuntLevel', {level})
+end
\ No newline at end of file
diff --git a/beta/Level Marker.df1a46.lua b/beta/Level Marker.df1a46.lua
new file mode 100644
index 0000000..c3eded3
--- /dev/null
+++ b/beta/Level Marker.df1a46.lua	
@@ -0,0 +1,46 @@
+--KDM Level Marker for Showdown
+
+-------------------------
+--variables
+---------------------------
+
+level1guid = 'd55917'
+level2guid = 'c0087a'
+level3guid = '6d5b9b'
+-----------------------
+--init
+------------------------
+function onLoad()
+	initialized = true
+end
+
+
+------------------------
+--Triggers
+------------------------
+function onCollisionEnter(info)
+	if info.collision_object != nil and initialized == true then
+		local obj = info.collision_object
+		local guid = obj.getGUID()
+		local level = ''
+		if guid == level1guid then
+			level = 'lvl1'
+			changeShowdownLevel(level)
+		elseif guid == level2guid then
+			level = 'lvl2'
+			changeShowdownLevel(level)
+		elseif guid == level3guid then
+			level = 'lvl3'
+			changeShowdownLevel(level)
+		end
+	end
+end
+
+
+-------------------------
+--Global Calls
+------------------------
+
+function changeShowdownLevel(level)
+	Global.call('changeShowdownLevel', {level})
+end
\ No newline at end of file
diff --git a/beta/Monster Board.24f67c.lua b/beta/Monster Board.24f67c.lua
new file mode 100644
index 0000000..896613d
--- /dev/null
+++ b/beta/Monster Board.24f67c.lua	
@@ -0,0 +1,369 @@
+-- KDM Survivor Sheet lazily adapted by Eskander (FULL SIZE VERSION)
+-- Script adapted from soulburner's DnD sheets
+-- which seems to have been adapted from Universal Counter Tokens by Mr. Stump
+-- this script is a chimaera, you can likely easily clean it up
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+    local data_to_save = {}
+        data_to_save.saved_counts = {}
+        for i,v in pairs(buttons.counts) do
+            data_to_save.saved_counts[tostring(i)] = v or 0
+        end
+
+    saved_data = JSON.encode(data_to_save)
+	data_for_transfer = data_to_save
+
+    --Uncomment this line to reset the save data, necessary when messing with variable names
+    --saved_data = ''
+    return saved_data
+end
+
+transferStats = {}
+
+-------------
+--transfer from level
+-------------
+function transfer()
+	if transferStats != nil then
+		for k,v in pairs(transferStats) do
+			buttons.counts[k] = v
+		end
+	end
+	updateDisplay(false)
+end
+
+function clear()
+	if transferStats != nil then
+		for k,v in pairs(transferStats) do
+			buttons.counts[k] = 0
+		end
+	end
+	updateDisplay(false)
+end
+--------------------
+
+--Loads the saved data then creates the buttons
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+
+    ------------------------------
+    --Edit below this line
+    ------------------------------
+	thick = 0.14
+
+	--stats
+	dx = -0.74; dy =-2.4; py = 0.8
+	createCounter('lck', 'big', dx, dy); dy = dy + py;
+	createCounter('mov', 'big', dx, dy); dy = dy + py;
+	createCounter('acc', 'big', dx, dy); dy = dy + py;
+	createCounter('evs', 'big', dx, dy); dy = dy + py;
+	createCounter('spd', 'big', dx, dy); dy = dy + py;
+	createCounter('dmg', 'big', dx, dy); dy = dy + py;
+	createCounter('tgh', 'big', dx, dy); dy = dy + py;
+	
+	
+	
+	
+	
+
+
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+
+
+    ------------------------------
+    --Don't touch below this line
+    ------------------------------
+
+
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+        end
+    end
+
+    generateButtonParameters()
+
+    --Checks if there is a saved data. If there is, it gets the saved value for 'buttons.counts.ct'
+
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+
+    updateDisplay(true)
+end
+
+
+
+
+------------------------------
+--customize sizes
+------------------------------
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+
+
+    --make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 25, height = 25, font = 50},
+        button = {width = 25, height = 25, font = 50},
+        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 200},
+        button = {width = 50, height = 50, font = 50},
+        offsets = { bottomButtons = {x = 0.075, y = 0, z = -0.34}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+
+    buttons.params.sizes.toggle = {
+        display = {width = 25, height = 25, font = 50},
+        button = {width = 25, height = 25, font = 50},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 50},
+        button = {width = 50, height = 50, font = 50},
+        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = { type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+
+end
+
+----------------------
+--actions on button click
+-----------------------
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location)
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then return end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+
+    ppos = {pos.x + 2, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        --params.type = 'PlayerPawn'
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+		--final_pos = {pos.x + 2, pos.y, pos.z+2}
+
+        o = spawnObject({
+            type = 'backgammon_piece_brown',
+            --position = {mpos[1] + pos.x, mpos[2] + pos.y+2, mpos[3] - pos.z},
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            --position = button.position,
+            scale = {1, 1, 1}
+        })
+        --o.position = button.position
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+
+
+--This is activated when onload runs. This sets all parameters for our buttons.
+--I do not have to put this all into a function, but I prefer to do it this way.
+
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+        buttonInfo.function_owner = self
+        buttonInfo.index = buttons.index
+        buttonInfo.click_function = targetFunc
+		--reverse things for backside
+		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+			buttonInfo.rotation = {0,0,180}
+			if offsets != nil then
+				reverse_x = -offsets.x
+			end
+			--if label == '+' then
+				--isLeft = true
+			--elseif label == '-' then
+				--isLeft = false
+			--end
+		elseif offsets != nil then
+			reverse_x = offsets.x
+		end
+		--reversed
+        if isLeft then
+            orientationModifier = -1
+        else
+            orientationModifier = 1
+        end
+
+        if offsets == nil then
+            buttonInfo.position = {positions.x, positions.y, positions.z}
+        else
+            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+        end
+        buttonInfo.width = sizes.width
+        buttonInfo.height = sizes.height
+        buttonInfo.font_size = sizes.font
+        buttonInfo.label = label
+    buttons.index = buttons.index + 1
+
+    return buttonInfo
+end
+
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+    --updateDisplay()
+
+end
+
+
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            if (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                --if (buttons.toggles[tostring(i)].isClicked == false) then
+                    buttons[tostring(i)].display.label = "X"
+					--buttons.toggles[tostring(i)].isClicked = true
+                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
+                else
+                    buttons[tostring(i)].display.label = ""
+					--buttons.toggles[tostring(i)].isClicked = false
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
\ No newline at end of file
diff --git a/beta/Nemesis Monsters.0f3f64.lua b/beta/Nemesis Monsters.0f3f64.lua
new file mode 100644
index 0000000..e041ac2
--- /dev/null
+++ b/beta/Nemesis Monsters.0f3f64.lua	
@@ -0,0 +1,29 @@
+function onload()
+  b_display = { index = 0,
+                      click_function = 'updateDisplay',
+                      label = self.getName(),
+                      function_owner = self,
+                      position = {0, 0.09, 0},
+                      rotation = {0, 0, 0},
+                      width = 6000,
+                      height = 500,
+                      font_size = 300}
+
+  local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+  end
+
+  self.createButton(b_display)
+end
+
+function updateDisplay()
+    b_display.label = self.getName()
+
+    local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+    end
+
+    self.editButton(b_display)
+end
\ No newline at end of file
diff --git a/beta/P1.1a3b6e.lua b/beta/P1.1a3b6e.lua
new file mode 100644
index 0000000..3f5a075
--- /dev/null
+++ b/beta/P1.1a3b6e.lua
@@ -0,0 +1,398 @@
+--KDM Gear Sheet (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+
+function initCustomButtons()
+	thick = 0.14
+
+	--armor and hit locations
+    dx = 6.35; dy = -8.7; px =2.36
+	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
+	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
+	createCounter('armor_legs', 'big', dx, dy)
+
+	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
+	createToggle('injury_head', dx, dy); dx = dx + px;
+	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_body_h', dx, dy); dx = dx + px;
+	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
+	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
+	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_arms_h', dx, dy); dx = dx + px;
+	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_legs_h', dx, dy)
+
+    dx = 18; dy = -5.25;
+    createResetArmor('resetArmor', dx, dy)
+	
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+--make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 800, height = 250, font = 130},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 1000},
+        button = {width = 280, height = 280, font = 350},
+        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 280, height = 280, font = 290},
+        button = {width = 300, height = 300, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 150},
+        button = {width = 300, height = 200, font = 100},
+        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------curnil's standalone token script
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+FullCharSheet = ''
+tokens = {}
+-------------
+
+
+--Loads
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
+        end
+    end
+
+    generateButtonParameters()
+
+    --loads saved data
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+
+    updateDisplay(true)
+end
+
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createResetArmor(name, px, py)
+    name = "r_" .. name
+    buttons[name] = { type = 'std'}
+    buttons.params.positions[name] = {x = px, y= thick, z = py}
+end
+
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+			if (prefix == "r_") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isReset = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+	buttonInfo.function_owner = self
+	buttonInfo.index = buttons.index
+	buttonInfo.click_function = targetFunc
+	if offsets != nil then
+		reverse_x = offsets.x
+	end
+	--reversed
+	if isLeft then
+		orientationModifier = -1
+	else
+		orientationModifier = 1
+	end
+
+	if offsets == nil then
+		buttonInfo.position = {positions.x, positions.y, positions.z}
+	else
+		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+	end
+	buttonInfo.width = sizes.width
+	buttonInfo.height = sizes.height
+	buttonInfo.font_size = sizes.font
+	buttonInfo.label = label
+	buttons.index = buttons.index + 1
+	return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isReset == true) then
+				buttons[tostring(i)].display.label = 'Reset Armor'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                --if (buttons.toggles[tostring(i)].isClicked == false) then
+                    buttons[tostring(i)].display.label = "X"
+					--buttons.toggles[tostring(i)].isClicked = true
+                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
+                else
+                    buttons[tostring(i)].display.label = ""
+					--buttons.toggles[tostring(i)].isClicked = false
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+
+end
+
+--------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function dud()
+end
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+--reset armor
+function resetArmor()
+    --Resets counts on each display to 0
+    --Resets Armor and Injuries
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'r_resetArmor' then
+            buttons.counts[tostring(i)] = 0
+        end
+    end
+    --This section will add armor counts for each area
+    --[[
+
+    ]]
+    updateDisplay(false)
+end
+
+
+
+----------------------------
+--curnil's token scripts standlone
+----------------------------
+function onCollisionEnter(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isKDMFULL") then
+        if FullCharSheet == '' then
+            FullCharSheet = obj
+        end
+    end
+
+    -- special rules for bonus tiles
+    if obj.getVar("isKdmEffectsObject") then
+        tokens[obj.getGUID()] = obj.call("getEffects", nil)
+        if FullCharSheet ~= '' then
+			FullCharSheet.call('loadTokens', tokens)
+        end
+    end
+end
+
+-- This function detaches the tile and saves data to it
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+        if obj.getVar("isKDMFULL") then
+            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
+                FullCharSheet = ''
+            end
+        end
+
+        if obj.getVar("isKdmEffectsObject") then
+            -- remove the token from the tokens collection
+            tokens[obj.getGUID()] = nil
+            if FullCharSheet ~= '' then
+                FullCharSheet.call('loadTokens', tokens)
+            end
+        end
+end
+
+--[[
+function onObjectDestroyed(dying_object)
+    guid = dying_object.getGUID()
+    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
+        onCollisionExit({collision_object = dying_object})
+    end
+
+    if guid and (tokens and tokens[guid]) then
+        onCollisionExit({collision_object = dying_object})
+    end
+end
+--]]
\ No newline at end of file
diff --git a/beta/P2.b5d9e8.lua b/beta/P2.b5d9e8.lua
new file mode 100644
index 0000000..3f5a075
--- /dev/null
+++ b/beta/P2.b5d9e8.lua
@@ -0,0 +1,398 @@
+--KDM Gear Sheet (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+
+function initCustomButtons()
+	thick = 0.14
+
+	--armor and hit locations
+    dx = 6.35; dy = -8.7; px =2.36
+	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
+	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
+	createCounter('armor_legs', 'big', dx, dy)
+
+	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
+	createToggle('injury_head', dx, dy); dx = dx + px;
+	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_body_h', dx, dy); dx = dx + px;
+	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
+	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
+	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_arms_h', dx, dy); dx = dx + px;
+	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_legs_h', dx, dy)
+
+    dx = 18; dy = -5.25;
+    createResetArmor('resetArmor', dx, dy)
+	
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+--make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 800, height = 250, font = 130},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 1000},
+        button = {width = 280, height = 280, font = 350},
+        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 280, height = 280, font = 290},
+        button = {width = 300, height = 300, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 150},
+        button = {width = 300, height = 200, font = 100},
+        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------curnil's standalone token script
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+FullCharSheet = ''
+tokens = {}
+-------------
+
+
+--Loads
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
+        end
+    end
+
+    generateButtonParameters()
+
+    --loads saved data
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+
+    updateDisplay(true)
+end
+
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createResetArmor(name, px, py)
+    name = "r_" .. name
+    buttons[name] = { type = 'std'}
+    buttons.params.positions[name] = {x = px, y= thick, z = py}
+end
+
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+			if (prefix == "r_") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isReset = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+	buttonInfo.function_owner = self
+	buttonInfo.index = buttons.index
+	buttonInfo.click_function = targetFunc
+	if offsets != nil then
+		reverse_x = offsets.x
+	end
+	--reversed
+	if isLeft then
+		orientationModifier = -1
+	else
+		orientationModifier = 1
+	end
+
+	if offsets == nil then
+		buttonInfo.position = {positions.x, positions.y, positions.z}
+	else
+		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+	end
+	buttonInfo.width = sizes.width
+	buttonInfo.height = sizes.height
+	buttonInfo.font_size = sizes.font
+	buttonInfo.label = label
+	buttons.index = buttons.index + 1
+	return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isReset == true) then
+				buttons[tostring(i)].display.label = 'Reset Armor'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                --if (buttons.toggles[tostring(i)].isClicked == false) then
+                    buttons[tostring(i)].display.label = "X"
+					--buttons.toggles[tostring(i)].isClicked = true
+                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
+                else
+                    buttons[tostring(i)].display.label = ""
+					--buttons.toggles[tostring(i)].isClicked = false
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+
+end
+
+--------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function dud()
+end
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+--reset armor
+function resetArmor()
+    --Resets counts on each display to 0
+    --Resets Armor and Injuries
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'r_resetArmor' then
+            buttons.counts[tostring(i)] = 0
+        end
+    end
+    --This section will add armor counts for each area
+    --[[
+
+    ]]
+    updateDisplay(false)
+end
+
+
+
+----------------------------
+--curnil's token scripts standlone
+----------------------------
+function onCollisionEnter(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isKDMFULL") then
+        if FullCharSheet == '' then
+            FullCharSheet = obj
+        end
+    end
+
+    -- special rules for bonus tiles
+    if obj.getVar("isKdmEffectsObject") then
+        tokens[obj.getGUID()] = obj.call("getEffects", nil)
+        if FullCharSheet ~= '' then
+			FullCharSheet.call('loadTokens', tokens)
+        end
+    end
+end
+
+-- This function detaches the tile and saves data to it
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+        if obj.getVar("isKDMFULL") then
+            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
+                FullCharSheet = ''
+            end
+        end
+
+        if obj.getVar("isKdmEffectsObject") then
+            -- remove the token from the tokens collection
+            tokens[obj.getGUID()] = nil
+            if FullCharSheet ~= '' then
+                FullCharSheet.call('loadTokens', tokens)
+            end
+        end
+end
+
+--[[
+function onObjectDestroyed(dying_object)
+    guid = dying_object.getGUID()
+    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
+        onCollisionExit({collision_object = dying_object})
+    end
+
+    if guid and (tokens and tokens[guid]) then
+        onCollisionExit({collision_object = dying_object})
+    end
+end
+--]]
\ No newline at end of file
diff --git a/beta/P3.c4017e.lua b/beta/P3.c4017e.lua
new file mode 100644
index 0000000..3f5a075
--- /dev/null
+++ b/beta/P3.c4017e.lua
@@ -0,0 +1,398 @@
+--KDM Gear Sheet (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+
+function initCustomButtons()
+	thick = 0.14
+
+	--armor and hit locations
+    dx = 6.35; dy = -8.7; px =2.36
+	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
+	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
+	createCounter('armor_legs', 'big', dx, dy)
+
+	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
+	createToggle('injury_head', dx, dy); dx = dx + px;
+	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_body_h', dx, dy); dx = dx + px;
+	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
+	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
+	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_arms_h', dx, dy); dx = dx + px;
+	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_legs_h', dx, dy)
+
+    dx = 18; dy = -5.25;
+    createResetArmor('resetArmor', dx, dy)
+	
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+--make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 800, height = 250, font = 130},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 1000},
+        button = {width = 280, height = 280, font = 350},
+        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 280, height = 280, font = 290},
+        button = {width = 300, height = 300, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 150},
+        button = {width = 300, height = 200, font = 100},
+        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------curnil's standalone token script
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+FullCharSheet = ''
+tokens = {}
+-------------
+
+
+--Loads
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
+        end
+    end
+
+    generateButtonParameters()
+
+    --loads saved data
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+
+    updateDisplay(true)
+end
+
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createResetArmor(name, px, py)
+    name = "r_" .. name
+    buttons[name] = { type = 'std'}
+    buttons.params.positions[name] = {x = px, y= thick, z = py}
+end
+
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+			if (prefix == "r_") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isReset = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+	buttonInfo.function_owner = self
+	buttonInfo.index = buttons.index
+	buttonInfo.click_function = targetFunc
+	if offsets != nil then
+		reverse_x = offsets.x
+	end
+	--reversed
+	if isLeft then
+		orientationModifier = -1
+	else
+		orientationModifier = 1
+	end
+
+	if offsets == nil then
+		buttonInfo.position = {positions.x, positions.y, positions.z}
+	else
+		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+	end
+	buttonInfo.width = sizes.width
+	buttonInfo.height = sizes.height
+	buttonInfo.font_size = sizes.font
+	buttonInfo.label = label
+	buttons.index = buttons.index + 1
+	return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isReset == true) then
+				buttons[tostring(i)].display.label = 'Reset Armor'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                --if (buttons.toggles[tostring(i)].isClicked == false) then
+                    buttons[tostring(i)].display.label = "X"
+					--buttons.toggles[tostring(i)].isClicked = true
+                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
+                else
+                    buttons[tostring(i)].display.label = ""
+					--buttons.toggles[tostring(i)].isClicked = false
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+
+end
+
+--------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function dud()
+end
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+--reset armor
+function resetArmor()
+    --Resets counts on each display to 0
+    --Resets Armor and Injuries
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'r_resetArmor' then
+            buttons.counts[tostring(i)] = 0
+        end
+    end
+    --This section will add armor counts for each area
+    --[[
+
+    ]]
+    updateDisplay(false)
+end
+
+
+
+----------------------------
+--curnil's token scripts standlone
+----------------------------
+function onCollisionEnter(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isKDMFULL") then
+        if FullCharSheet == '' then
+            FullCharSheet = obj
+        end
+    end
+
+    -- special rules for bonus tiles
+    if obj.getVar("isKdmEffectsObject") then
+        tokens[obj.getGUID()] = obj.call("getEffects", nil)
+        if FullCharSheet ~= '' then
+			FullCharSheet.call('loadTokens', tokens)
+        end
+    end
+end
+
+-- This function detaches the tile and saves data to it
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+        if obj.getVar("isKDMFULL") then
+            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
+                FullCharSheet = ''
+            end
+        end
+
+        if obj.getVar("isKdmEffectsObject") then
+            -- remove the token from the tokens collection
+            tokens[obj.getGUID()] = nil
+            if FullCharSheet ~= '' then
+                FullCharSheet.call('loadTokens', tokens)
+            end
+        end
+end
+
+--[[
+function onObjectDestroyed(dying_object)
+    guid = dying_object.getGUID()
+    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
+        onCollisionExit({collision_object = dying_object})
+    end
+
+    if guid and (tokens and tokens[guid]) then
+        onCollisionExit({collision_object = dying_object})
+    end
+end
+--]]
\ No newline at end of file
diff --git a/beta/P4.3aadbe.lua b/beta/P4.3aadbe.lua
new file mode 100644
index 0000000..3f5a075
--- /dev/null
+++ b/beta/P4.3aadbe.lua
@@ -0,0 +1,398 @@
+--KDM Gear Sheet (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+
+function initCustomButtons()
+	thick = 0.14
+
+	--armor and hit locations
+    dx = 6.35; dy = -8.7; px =2.36
+	createCounter('armor_head', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_body', 'big', dx, dy); dx = dx + px + 0.15
+	createCounter('armor_waist', 'big', dx, dy); dx = dx + px + 0.1
+	createCounter('armor_arms', 'big', dx, dy); dx = dx + px + 0.13
+	createCounter('armor_legs', 'big', dx, dy)
+
+	dx = 6.8; dy = -7.1; px = 1.63; py = 0.65; ry = dy
+	createToggle('injury_head', dx, dy); dx = dx + px;
+	createToggle('injury_body_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_body_h', dx, dy); dx = dx + px;
+	createToggle('injury_wasit_l', dx, dy); dx = dx + 0.86
+	createToggle('injury_wasit_h', dx, dy); dx = dx + px;
+	createToggle('injury_arms_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_arms_h', dx, dy); dx = dx + px;
+	createToggle('injury_legs_l', dx, dy); dx = dx + 0.85
+	createToggle('injury_legs_h', dx, dy)
+
+    dx = 18; dy = -5.25;
+    createResetArmor('resetArmor', dx, dy)
+	
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+--make a style of button by adding a new size
+    buttons.params.sizes.std = {
+        display = {width = 800, height = 250, font = 130},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 1000},
+        button = {width = 280, height = 280, font = 350},
+        offsets = { bottomButtons = {x = 0.44, y = 0, z = -1.66} }
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 280, height = 280, font = 290},
+        button = {width = 300, height = 300, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 150},
+        button = {width = 300, height = 200, font = 100},
+        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 3.9, y = 0, z = -0.25}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------curnil's standalone token script
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+FullCharSheet = ''
+tokens = {}
+-------------
+
+
+--Loads
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'ResetArmor', function () resetArmor(tostring(i)) end)
+        end
+    end
+
+    generateButtonParameters()
+
+    --loads saved data
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+
+    updateDisplay(true)
+end
+
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createResetArmor(name, px, py)
+    name = "r_" .. name
+    buttons[name] = { type = 'std'}
+    buttons.params.positions[name] = {x = px, y= thick, z = py}
+end
+
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+			if (prefix == "r_") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetArmor', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isReset = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+	buttonInfo.function_owner = self
+	buttonInfo.index = buttons.index
+	buttonInfo.click_function = targetFunc
+	if offsets != nil then
+		reverse_x = offsets.x
+	end
+	--reversed
+	if isLeft then
+		orientationModifier = -1
+	else
+		orientationModifier = 1
+	end
+
+	if offsets == nil then
+		buttonInfo.position = {positions.x, positions.y, positions.z}
+	else
+		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+	end
+	buttonInfo.width = sizes.width
+	buttonInfo.height = sizes.height
+	buttonInfo.font_size = sizes.font
+	buttonInfo.label = label
+	buttons.index = buttons.index + 1
+	return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isReset == true) then
+				buttons[tostring(i)].display.label = 'Reset Armor'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                --if (buttons.toggles[tostring(i)].isClicked == false) then
+                    buttons[tostring(i)].display.label = "X"
+					--buttons.toggles[tostring(i)].isClicked = true
+                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)
+                else
+                    buttons[tostring(i)].display.label = ""
+					--buttons.toggles[tostring(i)].isClicked = false
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+
+end
+
+--------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function dud()
+end
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+	else
+		buttons.counts[location] = 1
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+--reset armor
+function resetArmor()
+    --Resets counts on each display to 0
+    --Resets Armor and Injuries
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'r_resetArmor' then
+            buttons.counts[tostring(i)] = 0
+        end
+    end
+    --This section will add armor counts for each area
+    --[[
+
+    ]]
+    updateDisplay(false)
+end
+
+
+
+----------------------------
+--curnil's token scripts standlone
+----------------------------
+function onCollisionEnter(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isKDMFULL") then
+        if FullCharSheet == '' then
+            FullCharSheet = obj
+        end
+    end
+
+    -- special rules for bonus tiles
+    if obj.getVar("isKdmEffectsObject") then
+        tokens[obj.getGUID()] = obj.call("getEffects", nil)
+        if FullCharSheet ~= '' then
+			FullCharSheet.call('loadTokens', tokens)
+        end
+    end
+end
+
+-- This function detaches the tile and saves data to it
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+        if obj.getVar("isKDMFULL") then
+            if FullCharSheet ~= '' and FullCharSheet.guid == obj.guid then
+                FullCharSheet = ''
+            end
+        end
+
+        if obj.getVar("isKdmEffectsObject") then
+            -- remove the token from the tokens collection
+            tokens[obj.getGUID()] = nil
+            if FullCharSheet ~= '' then
+                FullCharSheet.call('loadTokens', tokens)
+            end
+        end
+end
+
+--[[
+function onObjectDestroyed(dying_object)
+    guid = dying_object.getGUID()
+    if FullCharSheet ~= '' and FullCharSheet.guid == guid then
+        onCollisionExit({collision_object = dying_object})
+    end
+
+    if guid and (tokens and tokens[guid]) then
+        onCollisionExit({collision_object = dying_object})
+    end
+end
+--]]
\ No newline at end of file
diff --git a/beta/Quarries.9abd27.lua b/beta/Quarries.9abd27.lua
new file mode 100644
index 0000000..e041ac2
--- /dev/null
+++ b/beta/Quarries.9abd27.lua
@@ -0,0 +1,29 @@
+function onload()
+  b_display = { index = 0,
+                      click_function = 'updateDisplay',
+                      label = self.getName(),
+                      function_owner = self,
+                      position = {0, 0.09, 0},
+                      rotation = {0, 0, 0},
+                      width = 6000,
+                      height = 500,
+                      font_size = 300}
+
+  local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+  end
+
+  self.createButton(b_display)
+end
+
+function updateDisplay()
+    b_display.label = self.getName()
+
+    local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+    end
+
+    self.editButton(b_display)
+end
\ No newline at end of file
diff --git a/beta/Speed Token.943c9d.lua b/beta/Speed Token.943c9d.lua
new file mode 100644
index 0000000..c2936ac
--- /dev/null
+++ b/beta/Speed Token.943c9d.lua	
@@ -0,0 +1,14 @@
+isKdmEffectsObject = true
+effects = {
+    speed = 1
+}
+
+function getEffects()
+    rot = self.getRotation()
+    if rot[3] > 345 or rot[3] < 15 then
+        effects.speed = -1
+    else
+        effects.speed = 1
+    end
+    return effects
+end
\ No newline at end of file
diff --git a/beta/Story Board Left.40ac46.lua b/beta/Story Board Left.40ac46.lua
new file mode 100644
index 0000000..cdc5709
--- /dev/null
+++ b/beta/Story Board Left.40ac46.lua	
@@ -0,0 +1,496 @@
+--KDM Storybook
+
+---------------------------------
+--Vars
+--------------------------------
+manualsIndex = {
+	tab1 = {
+		tabName = 'Rules', 
+		pages = {
+			{pageName = 'Introduction', stateNum = 2},
+			{pageName = 'Prologue', stateNum = 5},
+			{pageName = 'First Story', stateNum = 23},
+			{pageName = 'Survival Guide', stateNum = 36},
+			{pageName = 'Survivors', stateNum = 40},
+			{pageName = 'Monsters', stateNum = 48},
+			{pageName = 'Resources', stateNum = 56},
+			{pageName = 'Terrain', stateNum = 59},
+			{pageName = 'Hunt Phase', stateNum = 61},
+			{pageName = 'Showdown Phase', stateNum = 65},
+			{pageName = 'Settlement Phase', stateNum = 79},
+			{pageName = 'Game Variants', stateNum = 85},
+			{pageName = 'Glossary', stateNum = 87},
+		}
+	},
+	tab2 = {
+		tabName = 'Timeline Events', 
+		pages = {
+			{pageName = 'Returning Survivors', stateNum = 2},
+			{pageName = 'Endless Screams', stateNum = 4},
+			{pageName = 'Bone Witch', stateNum = 6},
+			{pageName = 'Hands of Heat', stateNum = 8},
+			{pageName = 'Armored Strangers', stateNum = 10},
+			{pageName = 'Phoenix Feather', stateNum = 12},
+			{pageName = 'Regal Visit', stateNum = 14},
+			{pageName = 'Principle: Conviction', stateNum = 16},
+			{pageName = 'Watched', stateNum = 18},
+		}
+	},
+	tab3 = {
+		tabName = 'Hunt Events', 
+		pages = {
+			{pageName = 'Random Events 1-8', stateNum = 2},
+			{pageName = 'Random Events 9-15', stateNum = 3},
+			{pageName = 'Random Events 16-25', stateNum = 4},
+			{pageName = 'Random Events 26-31', stateNum = 5},
+			{pageName = 'Random Events 32-44', stateNum = 6},
+			{pageName = 'Random Events 45-53', stateNum = 7},
+			{pageName = 'Random Events 54-63', stateNum = 8},
+			{pageName = 'Random Events 64-71', stateNum = 9},
+			{pageName = 'Random Events 72-80', stateNum = 10},
+			{pageName = 'Random Events 81-87', stateNum = 11},
+			{pageName = 'Random Events 88-96', stateNum = 12},
+			{pageName = 'Random Events 97-100', stateNum = 13},
+			{pageName = 'Overwhelming Darkness', stateNum = 14},
+			{pageName = 'Herb Gathering', stateNum = 16},
+			{pageName = 'Mineral Gathering', stateNum = 18},
+			{pageName = 'Run Away', stateNum = 20},
+		}
+	},
+	tab4 = {
+		tabName = 'Showdown Setups', 
+		pages = {
+			{pageName = 'White Lion', stateNum = 2},
+			{pageName = 'Screaming Antelope', stateNum = 4},
+			{pageName = 'Phoenix', stateNum = 6},
+			{pageName = 'Nemesis: Butcher', stateNum = 8},
+			{pageName = "Nemesis: King's Man", stateNum = 10},
+			{pageName = 'Nemesis: The Hand', stateNum = 12},
+			{pageName = 'Nemesis: Watcher', stateNum = 14},
+			{pageName = 'Legendary Monsters', stateNum = 16},
+		}
+	},
+	tab5 = {
+		tabName = 'Settlement Events', 
+		pages = {
+			{pageName = 'Intimacy', stateNum = 2},
+			{pageName = 'Birth of a Savior', stateNum = 4},
+			{pageName = 'Cooking', stateNum = 6},
+			{pageName = 'White Speaker', stateNum = 8},
+		}
+	},
+	tab6 = {
+		tabName = 'Milestone Events', 
+		pages = {
+			{pageName = 'Age', stateNum = 2},
+			{pageName = 'Bold', stateNum = 4},
+			{pageName = 'Insight', stateNum = 6},
+			{pageName = 'See the Truth', stateNum = 8},
+			{pageName = 'White Secret', stateNum = 10},
+			{pageName = 'Principle: New Life', stateNum = 12},
+			{pageName = 'Principle: Death', stateNum = 14},
+			{pageName = 'Principle: Society', stateNum = 16},
+			{pageName = 'Hooded Knight', stateNum = 18},
+			{pageName = 'Game Over', stateNum = 20},
+		}
+	},
+	tab7 = {
+		tabName = 'Severe Injuries', 
+		pages = {
+			{pageName = 'Brain Trauma', stateNum = 2},
+			{pageName = 'Head, Arms', stateNum = 3},
+			{pageName = 'Body, Waist, Legs', stateNum = 4},
+		}
+	},
+	tab8 = {
+		tabName = 'Monster Events', 
+		pages = {
+			{pageName = 'Zero Presence', stateNum = 2},
+			{pageName = 'Crush and Devour', stateNum = 4},
+			{pageName = 'Legendary Lungs', stateNum = 6},
+			{pageName = "King's Step", stateNum = 8},
+			{pageName = "King's Curse", stateNum = 10},
+			{pageName = 'Run Away', stateNum = 12},
+			{pageName = 'Blackout', stateNum = 14},
+		}
+	},
+}
+gameBoxGUID = ''
+zoneSelfGUID = ''
+
+activeBook = {}
+changingBook = false
+currentPage = 1
+
+cloneSpawnPos = {0,0,-80}
+
+---------------------------------
+--Init
+--------------------------------
+
+
+function onLoad()
+
+	local table = Global.getTable('staticObjs')
+	gameBoxGUID = table.gameBox.guid
+	table = Global.getTable('zones')
+	zoneSelfGUID = table.zoneStoryL.guid
+	
+	initTabButtons()
+	initBrowseButtons()
+
+end
+
+function initTabButtons()
+	local index = manualsIndex
+	local col = 4
+	local row = 2
+	local dx = ( 24 / col / 2 ) - 12
+	local dy = 8.5
+	local w = (12000 / col) - (col * 25)
+	local px = 24/ col
+	local py = -1.25
+	local i = 1
+	local h = 600
+	local f = 350
+	for k,v in pairs(index) do
+		local func = k
+		local label = v.tabName
+		self.createButton({
+			click_function = func,
+			function_owner = self,
+			label = label,
+			position = {dy,0.14,dx},
+			rotation = {0,90,0},
+			width = w,
+			height = h,
+			font_size = f
+		})
+		if i < col or i > col then
+			dx = dx + px
+		elseif i == col then
+			dx = dx - (px*(col-1))
+			dy = dy + py
+		else
+			dx = dx
+		end
+		i = i+1
+	end
+end
+
+function initBrowseButtons()
+	self.createButton({
+		click_function = 'nextPage',
+		function_owner = self,
+		label = '>',
+		position = {-8.5,0.14,-1.5},
+		rotation = {0,90,0},
+		width = 1400,
+		height = 600,
+		font_size = 350
+	})
+	self.createButton({
+		click_function = 'previousPage',
+		function_owner = self,
+		label = '<',
+		position = {-8.5,0.14,-4.5},
+		rotation = {0,90,0},
+		width = 1400,
+		height = 600,
+		font_size = 350
+	})
+end
+
+
+---------------------------------
+--Events
+--------------------------------
+
+function onDropped()
+	local zone = getObjectFromGUID(zoneSelfGUID)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
+
+---------------------------------
+--Button fnc
+--------------------------------
+
+function nextPage()
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			local obj = v.setState(currentPage + 1)
+			if obj != nil then
+				currentPage = currentPage + 1
+			end
+		end
+	end
+end
+
+function previousPage()
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			if currentPage != 1 then
+				local obj = v.setState(currentPage - 1)
+				if obj != nil then
+					currentPage = currentPage - 1
+				end
+			end
+		end
+	end
+end
+
+function tab1()
+	local tab = 'tab1'
+	tabClick(tab)
+end
+
+function tab2()
+	local tab = 'tab2'
+	tabClick(tab)
+end
+
+function tab3()
+	local tab = 'tab3'
+	tabClick(tab)
+end
+
+function tab4()
+	local tab = 'tab4'
+	tabClick(tab)
+end
+
+function tab5()
+	local tab = 'tab5'
+	tabClick(tab)
+end
+
+function tab6()
+	local tab = 'tab6'
+	tabClick(tab)
+end
+
+function tab7()
+	local tab = 'tab7'
+	tabClick(tab)
+end	
+
+function tab8()
+	local tab = 'tab8'
+	tabClick(tab)
+end
+
+---------pages
+
+function page1()
+	local page = 1
+	pageClick(page)
+end
+
+function page2()
+	local page = 2
+	pageClick(page)
+end
+
+function page3()
+	local page = 3
+	pageClick(page)
+end
+
+function page4()
+	local page = 4
+	pageClick(page)
+end
+
+function page5()
+	local page = 5
+	pageClick(page)
+end
+
+function page6()
+	local page = 6
+	pageClick(page)
+end
+
+function page7()
+	local page = 7
+	pageClick(page)
+end	
+
+function page8()
+	local page = 8
+	pageClick(page)
+end
+
+function page9()
+	local page = 9
+	pageClick(page)
+end
+
+function page10()
+	local page = 10
+	pageClick(page)
+end
+
+function page11()
+	local page = 11
+	pageClick(page)
+end
+
+function page12()
+	local page = 12
+	pageClick(page)
+end
+
+function page13()
+	local page = 13
+	pageClick(page)
+end
+
+function page14()
+	local page = 14
+	pageClick(page)
+end
+
+function page15()
+	local page = 15
+	pageClick(page)
+end
+
+function page16()
+	local page = 16
+	pageClick(page)
+end	
+
+----------------------------------------
+--primary fcns
+---------------------------------------
+
+function tabClick(tab)
+	--clear books
+	changeBook(tab)
+	--clear last tab pages
+	local btns = self.getButtons()
+	for k,v in pairs(btns) do
+		local text = v.click_function
+		if string.find(text, 'page') then
+			local index = v.index
+			self.removeButton(index)
+		end
+	end
+	--create page list
+	local pagesTable = manualsIndex[tab].pages
+	local col = 1
+	local row = #pagesTable
+	local dx = 9
+	local dy = 5.75
+	local w = 2900
+	local px = 24/ col
+	local py = -0.95
+	local i = 1
+	local h = 400
+	local f = 300
+	local btn = {}
+	pageBtns = {}
+	for k,v in pairs(pagesTable) do
+		local func = 'page' .. i
+		local label = v.pageName
+		local btn = self.createButton({
+			click_function = func,
+			function_owner = self,
+			label = label,
+			position = {dy,0.14,dx},
+			rotation = {0,90,0},
+			width = w,
+			height = h,
+			font_size = f
+		})
+		dy = dy + py
+		i = i+1
+	end
+end
+
+function changeBook(tab)
+	if changingBook != true then
+		changingBook = true
+		local calledNameTag = manualsIndex[tab].tabName
+		activeBook = calledNameTag
+		startLuaCoroutine(self, 'changeBookCoroutine')
+	end
+end
+
+function changeBookCoroutine()
+	local alreadyExists = false
+	--clear old books
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			if v.getName() != activeBook then
+				v.destruct()
+			else
+				alreadyExists = true
+			end
+		end
+	end
+	--spawn new one
+	if alreadyExists == false then
+		local book = {}
+		local gameBox = getObjectFromGUID(gameBoxGUID)
+		objects = gameBox.getObjects()
+		for k,v in pairs(objects) do
+			if v.name == activeBook then
+				table.insert(book, v.guid)
+			end
+		end
+		--spawn
+		if book[1] != nil then
+			local params = {}
+			params.guid = book[1]
+			local pos = self.getPosition()
+			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
+			local rot = self.getRotation()
+			params.rotation = {rot[1], rot[2] + 90, rot[3]}
+			book = gameBox.takeObject(params)
+			currentPage = 1
+			coroutine.yield(0)
+			--dupe
+			params = {}
+			params.position = cloneSpawnPos
+			local clone = book.clone(params)
+			coroutine.yield(0)
+			pos = gameBox.getPosition()
+			params = {pos[1],pos[2] + 2,pos[3]}
+			clone.setPositionSmooth(params)
+			coroutine.yield(0)
+		end
+	end
+	changingBook = false
+	return 1
+end
+
+function pageClick(pageNum)
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	local tabTable = {}
+	if activeBook != nil then
+		for k,v in pairs(manualsIndex) do
+			if v.tabName == activeBook then
+				tabTable = v
+			end
+		end
+		local state = tabTable.pages[pageNum].stateNum
+		for k,v in pairs(objects) do
+			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
+				if currentPage != state then
+					v.setState(state)
+					currentPage = state
+				end
+			end
+		end
+	end
+end
\ No newline at end of file
diff --git a/beta/Story Board Top.fece67.lua b/beta/Story Board Top.fece67.lua
new file mode 100644
index 0000000..319b407
--- /dev/null
+++ b/beta/Story Board Top.fece67.lua	
@@ -0,0 +1,496 @@
+--KDM Storybook
+
+---------------------------------
+--Vars
+--------------------------------
+manualsIndex = {
+	tab1 = {
+		tabName = 'Rules', 
+		pages = {
+			{pageName = 'Introduction', stateNum = 2},
+			{pageName = 'Prologue', stateNum = 5},
+			{pageName = 'First Story', stateNum = 23},
+			{pageName = 'Survival Guide', stateNum = 36},
+			{pageName = 'Survivors', stateNum = 40},
+			{pageName = 'Monsters', stateNum = 48},
+			{pageName = 'Resources', stateNum = 56},
+			{pageName = 'Terrain', stateNum = 59},
+			{pageName = 'Hunt Phase', stateNum = 61},
+			{pageName = 'Showdown Phase', stateNum = 65},
+			{pageName = 'Settlement Phase', stateNum = 79},
+			{pageName = 'Game Variants', stateNum = 85},
+			{pageName = 'Glossary', stateNum = 87},
+		}
+	},
+	tab2 = {
+		tabName = 'Timeline Events', 
+		pages = {
+			{pageName = 'Returning Survivors', stateNum = 2},
+			{pageName = 'Endless Screams', stateNum = 4},
+			{pageName = 'Bone Witch', stateNum = 6},
+			{pageName = 'Hands of Heat', stateNum = 8},
+			{pageName = 'Armored Strangers', stateNum = 10},
+			{pageName = 'Phoenix Feather', stateNum = 12},
+			{pageName = 'Regal Visit', stateNum = 14},
+			{pageName = 'Principle: Conviction', stateNum = 16},
+			{pageName = 'Watched', stateNum = 18},
+		}
+	},
+	tab3 = {
+		tabName = 'Hunt Events', 
+		pages = {
+			{pageName = 'Random Events 1-8', stateNum = 2},
+			{pageName = 'Random Events 9-15', stateNum = 3},
+			{pageName = 'Random Events 16-25', stateNum = 4},
+			{pageName = 'Random Events 26-31', stateNum = 5},
+			{pageName = 'Random Events 32-44', stateNum = 6},
+			{pageName = 'Random Events 45-53', stateNum = 7},
+			{pageName = 'Random Events 54-63', stateNum = 8},
+			{pageName = 'Random Events 64-71', stateNum = 9},
+			{pageName = 'Random Events 72-80', stateNum = 10},
+			{pageName = 'Random Events 81-87', stateNum = 11},
+			{pageName = 'Random Events 88-96', stateNum = 12},
+			{pageName = 'Random Events 97-100', stateNum = 13},
+			{pageName = 'Overwhelming Darkness', stateNum = 14},
+			{pageName = 'Herb Gathering', stateNum = 16},
+			{pageName = 'Mineral Gathering', stateNum = 18},
+			{pageName = 'Run Away', stateNum = 20},
+		}
+	},
+	tab4 = {
+		tabName = 'Showdown Setups', 
+		pages = {
+			{pageName = 'White Lion', stateNum = 2},
+			{pageName = 'Screaming Antelope', stateNum = 4},
+			{pageName = 'Phoenix', stateNum = 6},
+			{pageName = 'Nemesis: Butcher', stateNum = 8},
+			{pageName = "Nemesis: King's Man", stateNum = 10},
+			{pageName = 'Nemesis: The Hand', stateNum = 12},
+			{pageName = 'Nemesis: Watcher', stateNum = 14},
+			{pageName = 'Legendary Monsters', stateNum = 16},
+		}
+	},
+	tab5 = {
+		tabName = 'Settlement Events', 
+		pages = {
+			{pageName = 'Intimacy', stateNum = 2},
+			{pageName = 'Birth of a Savior', stateNum = 4},
+			{pageName = 'Cooking', stateNum = 6},
+			{pageName = 'White Speaker', stateNum = 8},
+		}
+	},
+	tab6 = {
+		tabName = 'Milestone Events', 
+		pages = {
+			{pageName = 'Age', stateNum = 2},
+			{pageName = 'Bold', stateNum = 4},
+			{pageName = 'Insight', stateNum = 6},
+			{pageName = 'See the Truth', stateNum = 8},
+			{pageName = 'White Secret', stateNum = 10},
+			{pageName = 'Principle: New Life', stateNum = 12},
+			{pageName = 'Principle: Death', stateNum = 14},
+			{pageName = 'Principle: Society', stateNum = 16},
+			{pageName = 'Hooded Knight', stateNum = 18},
+			{pageName = 'Game Over', stateNum = 20},
+		}
+	},
+	tab7 = {
+		tabName = 'Severe Injuries', 
+		pages = {
+			{pageName = 'Brain Trauma', stateNum = 2},
+			{pageName = 'Head, Arms', stateNum = 3},
+			{pageName = 'Body, Waist, Legs', stateNum = 4},
+		}
+	},
+	tab8 = {
+		tabName = 'Monster Events', 
+		pages = {
+			{pageName = 'Zero Presence', stateNum = 2},
+			{pageName = 'Crush and Devour', stateNum = 4},
+			{pageName = 'Legendary Lungs', stateNum = 6},
+			{pageName = "King's Step", stateNum = 8},
+			{pageName = "King's Curse", stateNum = 10},
+			{pageName = 'Run Away', stateNum = 12},
+			{pageName = 'Blackout', stateNum = 14},
+		}
+	},
+}
+gameBoxGUID = ''
+zoneSelfGUID = ''
+
+activeBook = {}
+changingBook = false
+currentPage = 1
+
+cloneSpawnPos = {0,0,-80}
+
+---------------------------------
+--Init
+--------------------------------
+
+
+function onLoad()
+
+	local table = Global.getTable('staticObjs')
+	gameBoxGUID = table.gameBox.guid
+	table = Global.getTable('zones')
+	zoneSelfGUID = table.zoneStoryT.guid
+	
+	initTabButtons()
+	initBrowseButtons()
+
+end
+
+function initTabButtons()
+	local index = manualsIndex
+	local col = 4
+	local row = 2
+	local dx = ( 24 / col / 2 ) - 12
+	local dy = 8.5
+	local w = (12000 / col) - (col * 25)
+	local px = 24/ col
+	local py = -1.25
+	local i = 1
+	local h = 600
+	local f = 350
+	for k,v in pairs(index) do
+		local func = k
+		local label = v.tabName
+		self.createButton({
+			click_function = func,
+			function_owner = self,
+			label = label,
+			position = {dy,0.14,dx},
+			rotation = {0,90,0},
+			width = w,
+			height = h,
+			font_size = f
+		})
+		if i < col or i > col then
+			dx = dx + px
+		elseif i == col then
+			dx = dx - (px*(col-1))
+			dy = dy + py
+		else
+			dx = dx
+		end
+		i = i+1
+	end
+end
+
+function initBrowseButtons()
+	self.createButton({
+		click_function = 'nextPage',
+		function_owner = self,
+		label = '>',
+		position = {-8.5,0.14,-1.5},
+		rotation = {0,90,0},
+		width = 1400,
+		height = 600,
+		font_size = 350
+	})
+	self.createButton({
+		click_function = 'previousPage',
+		function_owner = self,
+		label = '<',
+		position = {-8.5,0.14,-4.5},
+		rotation = {0,90,0},
+		width = 1400,
+		height = 600,
+		font_size = 350
+	})
+end
+
+
+---------------------------------
+--Events
+--------------------------------
+
+function onDropped()
+	local zone = getObjectFromGUID(zoneSelfGUID)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
+
+---------------------------------
+--Button fnc
+--------------------------------
+
+function nextPage()
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			local obj = v.setState(currentPage + 1)
+			if obj != nil then
+				currentPage = currentPage + 1
+			end
+		end
+	end
+end
+
+function previousPage()
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			if currentPage != 1 then
+				local obj = v.setState(currentPage - 1)
+				if obj != nil then
+					currentPage = currentPage - 1
+				end
+			end
+		end
+	end
+end
+
+function tab1()
+	local tab = 'tab1'
+	tabClick(tab)
+end
+
+function tab2()
+	local tab = 'tab2'
+	tabClick(tab)
+end
+
+function tab3()
+	local tab = 'tab3'
+	tabClick(tab)
+end
+
+function tab4()
+	local tab = 'tab4'
+	tabClick(tab)
+end
+
+function tab5()
+	local tab = 'tab5'
+	tabClick(tab)
+end
+
+function tab6()
+	local tab = 'tab6'
+	tabClick(tab)
+end
+
+function tab7()
+	local tab = 'tab7'
+	tabClick(tab)
+end	
+
+function tab8()
+	local tab = 'tab8'
+	tabClick(tab)
+end
+
+---------pages
+
+function page1()
+	local page = 1
+	pageClick(page)
+end
+
+function page2()
+	local page = 2
+	pageClick(page)
+end
+
+function page3()
+	local page = 3
+	pageClick(page)
+end
+
+function page4()
+	local page = 4
+	pageClick(page)
+end
+
+function page5()
+	local page = 5
+	pageClick(page)
+end
+
+function page6()
+	local page = 6
+	pageClick(page)
+end
+
+function page7()
+	local page = 7
+	pageClick(page)
+end	
+
+function page8()
+	local page = 8
+	pageClick(page)
+end
+
+function page9()
+	local page = 9
+	pageClick(page)
+end
+
+function page10()
+	local page = 10
+	pageClick(page)
+end
+
+function page11()
+	local page = 11
+	pageClick(page)
+end
+
+function page12()
+	local page = 12
+	pageClick(page)
+end
+
+function page13()
+	local page = 13
+	pageClick(page)
+end
+
+function page14()
+	local page = 14
+	pageClick(page)
+end
+
+function page15()
+	local page = 15
+	pageClick(page)
+end
+
+function page16()
+	local page = 16
+	pageClick(page)
+end	
+
+----------------------------------------
+--primary fcns
+---------------------------------------
+
+function tabClick(tab)
+	--clear books
+	changeBook(tab)
+	--clear last tab pages
+	local btns = self.getButtons()
+	for k,v in pairs(btns) do
+		local text = v.click_function
+		if string.find(text, 'page') then
+			local index = v.index
+			self.removeButton(index)
+		end
+	end
+	--create page list
+	local pagesTable = manualsIndex[tab].pages
+	local col = 1
+	local row = #pagesTable
+	local dx = 9
+	local dy = 5.75
+	local w = 2900
+	local px = 24/ col
+	local py = -0.95
+	local i = 1
+	local h = 400
+	local f = 300
+	local btn = {}
+	pageBtns = {}
+	for k,v in pairs(pagesTable) do
+		local func = 'page' .. i
+		local label = v.pageName
+		local btn = self.createButton({
+			click_function = func,
+			function_owner = self,
+			label = label,
+			position = {dy,0.14,dx},
+			rotation = {0,90,0},
+			width = w,
+			height = h,
+			font_size = f
+		})
+		dy = dy + py
+		i = i+1
+	end
+end
+
+function changeBook(tab)
+	if changingBook != true then
+		changingBook = true
+		local calledNameTag = manualsIndex[tab].tabName
+		activeBook = calledNameTag
+		startLuaCoroutine(self, 'changeBookCoroutine')
+	end
+end
+
+function changeBookCoroutine()
+	local alreadyExists = false
+	--clear old books
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	for k,v in pairs(objects) do
+		if string.find(v.getDescription(), 'reference') then
+			if v.getName() != activeBook then
+				v.destruct()
+			else
+				alreadyExists = true
+			end
+		end
+	end
+	--spawn new one
+	if alreadyExists == false then
+		local book = {}
+		local gameBox = getObjectFromGUID(gameBoxGUID)
+		objects = gameBox.getObjects()
+		for k,v in pairs(objects) do
+			if v.name == activeBook then
+				table.insert(book, v.guid)
+			end
+		end
+		--spawn
+		if book[1] != nil then
+			local params = {}
+			params.guid = book[1]
+			local pos = self.getPosition()
+			params.position = {pos[1]-3,pos[2] + 2,pos[3]+0.2}
+			local rot = self.getRotation()
+			params.rotation = {rot[1], rot[2] + 90, rot[3]}
+			book = gameBox.takeObject(params)
+			currentPage = 1
+			coroutine.yield(0)
+			--dupe
+			params = {}
+			params.position = cloneSpawnPos
+			local clone = book.clone(params)
+			coroutine.yield(0)
+			pos = gameBox.getPosition()
+			params = {pos[1],pos[2] + 2,pos[3]}
+			clone.setPositionSmooth(params)
+			coroutine.yield(0)
+		end
+	end
+	changingBook = false
+	return 1
+end
+
+function pageClick(pageNum)
+	local zoneSelf = getObjectFromGUID(zoneSelfGUID)
+	local objects = zoneSelf.getObjects()
+	local tabTable = {}
+	if activeBook != nil then
+		for k,v in pairs(manualsIndex) do
+			if v.tabName == activeBook then
+				tabTable = v
+			end
+		end
+		local state = tabTable.pages[pageNum].stateNum
+		for k,v in pairs(objects) do
+			if string.find(v.getName(), string.sub(activeBook, 1, 4)) and string.find(v.getDescription(), 'reference') then
+				if currentPage != state then
+					v.setState(state)
+					currentPage = state
+				end
+			end
+		end
+	end
+end
\ No newline at end of file
diff --git a/beta/Timeline Events.92b95e.lua b/beta/Timeline Events.92b95e.lua
new file mode 100644
index 0000000..e041ac2
--- /dev/null
+++ b/beta/Timeline Events.92b95e.lua	
@@ -0,0 +1,29 @@
+function onload()
+  b_display = { index = 0,
+                      click_function = 'updateDisplay',
+                      label = self.getName(),
+                      function_owner = self,
+                      position = {0, 0.09, 0},
+                      rotation = {0, 0, 0},
+                      width = 6000,
+                      height = 500,
+                      font_size = 300}
+
+  local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+  end
+
+  self.createButton(b_display)
+end
+
+function updateDisplay()
+    b_display.label = self.getName()
+
+    local description = string.match(self.getDescription(), '%d+')
+    if description != '' and type(tonumber(description)) == 'number' then
+        b_display.font_size = tonumber(description)
+    end
+
+    self.editButton(b_display)
+end
\ No newline at end of file
diff --git a/beta/Unnamed Survivor.2f95db.lua b/beta/Unnamed Survivor.2f95db.lua
new file mode 100644
index 0000000..77b1b67
--- /dev/null
+++ b/beta/Unnamed Survivor.2f95db.lua	
@@ -0,0 +1,630 @@
+--KDM Survivor Sheet-Full (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+function initCustomButtons()
+	thick = 0.14
+
+	--minimize button
+	dx = 6.1; dy = -12.1
+	createMinimize('minimize', 'collapse', dx, dy)
+
+	--header
+	dx = -1; dy =-11.5
+	createTextField('survivor_name', 'txtbig', dx, dy)
+
+	dx =7.45; dy =-11.27; px = 1.25
+	createToggle('gender_m', dx, dy); dx = dx + px;
+	createToggle('gender_f', dx, dy)
+
+	--survival
+	dx = -5.265; dy =2
+	createCounter('survival', 'big', dx, dy)
+
+	dx = -7.73; dy = 2
+	createCounter('survival_limit', 'big', dx, dy)
+
+	--dx = -2.48; dy = -9.25
+	--createToggle('survival_disabled', dx, dy)
+
+	dx = -3.365; dy = 0.525; py = 0.925
+    createToggle('dodge', dx, dy); dy = dy + py;
+	createToggle('encourage', dx, dy); dy = dy + py;
+	createToggle('surge', dx, dy); dy = dy + py;
+	createToggle('dash', dx, dy)
+
+	--stats
+	dx = -7.45; dy = -3.4; px = 3
+	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
+	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
+	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
+	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('speed', 'bigAttr', dx, dy)
+
+	--insanity
+	dx = 4.55; dy = 1.9
+	createCounter('insanity', 'big', dx, dy)
+	dx = 4.55; dy = 3.6
+	createToggle('brain_injury', dx, dy)
+
+	--experience
+	dx = -8.5; dy = -9.1; px = 0.665
+	createToggle('xp_1', dx, dy); dx = dx + px;
+	createToggle('xp_2', dx, dy); dx = dx + px;
+	createToggle('xp_3', dx, dy); dx = dx + px;
+	createToggle('xp_4', dx, dy); dx = dx + px;
+	createToggle('xp_5', dx, dy); dx = dx + px;
+	createToggle('xp_6', dx, dy); dx = dx + px;
+	createToggle('xp_7', dx, dy); dx = dx + px;
+	createToggle('xp_8', dx, dy); dx = dx + px;
+	createToggle('xp_9', dx, dy); dx = dx + px;
+	createToggle('xp_10', dx, dy); dx = dx + px;
+	createToggle('xp_11', dx, dy); dx = dx + px;
+	createToggle('xp_12', dx, dy); dx = dx + px;
+	createToggle('xp_13', dx, dy); dx = dx + px;
+	createToggle('xp_14', dx, dy); dx = dx + px;
+	createToggle('xp_15', dx, dy); dx = dx + px;
+	createToggle('xp_16', dx, dy)
+
+	--dx = 4.94; dy = -6.9
+	--createToggle('no_hunt', dx, dy)
+
+	--skills
+	dx = 6; dy =-9.1
+	createTextField('proficiency_type', 'txt', dx, dy)
+
+	dx = 3.645; dy = -8.01; px = 0.667
+	createToggle('proficiency_1', dx, dy); dx = dx + px;
+	createToggle('proficiency_2', dx, dy); dx = dx + px;
+	createToggle('proficiency_3', dx, dy); dx = dx + px;
+	createToggle('proficiency_4', dx, dy); dx = dx + px;
+	createToggle('proficiency_5', dx, dy); dx = dx + px;
+	createToggle('proficiency_6', dx, dy); dx = dx + px;
+	createToggle('proficiency_7', dx, dy); dx = dx + px;
+	createToggle('proficiency_8', dx, dy)
+
+	dx = -7.65; dy = 5.68; px =0.715
+	createToggle('courage_1', dx, dy); dx = dx + px;
+	createToggle('courage_2', dx, dy); dx = dx + px;
+	createToggle('courage_3', dx, dy); dx = dx + px;
+	createToggle('courage_4', dx, dy); dx = dx + px;
+	createToggle('courage_5', dx, dy); dx = dx + px;
+	createToggle('courage_6', dx, dy); dx = dx + px;
+	createToggle('courage_7', dx, dy); dx = dx + px;
+	createToggle('courage_8', dx, dy); dx = dx + px;
+	createToggle('courage_9', dx, dy)
+
+	dx = 1.78; dy = 5.68; px =0.719
+	createToggle('understanding_1', dx, dy); dx = dx + px;
+	createToggle('understanding_2', dx, dy); dx = dx + px;
+	createToggle('understanding_3', dx, dy); dx = dx + px;
+	createToggle('understanding_4', dx, dy); dx = dx + px;
+	createToggle('understanding_5', dx, dy); dx = dx + px;
+	createToggle('understanding_6', dx, dy); dx = dx + px;
+	createToggle('understanding_7', dx, dy); dx = dx + px;
+	createToggle('understanding_8', dx, dy); dx = dx + px;
+	createToggle('understanding_9', dx, dy)
+
+	dx = -8.63; dy = 7.28; py = 0.71
+	createToggle('stalwart', dx, dy); dy = dy + py;
+	createToggle('prepared', dx, dy); dy = dy + py;
+	createToggle('matchmaker', dx, dy)
+
+	dx = 0.8; dy = 7.28; py = 0.71
+	createToggle('analyze', dx, dy); dy = dy + py;
+	createToggle('explore', dx, dy); dy = dy + py;
+	createToggle('tinker', dx, dy)
+
+	dx = 4.63; dy = 10.18; py = 0.71
+	createToggle('skip', dx, dy); dy = dy + py;
+	createToggle('survival', dx, dy); dy = dy + py;
+	createToggle('fightingarts', dx, dy)
+
+
+	dx = -2.5; dy = 11; px = 5
+	createTextField('notes', 'txt3', dx, dy); dx = dx + px
+
+	--------------------
+	--backside buttons
+	-------------------
+	thick = -0.14
+	
+
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+	--make a style of button by adding a new size
+	buttons.params.sizes.collapse = {
+        display = {width = 250, height = 250, font = 250},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+	}
+    buttons.params.sizes.std = {
+        display = {width = 200, height = 150, font = 100},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 800},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
+    }
+    buttons.params.sizes.bigAttr = {
+        display = {width = 0, height = 0, font = 1200},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 150, height = 150, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.genderToggle = {
+        display = {width = 300, height = 300, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 300},
+        button = {width = 400, height = 250, font = 150},
+        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 450},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------------curnils tokens standalone
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+tokens = {}
+tempStats = {}
+--------------
+
+--loads buttons and gets saved data
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+	
+	--categorize buttons
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
+        end
+    end
+    generateButtonParameters()
+
+    --loads saved data if exists
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+	
+	--update display
+    updateDisplay(true)
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = {type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMinimize(name, type, px, py)
+	name = 'm-' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMaximize(name, type, px, py)
+	name = 'm+' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+end
+
+--gets buttons params
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+			elseif (prefix == "m-") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMinimize = true
+			elseif (prefix == "m+") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMaximize = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+--creates buttons
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+        buttonInfo.function_owner = self
+        buttonInfo.index = buttons.index
+        buttonInfo.click_function = targetFunc
+		--reverse things for backside
+		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+			buttonInfo.rotation = {0,0,180}
+			if offsets != nil then
+				reverse_x = -offsets.x
+			end
+		elseif offsets != nil then
+			reverse_x = offsets.x
+		end
+		--reversed
+        if isLeft then
+            orientationModifier = -1
+        else
+            orientationModifier = 1
+        end
+
+        if offsets == nil then
+            buttonInfo.position = {positions.x, positions.y, positions.z}
+        else
+            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+        end
+        buttonInfo.width = sizes.width
+        buttonInfo.height = sizes.height
+        buttonInfo.font_size = sizes.font
+        buttonInfo.label = label
+    buttons.index = buttons.index + 1
+
+    return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isMinimize == true) then
+				buttons[tostring(i)].display.label = '-'
+			elseif (buttons[tostring(i)].isMaximize == true) then
+				buttons[tostring(i)].display.label = '+'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                    buttons[tostring(i)].display.label = "X"
+                else
+                    buttons[tostring(i)].display.label = ""
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+					--curnil token script
+					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
+                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                        updateStat(i)
+                    else
+					--
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+					end
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
+
+---------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_gender_f"] = 0
+		end
+	else
+		buttons.counts[location] = 1
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_gender_f"] = 0
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_b_gender_m"] = 1
+			buttons.counts["t_gender_m"] = 1
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_gender_f"] = 1
+			buttons.counts["t_b_gender_f"] = 1
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		end
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location) --string.gsub(location, "", "")
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then return end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+    ppos = {pos.x + 2, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+			if nm == '__survivor_name' then
+				buttons.counts.__b_survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			elseif nm == '__b_survivor_name' then
+				buttons.counts.__survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			end
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+
+        o = spawnObject({
+            type = 'go_game_piece_black',
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            scale = {1, 1, 1}
+        })
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+--------------------------
+--transfer for minimize
+--------------------------
+function minimizeSheet()
+	if buttons.counts != nil then
+		--hardsave
+		local data_to_save = {}
+		data_to_save.saved_counts = {}
+		for i,v in pairs(buttons.counts) do
+			data_to_save.saved_counts[tostring(i)] = v or 0
+		end
+		saved_data = JSON.encode(data_to_save)
+		self.script_state = saved_data
+		transfer_data = data_to_save
+		startLuaCoroutine(self, 'transferCoroutine')
+	end
+end
+
+function transferCoroutine()
+	local object = self.setState(2)
+	coroutine.yield(0)
+    object.call('loadData', transfer_data)
+	return 1
+end
+
+--------------------------
+--save when dropped (for dropping into bags)
+--------------------------
+function onDropped()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	self.script_state = saved_data
+end
+
+
+
+
+---------------------------
+--Curnils token standalone script version
+---------------------------
+--Curnil's Token scripts
+function loadTokens(loadedTokens)
+    tokens = loadedTokens
+    updateDisplay(false)
+end
+
+function updateStat(stat)
+    local statIncrease = 0
+    for i,v in pairs(tokens) do
+        for j,w in pairs(v) do
+            if stat == "movement" and tostring(j) == "move" then
+                statIncrease = statIncrease + w
+            elseif stat == j then
+                statIncrease = statIncrease + w
+            end
+        end
+    end
+    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
+    loadComplete = true
+end
+
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isGearGrid") then
+        -- remove the token from the tokens collection
+        tokens = {}
+        updateDisplay(false)
+    end
+end
+
+function onPickedUp()
+	tokens = {}
+	updateDisplay(false)
+end
\ No newline at end of file
diff --git a/beta/Unnamed Survivor.42d42b.lua b/beta/Unnamed Survivor.42d42b.lua
new file mode 100644
index 0000000..77b1b67
--- /dev/null
+++ b/beta/Unnamed Survivor.42d42b.lua	
@@ -0,0 +1,630 @@
+--KDM Survivor Sheet-Full (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+function initCustomButtons()
+	thick = 0.14
+
+	--minimize button
+	dx = 6.1; dy = -12.1
+	createMinimize('minimize', 'collapse', dx, dy)
+
+	--header
+	dx = -1; dy =-11.5
+	createTextField('survivor_name', 'txtbig', dx, dy)
+
+	dx =7.45; dy =-11.27; px = 1.25
+	createToggle('gender_m', dx, dy); dx = dx + px;
+	createToggle('gender_f', dx, dy)
+
+	--survival
+	dx = -5.265; dy =2
+	createCounter('survival', 'big', dx, dy)
+
+	dx = -7.73; dy = 2
+	createCounter('survival_limit', 'big', dx, dy)
+
+	--dx = -2.48; dy = -9.25
+	--createToggle('survival_disabled', dx, dy)
+
+	dx = -3.365; dy = 0.525; py = 0.925
+    createToggle('dodge', dx, dy); dy = dy + py;
+	createToggle('encourage', dx, dy); dy = dy + py;
+	createToggle('surge', dx, dy); dy = dy + py;
+	createToggle('dash', dx, dy)
+
+	--stats
+	dx = -7.45; dy = -3.4; px = 3
+	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
+	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
+	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
+	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('speed', 'bigAttr', dx, dy)
+
+	--insanity
+	dx = 4.55; dy = 1.9
+	createCounter('insanity', 'big', dx, dy)
+	dx = 4.55; dy = 3.6
+	createToggle('brain_injury', dx, dy)
+
+	--experience
+	dx = -8.5; dy = -9.1; px = 0.665
+	createToggle('xp_1', dx, dy); dx = dx + px;
+	createToggle('xp_2', dx, dy); dx = dx + px;
+	createToggle('xp_3', dx, dy); dx = dx + px;
+	createToggle('xp_4', dx, dy); dx = dx + px;
+	createToggle('xp_5', dx, dy); dx = dx + px;
+	createToggle('xp_6', dx, dy); dx = dx + px;
+	createToggle('xp_7', dx, dy); dx = dx + px;
+	createToggle('xp_8', dx, dy); dx = dx + px;
+	createToggle('xp_9', dx, dy); dx = dx + px;
+	createToggle('xp_10', dx, dy); dx = dx + px;
+	createToggle('xp_11', dx, dy); dx = dx + px;
+	createToggle('xp_12', dx, dy); dx = dx + px;
+	createToggle('xp_13', dx, dy); dx = dx + px;
+	createToggle('xp_14', dx, dy); dx = dx + px;
+	createToggle('xp_15', dx, dy); dx = dx + px;
+	createToggle('xp_16', dx, dy)
+
+	--dx = 4.94; dy = -6.9
+	--createToggle('no_hunt', dx, dy)
+
+	--skills
+	dx = 6; dy =-9.1
+	createTextField('proficiency_type', 'txt', dx, dy)
+
+	dx = 3.645; dy = -8.01; px = 0.667
+	createToggle('proficiency_1', dx, dy); dx = dx + px;
+	createToggle('proficiency_2', dx, dy); dx = dx + px;
+	createToggle('proficiency_3', dx, dy); dx = dx + px;
+	createToggle('proficiency_4', dx, dy); dx = dx + px;
+	createToggle('proficiency_5', dx, dy); dx = dx + px;
+	createToggle('proficiency_6', dx, dy); dx = dx + px;
+	createToggle('proficiency_7', dx, dy); dx = dx + px;
+	createToggle('proficiency_8', dx, dy)
+
+	dx = -7.65; dy = 5.68; px =0.715
+	createToggle('courage_1', dx, dy); dx = dx + px;
+	createToggle('courage_2', dx, dy); dx = dx + px;
+	createToggle('courage_3', dx, dy); dx = dx + px;
+	createToggle('courage_4', dx, dy); dx = dx + px;
+	createToggle('courage_5', dx, dy); dx = dx + px;
+	createToggle('courage_6', dx, dy); dx = dx + px;
+	createToggle('courage_7', dx, dy); dx = dx + px;
+	createToggle('courage_8', dx, dy); dx = dx + px;
+	createToggle('courage_9', dx, dy)
+
+	dx = 1.78; dy = 5.68; px =0.719
+	createToggle('understanding_1', dx, dy); dx = dx + px;
+	createToggle('understanding_2', dx, dy); dx = dx + px;
+	createToggle('understanding_3', dx, dy); dx = dx + px;
+	createToggle('understanding_4', dx, dy); dx = dx + px;
+	createToggle('understanding_5', dx, dy); dx = dx + px;
+	createToggle('understanding_6', dx, dy); dx = dx + px;
+	createToggle('understanding_7', dx, dy); dx = dx + px;
+	createToggle('understanding_8', dx, dy); dx = dx + px;
+	createToggle('understanding_9', dx, dy)
+
+	dx = -8.63; dy = 7.28; py = 0.71
+	createToggle('stalwart', dx, dy); dy = dy + py;
+	createToggle('prepared', dx, dy); dy = dy + py;
+	createToggle('matchmaker', dx, dy)
+
+	dx = 0.8; dy = 7.28; py = 0.71
+	createToggle('analyze', dx, dy); dy = dy + py;
+	createToggle('explore', dx, dy); dy = dy + py;
+	createToggle('tinker', dx, dy)
+
+	dx = 4.63; dy = 10.18; py = 0.71
+	createToggle('skip', dx, dy); dy = dy + py;
+	createToggle('survival', dx, dy); dy = dy + py;
+	createToggle('fightingarts', dx, dy)
+
+
+	dx = -2.5; dy = 11; px = 5
+	createTextField('notes', 'txt3', dx, dy); dx = dx + px
+
+	--------------------
+	--backside buttons
+	-------------------
+	thick = -0.14
+	
+
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+	--make a style of button by adding a new size
+	buttons.params.sizes.collapse = {
+        display = {width = 250, height = 250, font = 250},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+	}
+    buttons.params.sizes.std = {
+        display = {width = 200, height = 150, font = 100},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 800},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
+    }
+    buttons.params.sizes.bigAttr = {
+        display = {width = 0, height = 0, font = 1200},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 150, height = 150, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.genderToggle = {
+        display = {width = 300, height = 300, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 300},
+        button = {width = 400, height = 250, font = 150},
+        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 450},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------------curnils tokens standalone
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+tokens = {}
+tempStats = {}
+--------------
+
+--loads buttons and gets saved data
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+	
+	--categorize buttons
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
+        end
+    end
+    generateButtonParameters()
+
+    --loads saved data if exists
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+	
+	--update display
+    updateDisplay(true)
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = {type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMinimize(name, type, px, py)
+	name = 'm-' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMaximize(name, type, px, py)
+	name = 'm+' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+end
+
+--gets buttons params
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+			elseif (prefix == "m-") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMinimize = true
+			elseif (prefix == "m+") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMaximize = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+--creates buttons
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+        buttonInfo.function_owner = self
+        buttonInfo.index = buttons.index
+        buttonInfo.click_function = targetFunc
+		--reverse things for backside
+		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+			buttonInfo.rotation = {0,0,180}
+			if offsets != nil then
+				reverse_x = -offsets.x
+			end
+		elseif offsets != nil then
+			reverse_x = offsets.x
+		end
+		--reversed
+        if isLeft then
+            orientationModifier = -1
+        else
+            orientationModifier = 1
+        end
+
+        if offsets == nil then
+            buttonInfo.position = {positions.x, positions.y, positions.z}
+        else
+            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+        end
+        buttonInfo.width = sizes.width
+        buttonInfo.height = sizes.height
+        buttonInfo.font_size = sizes.font
+        buttonInfo.label = label
+    buttons.index = buttons.index + 1
+
+    return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isMinimize == true) then
+				buttons[tostring(i)].display.label = '-'
+			elseif (buttons[tostring(i)].isMaximize == true) then
+				buttons[tostring(i)].display.label = '+'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                    buttons[tostring(i)].display.label = "X"
+                else
+                    buttons[tostring(i)].display.label = ""
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+					--curnil token script
+					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
+                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                        updateStat(i)
+                    else
+					--
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+					end
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
+
+---------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_gender_f"] = 0
+		end
+	else
+		buttons.counts[location] = 1
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_gender_f"] = 0
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_b_gender_m"] = 1
+			buttons.counts["t_gender_m"] = 1
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_gender_f"] = 1
+			buttons.counts["t_b_gender_f"] = 1
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		end
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location) --string.gsub(location, "", "")
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then return end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+    ppos = {pos.x + 2, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+			if nm == '__survivor_name' then
+				buttons.counts.__b_survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			elseif nm == '__b_survivor_name' then
+				buttons.counts.__survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			end
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+
+        o = spawnObject({
+            type = 'go_game_piece_black',
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            scale = {1, 1, 1}
+        })
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+--------------------------
+--transfer for minimize
+--------------------------
+function minimizeSheet()
+	if buttons.counts != nil then
+		--hardsave
+		local data_to_save = {}
+		data_to_save.saved_counts = {}
+		for i,v in pairs(buttons.counts) do
+			data_to_save.saved_counts[tostring(i)] = v or 0
+		end
+		saved_data = JSON.encode(data_to_save)
+		self.script_state = saved_data
+		transfer_data = data_to_save
+		startLuaCoroutine(self, 'transferCoroutine')
+	end
+end
+
+function transferCoroutine()
+	local object = self.setState(2)
+	coroutine.yield(0)
+    object.call('loadData', transfer_data)
+	return 1
+end
+
+--------------------------
+--save when dropped (for dropping into bags)
+--------------------------
+function onDropped()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	self.script_state = saved_data
+end
+
+
+
+
+---------------------------
+--Curnils token standalone script version
+---------------------------
+--Curnil's Token scripts
+function loadTokens(loadedTokens)
+    tokens = loadedTokens
+    updateDisplay(false)
+end
+
+function updateStat(stat)
+    local statIncrease = 0
+    for i,v in pairs(tokens) do
+        for j,w in pairs(v) do
+            if stat == "movement" and tostring(j) == "move" then
+                statIncrease = statIncrease + w
+            elseif stat == j then
+                statIncrease = statIncrease + w
+            end
+        end
+    end
+    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
+    loadComplete = true
+end
+
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isGearGrid") then
+        -- remove the token from the tokens collection
+        tokens = {}
+        updateDisplay(false)
+    end
+end
+
+function onPickedUp()
+	tokens = {}
+	updateDisplay(false)
+end
\ No newline at end of file
diff --git a/beta/Unnamed Survivor.87d89b.lua b/beta/Unnamed Survivor.87d89b.lua
new file mode 100644
index 0000000..77b1b67
--- /dev/null
+++ b/beta/Unnamed Survivor.87d89b.lua	
@@ -0,0 +1,630 @@
+--KDM Survivor Sheet-Full (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+function initCustomButtons()
+	thick = 0.14
+
+	--minimize button
+	dx = 6.1; dy = -12.1
+	createMinimize('minimize', 'collapse', dx, dy)
+
+	--header
+	dx = -1; dy =-11.5
+	createTextField('survivor_name', 'txtbig', dx, dy)
+
+	dx =7.45; dy =-11.27; px = 1.25
+	createToggle('gender_m', dx, dy); dx = dx + px;
+	createToggle('gender_f', dx, dy)
+
+	--survival
+	dx = -5.265; dy =2
+	createCounter('survival', 'big', dx, dy)
+
+	dx = -7.73; dy = 2
+	createCounter('survival_limit', 'big', dx, dy)
+
+	--dx = -2.48; dy = -9.25
+	--createToggle('survival_disabled', dx, dy)
+
+	dx = -3.365; dy = 0.525; py = 0.925
+    createToggle('dodge', dx, dy); dy = dy + py;
+	createToggle('encourage', dx, dy); dy = dy + py;
+	createToggle('surge', dx, dy); dy = dy + py;
+	createToggle('dash', dx, dy)
+
+	--stats
+	dx = -7.45; dy = -3.4; px = 3
+	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
+	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
+	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
+	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('speed', 'bigAttr', dx, dy)
+
+	--insanity
+	dx = 4.55; dy = 1.9
+	createCounter('insanity', 'big', dx, dy)
+	dx = 4.55; dy = 3.6
+	createToggle('brain_injury', dx, dy)
+
+	--experience
+	dx = -8.5; dy = -9.1; px = 0.665
+	createToggle('xp_1', dx, dy); dx = dx + px;
+	createToggle('xp_2', dx, dy); dx = dx + px;
+	createToggle('xp_3', dx, dy); dx = dx + px;
+	createToggle('xp_4', dx, dy); dx = dx + px;
+	createToggle('xp_5', dx, dy); dx = dx + px;
+	createToggle('xp_6', dx, dy); dx = dx + px;
+	createToggle('xp_7', dx, dy); dx = dx + px;
+	createToggle('xp_8', dx, dy); dx = dx + px;
+	createToggle('xp_9', dx, dy); dx = dx + px;
+	createToggle('xp_10', dx, dy); dx = dx + px;
+	createToggle('xp_11', dx, dy); dx = dx + px;
+	createToggle('xp_12', dx, dy); dx = dx + px;
+	createToggle('xp_13', dx, dy); dx = dx + px;
+	createToggle('xp_14', dx, dy); dx = dx + px;
+	createToggle('xp_15', dx, dy); dx = dx + px;
+	createToggle('xp_16', dx, dy)
+
+	--dx = 4.94; dy = -6.9
+	--createToggle('no_hunt', dx, dy)
+
+	--skills
+	dx = 6; dy =-9.1
+	createTextField('proficiency_type', 'txt', dx, dy)
+
+	dx = 3.645; dy = -8.01; px = 0.667
+	createToggle('proficiency_1', dx, dy); dx = dx + px;
+	createToggle('proficiency_2', dx, dy); dx = dx + px;
+	createToggle('proficiency_3', dx, dy); dx = dx + px;
+	createToggle('proficiency_4', dx, dy); dx = dx + px;
+	createToggle('proficiency_5', dx, dy); dx = dx + px;
+	createToggle('proficiency_6', dx, dy); dx = dx + px;
+	createToggle('proficiency_7', dx, dy); dx = dx + px;
+	createToggle('proficiency_8', dx, dy)
+
+	dx = -7.65; dy = 5.68; px =0.715
+	createToggle('courage_1', dx, dy); dx = dx + px;
+	createToggle('courage_2', dx, dy); dx = dx + px;
+	createToggle('courage_3', dx, dy); dx = dx + px;
+	createToggle('courage_4', dx, dy); dx = dx + px;
+	createToggle('courage_5', dx, dy); dx = dx + px;
+	createToggle('courage_6', dx, dy); dx = dx + px;
+	createToggle('courage_7', dx, dy); dx = dx + px;
+	createToggle('courage_8', dx, dy); dx = dx + px;
+	createToggle('courage_9', dx, dy)
+
+	dx = 1.78; dy = 5.68; px =0.719
+	createToggle('understanding_1', dx, dy); dx = dx + px;
+	createToggle('understanding_2', dx, dy); dx = dx + px;
+	createToggle('understanding_3', dx, dy); dx = dx + px;
+	createToggle('understanding_4', dx, dy); dx = dx + px;
+	createToggle('understanding_5', dx, dy); dx = dx + px;
+	createToggle('understanding_6', dx, dy); dx = dx + px;
+	createToggle('understanding_7', dx, dy); dx = dx + px;
+	createToggle('understanding_8', dx, dy); dx = dx + px;
+	createToggle('understanding_9', dx, dy)
+
+	dx = -8.63; dy = 7.28; py = 0.71
+	createToggle('stalwart', dx, dy); dy = dy + py;
+	createToggle('prepared', dx, dy); dy = dy + py;
+	createToggle('matchmaker', dx, dy)
+
+	dx = 0.8; dy = 7.28; py = 0.71
+	createToggle('analyze', dx, dy); dy = dy + py;
+	createToggle('explore', dx, dy); dy = dy + py;
+	createToggle('tinker', dx, dy)
+
+	dx = 4.63; dy = 10.18; py = 0.71
+	createToggle('skip', dx, dy); dy = dy + py;
+	createToggle('survival', dx, dy); dy = dy + py;
+	createToggle('fightingarts', dx, dy)
+
+
+	dx = -2.5; dy = 11; px = 5
+	createTextField('notes', 'txt3', dx, dy); dx = dx + px
+
+	--------------------
+	--backside buttons
+	-------------------
+	thick = -0.14
+	
+
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+	--make a style of button by adding a new size
+	buttons.params.sizes.collapse = {
+        display = {width = 250, height = 250, font = 250},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+	}
+    buttons.params.sizes.std = {
+        display = {width = 200, height = 150, font = 100},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 800},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
+    }
+    buttons.params.sizes.bigAttr = {
+        display = {width = 0, height = 0, font = 1200},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 150, height = 150, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.genderToggle = {
+        display = {width = 300, height = 300, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 300},
+        button = {width = 400, height = 250, font = 150},
+        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 450},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------------curnils tokens standalone
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+tokens = {}
+tempStats = {}
+--------------
+
+--loads buttons and gets saved data
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+	
+	--categorize buttons
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
+        end
+    end
+    generateButtonParameters()
+
+    --loads saved data if exists
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+	
+	--update display
+    updateDisplay(true)
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = {type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMinimize(name, type, px, py)
+	name = 'm-' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMaximize(name, type, px, py)
+	name = 'm+' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+end
+
+--gets buttons params
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+			elseif (prefix == "m-") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMinimize = true
+			elseif (prefix == "m+") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMaximize = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+--creates buttons
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+        buttonInfo.function_owner = self
+        buttonInfo.index = buttons.index
+        buttonInfo.click_function = targetFunc
+		--reverse things for backside
+		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+			buttonInfo.rotation = {0,0,180}
+			if offsets != nil then
+				reverse_x = -offsets.x
+			end
+		elseif offsets != nil then
+			reverse_x = offsets.x
+		end
+		--reversed
+        if isLeft then
+            orientationModifier = -1
+        else
+            orientationModifier = 1
+        end
+
+        if offsets == nil then
+            buttonInfo.position = {positions.x, positions.y, positions.z}
+        else
+            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+        end
+        buttonInfo.width = sizes.width
+        buttonInfo.height = sizes.height
+        buttonInfo.font_size = sizes.font
+        buttonInfo.label = label
+    buttons.index = buttons.index + 1
+
+    return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isMinimize == true) then
+				buttons[tostring(i)].display.label = '-'
+			elseif (buttons[tostring(i)].isMaximize == true) then
+				buttons[tostring(i)].display.label = '+'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                    buttons[tostring(i)].display.label = "X"
+                else
+                    buttons[tostring(i)].display.label = ""
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+					--curnil token script
+					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
+                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                        updateStat(i)
+                    else
+					--
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+					end
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
+
+---------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_gender_f"] = 0
+		end
+	else
+		buttons.counts[location] = 1
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_gender_f"] = 0
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_b_gender_m"] = 1
+			buttons.counts["t_gender_m"] = 1
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_gender_f"] = 1
+			buttons.counts["t_b_gender_f"] = 1
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		end
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location) --string.gsub(location, "", "")
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then return end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+    ppos = {pos.x + 2, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+			if nm == '__survivor_name' then
+				buttons.counts.__b_survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			elseif nm == '__b_survivor_name' then
+				buttons.counts.__survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			end
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+
+        o = spawnObject({
+            type = 'go_game_piece_black',
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            scale = {1, 1, 1}
+        })
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+--------------------------
+--transfer for minimize
+--------------------------
+function minimizeSheet()
+	if buttons.counts != nil then
+		--hardsave
+		local data_to_save = {}
+		data_to_save.saved_counts = {}
+		for i,v in pairs(buttons.counts) do
+			data_to_save.saved_counts[tostring(i)] = v or 0
+		end
+		saved_data = JSON.encode(data_to_save)
+		self.script_state = saved_data
+		transfer_data = data_to_save
+		startLuaCoroutine(self, 'transferCoroutine')
+	end
+end
+
+function transferCoroutine()
+	local object = self.setState(2)
+	coroutine.yield(0)
+    object.call('loadData', transfer_data)
+	return 1
+end
+
+--------------------------
+--save when dropped (for dropping into bags)
+--------------------------
+function onDropped()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	self.script_state = saved_data
+end
+
+
+
+
+---------------------------
+--Curnils token standalone script version
+---------------------------
+--Curnil's Token scripts
+function loadTokens(loadedTokens)
+    tokens = loadedTokens
+    updateDisplay(false)
+end
+
+function updateStat(stat)
+    local statIncrease = 0
+    for i,v in pairs(tokens) do
+        for j,w in pairs(v) do
+            if stat == "movement" and tostring(j) == "move" then
+                statIncrease = statIncrease + w
+            elseif stat == j then
+                statIncrease = statIncrease + w
+            end
+        end
+    end
+    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
+    loadComplete = true
+end
+
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isGearGrid") then
+        -- remove the token from the tokens collection
+        tokens = {}
+        updateDisplay(false)
+    end
+end
+
+function onPickedUp()
+	tokens = {}
+	updateDisplay(false)
+end
\ No newline at end of file
diff --git a/beta/Unnamed Survivor.aa7e77.lua b/beta/Unnamed Survivor.aa7e77.lua
new file mode 100644
index 0000000..77b1b67
--- /dev/null
+++ b/beta/Unnamed Survivor.aa7e77.lua	
@@ -0,0 +1,630 @@
+--KDM Survivor Sheet-Full (Slate) v.3
+--by Eskander and Curnil
+--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens
+
+-------------------------------------------------------------
+--Customizable Buttons EDIT BELOW
+-------------------------------------------------------------
+function initCustomButtons()
+	thick = 0.14
+
+	--minimize button
+	dx = 6.1; dy = -12.1
+	createMinimize('minimize', 'collapse', dx, dy)
+
+	--header
+	dx = -1; dy =-11.5
+	createTextField('survivor_name', 'txtbig', dx, dy)
+
+	dx =7.45; dy =-11.27; px = 1.25
+	createToggle('gender_m', dx, dy); dx = dx + px;
+	createToggle('gender_f', dx, dy)
+
+	--survival
+	dx = -5.265; dy =2
+	createCounter('survival', 'big', dx, dy)
+
+	dx = -7.73; dy = 2
+	createCounter('survival_limit', 'big', dx, dy)
+
+	--dx = -2.48; dy = -9.25
+	--createToggle('survival_disabled', dx, dy)
+
+	dx = -3.365; dy = 0.525; py = 0.925
+    createToggle('dodge', dx, dy); dy = dy + py;
+	createToggle('encourage', dx, dy); dy = dy + py;
+	createToggle('surge', dx, dy); dy = dy + py;
+	createToggle('dash', dx, dy)
+
+	--stats
+	dx = -7.45; dy = -3.4; px = 3
+	createCounter('movement', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('accuracy', 'bigAttr', dx, dy) dx = dx + px - 0.05;
+	createCounter('strength', 'bigAttr', dx, dy) dx = dx + px - 0.02;
+	createCounter('evasion', 'bigAttr', dx, dy) dx = dx + px - 0.1;
+	createCounter('luck', 'bigAttr', dx, dy) dx = dx + px;
+	createCounter('speed', 'bigAttr', dx, dy)
+
+	--insanity
+	dx = 4.55; dy = 1.9
+	createCounter('insanity', 'big', dx, dy)
+	dx = 4.55; dy = 3.6
+	createToggle('brain_injury', dx, dy)
+
+	--experience
+	dx = -8.5; dy = -9.1; px = 0.665
+	createToggle('xp_1', dx, dy); dx = dx + px;
+	createToggle('xp_2', dx, dy); dx = dx + px;
+	createToggle('xp_3', dx, dy); dx = dx + px;
+	createToggle('xp_4', dx, dy); dx = dx + px;
+	createToggle('xp_5', dx, dy); dx = dx + px;
+	createToggle('xp_6', dx, dy); dx = dx + px;
+	createToggle('xp_7', dx, dy); dx = dx + px;
+	createToggle('xp_8', dx, dy); dx = dx + px;
+	createToggle('xp_9', dx, dy); dx = dx + px;
+	createToggle('xp_10', dx, dy); dx = dx + px;
+	createToggle('xp_11', dx, dy); dx = dx + px;
+	createToggle('xp_12', dx, dy); dx = dx + px;
+	createToggle('xp_13', dx, dy); dx = dx + px;
+	createToggle('xp_14', dx, dy); dx = dx + px;
+	createToggle('xp_15', dx, dy); dx = dx + px;
+	createToggle('xp_16', dx, dy)
+
+	--dx = 4.94; dy = -6.9
+	--createToggle('no_hunt', dx, dy)
+
+	--skills
+	dx = 6; dy =-9.1
+	createTextField('proficiency_type', 'txt', dx, dy)
+
+	dx = 3.645; dy = -8.01; px = 0.667
+	createToggle('proficiency_1', dx, dy); dx = dx + px;
+	createToggle('proficiency_2', dx, dy); dx = dx + px;
+	createToggle('proficiency_3', dx, dy); dx = dx + px;
+	createToggle('proficiency_4', dx, dy); dx = dx + px;
+	createToggle('proficiency_5', dx, dy); dx = dx + px;
+	createToggle('proficiency_6', dx, dy); dx = dx + px;
+	createToggle('proficiency_7', dx, dy); dx = dx + px;
+	createToggle('proficiency_8', dx, dy)
+
+	dx = -7.65; dy = 5.68; px =0.715
+	createToggle('courage_1', dx, dy); dx = dx + px;
+	createToggle('courage_2', dx, dy); dx = dx + px;
+	createToggle('courage_3', dx, dy); dx = dx + px;
+	createToggle('courage_4', dx, dy); dx = dx + px;
+	createToggle('courage_5', dx, dy); dx = dx + px;
+	createToggle('courage_6', dx, dy); dx = dx + px;
+	createToggle('courage_7', dx, dy); dx = dx + px;
+	createToggle('courage_8', dx, dy); dx = dx + px;
+	createToggle('courage_9', dx, dy)
+
+	dx = 1.78; dy = 5.68; px =0.719
+	createToggle('understanding_1', dx, dy); dx = dx + px;
+	createToggle('understanding_2', dx, dy); dx = dx + px;
+	createToggle('understanding_3', dx, dy); dx = dx + px;
+	createToggle('understanding_4', dx, dy); dx = dx + px;
+	createToggle('understanding_5', dx, dy); dx = dx + px;
+	createToggle('understanding_6', dx, dy); dx = dx + px;
+	createToggle('understanding_7', dx, dy); dx = dx + px;
+	createToggle('understanding_8', dx, dy); dx = dx + px;
+	createToggle('understanding_9', dx, dy)
+
+	dx = -8.63; dy = 7.28; py = 0.71
+	createToggle('stalwart', dx, dy); dy = dy + py;
+	createToggle('prepared', dx, dy); dy = dy + py;
+	createToggle('matchmaker', dx, dy)
+
+	dx = 0.8; dy = 7.28; py = 0.71
+	createToggle('analyze', dx, dy); dy = dy + py;
+	createToggle('explore', dx, dy); dy = dy + py;
+	createToggle('tinker', dx, dy)
+
+	dx = 4.63; dy = 10.18; py = 0.71
+	createToggle('skip', dx, dy); dy = dy + py;
+	createToggle('survival', dx, dy); dy = dy + py;
+	createToggle('fightingarts', dx, dy)
+
+
+	dx = -2.5; dy = 11; px = 5
+	createTextField('notes', 'txt3', dx, dy); dx = dx + px
+
+	--------------------
+	--backside buttons
+	-------------------
+	thick = -0.14
+	
+
+    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
+    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
+
+end
+
+------------------
+--Style Sheet
+------------------
+
+function initButtonsTable()
+
+    buttons = {}
+    buttons.index = 0
+    buttons.counts = {}
+    buttons.params = {}
+    buttons.params.positions = {}
+	buttons.params.rotations = {}
+    buttons.params.positions.offsets = {}
+    buttons.params.sizes = {}
+    buttons.targetFunc = {}
+	
+	--make a style of button by adding a new size
+	buttons.params.sizes.collapse = {
+        display = {width = 250, height = 250, font = 250},
+        button = {width = 0, height = 0, font = 100},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+	}
+    buttons.params.sizes.std = {
+        display = {width = 200, height = 150, font = 100},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.mid = {
+        display = {width = 0, height = 0, font = 400},
+        button = {width = 150, height = 200, font = 200},
+        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
+    }
+    buttons.params.sizes.big = {
+        display = {width = 0, height = 0, font = 800},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.42, y = 0, z = -1.63}}
+    }
+    buttons.params.sizes.bigAttr = {
+        display = {width = 0, height = 0, font = 1200},
+        button = {width = 280, height = 280, font = 400},
+        offsets = { bottomButtons = {x = 0.425, y = 0, z = -1.82}}
+    }
+    buttons.params.sizes.small = {
+        display = {width = 0, height = 0, font = 80},
+        button = {width = 100, height = 100, font = 100},
+        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }
+    }
+    buttons.params.sizes.toggle = {
+        display = {width = 150, height = 150, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.genderToggle = {
+        display = {width = 300, height = 300, font = 300},
+        button = {width = 200, height = 200, font = 300},
+        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt = {
+        display = {width = 0, height = 0, font = 300},
+        button = {width = 400, height = 250, font = 150},
+        offsets = { bottomButtons = {x = 2.5, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+
+    buttons.params.sizes.txt2 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txt3 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 5.3, y = 0, z = -0.7}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt4 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+	buttons.params.sizes.txt5 = {
+        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig = {
+        display = {width = 0, height = 0, font = 450},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 6, y = 0, z = 0.5}, topButtons = {x = 0, y = 0, z = 0} }
+    }
+    buttons.params.sizes.txtbig2 = {
+        display = {width = 0, height = 0, font = 300},
+        button = buttons.params.sizes.txt.button,
+        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
+    }
+end
+
+----------------------------------------------------
+--DO NO EDIT BELOW unless you know what you're doing
+--SAVE
+----------------------------------------------------
+
+--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
+function onSave()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	
+	--Uncomment this line to reset the save data
+	--saved_data = ''
+	return saved_data
+end
+
+----------------------------------------------------
+--INIT
+----------------------------------------------------
+
+-------------curnils tokens standalone
+--used to determine if collision(enter/exit) is Full Char Sheet
+isKDMFULL = true
+tokens = {}
+tempStats = {}
+--------------
+
+--loads buttons and gets saved data
+function onload(saved_data)
+    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
+    initButtonsTable()
+    objs = {}
+	initCustomButtons()
+	
+	--categorize buttons
+    for i,v in pairs(buttons) do
+        buttons.counts[tostring(i)] = 0
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
+            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
+            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
+			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
+        end
+    end
+    generateButtonParameters()
+
+    --loads saved data if exists
+    if saved_data != '' then
+        local loaded_data = JSON.decode(saved_data)
+        buttons.counts = loaded_data.saved_counts
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                if buttons.counts[tostring(i)] == nil then
+                    buttons.counts[tostring(i)] = 0
+                end
+            end
+        end
+    else
+        for i,v in pairs(buttons) do
+            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
+                buttons.counts[tostring(i)] = 0
+            end
+        end
+    end
+	
+	--update display
+    updateDisplay(true)
+end
+
+--------------------------
+--creates buttons by type
+-------------------------
+
+function createToggle(name, px, py)
+    createCounter('t_' .. name, 'toggle', px, py)
+end
+
+function createCounter(name, btype, px, py)
+    buttons[name] = {type = btype}
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createTextField(sname, type, px, py)
+    name = '__' .. sname;
+    buttons[name] = {type = type }
+    buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMinimize(name, type, px, py)
+	name = 'm-' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function createMaximize(name, type, px, py)
+	name = 'm+' .. name
+	buttons[name] = {type = type}
+	buttons.params.positions[name] = {x = px, y = thick, z = py}
+end
+
+function dud()
+end
+
+--gets buttons params
+function generateButtonParameters()
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+            btn = tostring(i)
+            prefix = string.sub(btn, 1, 2)
+            if (prefix == "__") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+                buttons[tostring(i)].isText = true
+			elseif (prefix == "m-") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMinimize = true
+			elseif (prefix == "m+") then
+				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+				buttons[tostring(i)].isMaximize = true
+            elseif (prefix != "t_") then
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
+                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
+            else
+                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
+                buttons[tostring(i)].isToggle = true
+            end
+        end
+    end
+end
+
+--creates buttons
+function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
+    local buttonInfo = {}
+        buttonInfo.function_owner = self
+        buttonInfo.index = buttons.index
+        buttonInfo.click_function = targetFunc
+		--reverse things for backside
+		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
+			buttonInfo.rotation = {0,0,180}
+			if offsets != nil then
+				reverse_x = -offsets.x
+			end
+		elseif offsets != nil then
+			reverse_x = offsets.x
+		end
+		--reversed
+        if isLeft then
+            orientationModifier = -1
+        else
+            orientationModifier = 1
+        end
+
+        if offsets == nil then
+            buttonInfo.position = {positions.x, positions.y, positions.z}
+        else
+            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
+        end
+        buttonInfo.width = sizes.width
+        buttonInfo.height = sizes.height
+        buttonInfo.font_size = sizes.font
+        buttonInfo.label = label
+    buttons.index = buttons.index + 1
+
+    return buttonInfo
+end
+
+----------------------------------------------
+--Utility functions
+----------------------------------------------
+function updateDisplay(firstTime)
+    for i,v in pairs(buttons) do
+        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
+			if (buttons[tostring(i)].isMinimize == true) then
+				buttons[tostring(i)].display.label = '-'
+			elseif (buttons[tostring(i)].isMaximize == true) then
+				buttons[tostring(i)].display.label = '+'
+            elseif (buttons[tostring(i)].isToggle == true) then
+				if (buttons.counts[tostring(i)] > 0) then
+                    buttons[tostring(i)].display.label = "X"
+                else
+                    buttons[tostring(i)].display.label = ""
+                end
+            else
+                if (buttons[tostring(i)].isText == true) then
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                    if (objs[tostring(i)] == nil) then
+                        buttons[tostring(i)].minusOne.label = "Edit"
+                    else
+                        buttons[tostring(i)].minusOne.label = "Done"
+                    end
+                else
+					--curnil token script
+					if i == "movement" or i == "accuracy" or i == "strength" or i == "evasion" or i == "luck" or i == "speed"then
+                        buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+                        updateStat(i)
+                    else
+					--
+                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
+					end
+                end
+            end
+            if (firstTime) then
+                self.createButton(buttons[tostring(i)].display)
+                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
+                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
+            else
+                self.editButton(buttons[tostring(i)].display)
+            end
+        end
+    end
+end
+
+---------------------------------------------
+--functions activated by button click/other
+--------------------------------------------
+
+function toggleClick(location)
+	if buttons.counts[location] > 0 then
+		buttons.counts[location] = 0
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_gender_f"] = 0
+		end
+	else
+		buttons.counts[location] = 1
+		if location == "t_gender_m" or location == "t_b_gender_m" then
+			buttons.counts["t_gender_f"] = 0
+			buttons.counts["t_b_gender_f"] = 0
+			buttons.counts["t_b_gender_m"] = 1
+			buttons.counts["t_gender_m"] = 1
+		elseif location == "t_gender_f" or location == "t_b_gender_f" then
+			buttons.counts["t_gender_f"] = 1
+			buttons.counts["t_b_gender_f"] = 1
+			buttons.counts["t_b_gender_m"] = 0
+			buttons.counts["t_gender_m"] = 0
+		end
+	end
+    updateDisplay(false)
+end
+
+function plus(location, amount)
+    buttons.counts[location] = buttons.counts[location] + amount
+    updateDisplay(false)
+end
+
+function minus(location, amount)
+    --Prevents count from going below 0
+    --if buttons.counts[location] > amount - 1 then
+        buttons.counts[location] = buttons.counts[location] - amount
+    --else
+    --    buttons.counts[location] = 0
+    --end
+    updateDisplay(false)
+end
+
+function editclick(location)
+    nm = tostring(location) --string.gsub(location, "", "")
+    local sizes = buttons.params.sizes[buttons[nm].type].offsets
+    mpos = self.getPosition(); pos = buttons.params.positions[nm]
+    local btns = self.getButtons()
+    if (btns == nil) then return end
+    button = nil
+    fname = tostring(location) .. 'EditClick'
+    ppos = {pos.x + 2, pos.y, pos.z}
+    if (objs[nm] != nil) then
+        buttons.counts[nm] = objs[nm].getDescription()
+			if nm == '__survivor_name' then
+				buttons.counts.__b_survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			elseif nm == '__b_survivor_name' then
+				buttons.counts.__survivor_name = objs[nm].getDescription()
+				buttons.counts.__b_fam_self = objs[nm].getDescription()
+				self.setName(objs[nm].getDescription())
+			end
+        destroyObject(objs[nm])
+        objs[nm] = nil
+    else
+        local pos = self.getPosition()
+        local rot = self.getRotation()
+        local sca = self.getScale()
+        local pawn_pos = {}
+        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
+        pawn_pos['z'] = pos['z']-ppos[3] --1.8
+        --translate point to origin
+        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
+        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
+        --now apply rotation
+        local rad_rot = math.rad(original_rot['y'] - rot['y'])
+        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
+        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
+        --translate back
+        local new_pawn_x = obj_rotatedX + pos['x'];
+        local new_pawn_z = obj_rotatedZ + pos['z'];
+        local params = {}
+        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}
+
+        o = spawnObject({
+            type = 'go_game_piece_black',
+            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
+            scale = {1, 1, 1}
+        })
+        objs[nm] = o
+        o.setDescription(tostring(buttons.counts[nm]))
+		o.setName('Edit my description and re-click Edit')
+    end
+    updateDisplay(false)
+end
+
+--------------------------
+--transfer for minimize
+--------------------------
+function minimizeSheet()
+	if buttons.counts != nil then
+		--hardsave
+		local data_to_save = {}
+		data_to_save.saved_counts = {}
+		for i,v in pairs(buttons.counts) do
+			data_to_save.saved_counts[tostring(i)] = v or 0
+		end
+		saved_data = JSON.encode(data_to_save)
+		self.script_state = saved_data
+		transfer_data = data_to_save
+		startLuaCoroutine(self, 'transferCoroutine')
+	end
+end
+
+function transferCoroutine()
+	local object = self.setState(2)
+	coroutine.yield(0)
+    object.call('loadData', transfer_data)
+	return 1
+end
+
+--------------------------
+--save when dropped (for dropping into bags)
+--------------------------
+function onDropped()
+	local data_to_save = {}
+	data_to_save.saved_counts = {}
+	for i,v in pairs(buttons.counts) do
+		data_to_save.saved_counts[tostring(i)] = v or 0
+	end
+	saved_data = JSON.encode(data_to_save)
+	self.script_state = saved_data
+end
+
+
+
+
+---------------------------
+--Curnils token standalone script version
+---------------------------
+--Curnil's Token scripts
+function loadTokens(loadedTokens)
+    tokens = loadedTokens
+    updateDisplay(false)
+end
+
+function updateStat(stat)
+    local statIncrease = 0
+    for i,v in pairs(tokens) do
+        for j,w in pairs(v) do
+            if stat == "movement" and tostring(j) == "move" then
+                statIncrease = statIncrease + w
+            elseif stat == j then
+                statIncrease = statIncrease + w
+            end
+        end
+    end
+    buttons[stat].display.label = tostring(statIncrease + buttons.counts[stat])
+    loadComplete = true
+end
+
+function onCollisionExit(collision_info)
+    local obj = collision_info.collision_object
+    if obj.getVar("isGearGrid") then
+        -- remove the token from the tokens collection
+        tokens = {}
+        updateDisplay(false)
+    end
+end
+
+function onPickedUp()
+	tokens = {}
+	updateDisplay(false)
+end
\ No newline at end of file
diff --git a/beta/deckAbilities.625f68.lua b/beta/deckAbilities.625f68.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckAbilities.625f68.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckBasicHunt.4e9d9e.lua b/beta/deckBasicHunt.4e9d9e.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckBasicHunt.4e9d9e.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckBasicResources.4b6997.lua b/beta/deckBasicResources.4b6997.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckBasicResources.4b6997.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckDisorders.3a5452.lua b/beta/deckDisorders.3a5452.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckDisorders.3a5452.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckFightingArts.515434.lua b/beta/deckFightingArts.515434.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckFightingArts.515434.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckSecretFightingArs.b6c374.lua b/beta/deckSecretFightingArs.b6c374.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckSecretFightingArs.b6c374.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckSevereInjuries.421db1.lua b/beta/deckSevereInjuries.421db1.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckSevereInjuries.421db1.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckSpecialHunt.148b16.lua b/beta/deckSpecialHunt.148b16.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckSpecialHunt.148b16.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckStrangeResources.7aadc0.lua b/beta/deckStrangeResources.7aadc0.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckStrangeResources.7aadc0.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/beta/deckVermin.8c28ba.lua b/beta/deckVermin.8c28ba.lua
new file mode 100644
index 0000000..79187ae
--- /dev/null
+++ b/beta/deckVermin.8c28ba.lua
@@ -0,0 +1,14 @@
+--placeholder script
+
+function onLoad()
+end
+
+function onDropped()
+	local var = self.getName()
+	local zoneTable = {}
+	local zoneTable = Global.getTable('zones')
+	local guid = zoneTable[var].guid
+	local zone = getObjectFromGUID(guid)
+	local pos = self.getPosition()
+	zone.setPosition(pos)
+end
\ No newline at end of file
diff --git a/dist/README.lua b/dist/README.lua
new file mode 100644
index 0000000..14fe0b1
--- /dev/null
+++ b/dist/README.lua
@@ -0,0 +1,3 @@
+--TODO: placeholder file for dist folder
+--TODO: REMOVE this file when release is ready to publish
+--TODO: PUT release files in the dist directory, and package the dist directory for workshop distribution
-- 
2.8.1.windows.1

