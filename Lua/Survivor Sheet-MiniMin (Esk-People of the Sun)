--KDM Survivor Sheet-Mini (Slate) v.3
--by Eskander and Curnil
--Script adapted from soulburner's dnd sheets and Mr. Stumps Universal Counter Tokens

-------------------------------------------------------------
--Customizable Buttons EDIT BELOW
-------------------------------------------------------------
function initCustomButtons()
	thick = 0.14
	
	--maximize button
	dx = 5.2; dy = -2.45
	createMaximize('maximize', 'collapse', dx, dy)
	
	--header
	dx = 0; dy =-2.15
	createTextField('survivor_name', 'txtbig', dx, dy)
	
	dx =-4.65 ; dy =-1.65; px = 0.53
	createToggle('gender_m', dx, dy); dx = dx + px;
	createToggle('gender_f', dx, dy)
	
	--experience
	dx = -3.17; dy = -1; px = 0.513
	createToggle('xp_1', dx, dy); dx = dx + px;
	createToggle('xp_2', dx, dy); dx = dx + px;
	createToggle('xp_3', dx, dy); dx = dx + px;
	createToggle('xp_4', dx, dy); dx = dx + px;
	createToggle('xp_5', dx, dy); dx = dx + px;
	createToggle('xp_6', dx, dy); dx = dx + px;
	createToggle('xp_7', dx, dy); dx = dx + px;
	createToggle('xp_8', dx, dy); dx = dx + px;
	createToggle('xp_9', dx, dy); dx = dx + px;
	createToggle('xp_10', dx, dy); dx = dx + px;
	createToggle('xp_11', dx, dy); dx = dx + px;
	createToggle('xp_12', dx, dy); dx = dx + px;
	createToggle('xp_13', dx, dy); dx = dx + px;
	createToggle('xp_14', dx, dy); dx = dx + px;
	createToggle('xp_15', dx, dy); dx = dx + px;
	createToggle('xp_16', dx, dy)
	
	dx = 4.96; dy = -1.62
	createToggle('no_hunt', dx, dy)
	
	--skills
	dx = -1.65; dy =1.6
	createTextField('proficiency_type', 'txt', dx, dy)
	
	dx = 1.038; dy = 0.95; px = 0.494
	createToggle('proficiency_1', dx, dy); dx = dx + px;
	createToggle('proficiency_2', dx, dy); dx = dx + px;
	createToggle('proficiency_3', dx, dy); dx = dx + px;
	createToggle('proficiency_4', dx, dy); dx = dx + px;
	createToggle('proficiency_5', dx, dy); dx = dx + px;
	createToggle('proficiency_6', dx, dy); dx = dx + px;
	createToggle('proficiency_7', dx, dy); dx = dx + px;
	createToggle('proficiency_8', dx, dy)
	
	
	--------------------
	--reverseside buttons
	-------------------
	thick = -0.14
	--header
	dx = 0; dy =-2.15
	createTextField('b_survivor_name', 'txtbig', dx, dy)
	
	dx =-4.475 ; dy =-2.15; px = -0.525
	createToggle('b_gender_m', dx, dy); dx = dx + px;
	createToggle('b_gender_f', dx, dy)
	
	--chronicles
	dx = -1; dy = -0.2; py = 0.9
	createCounter('b_year_born', 'mid', dx, dy); dy = dy + py
	createCounter('b_year_died', 'mid', dx, dy)

	
	dx = -3.8; dy =0.3
	createCounter('b_age', 'big', dx, dy)
	
	dx = 0; dy = 1.9
	createTextField('b_cause_death', 'txt4', dx, dy)
	
	

    --if you added a location, you need to give it a position, coordinates are relative to the center of the model
    --buttons.params.positions.test = {x = 1, y = 1, z = 1}
end

function onSave()
    --Uncomment this line to reset the save data, necessary when messing with variable names
    --saved_data = ''
    return saved_data
end

------------------------------
--Style sheet
------------------------------
function initButtonsTable()

    buttons = {}
    buttons.index = 0
    buttons.counts = {}
    buttons.params = {}
    buttons.params.positions = {}
	buttons.params.rotations = {}
    buttons.params.positions.offsets = {}
    buttons.params.sizes = {}
    buttons.targetFunc = {}
	--make a style of button by adding a new size
	buttons.params.sizes.collapse = {
        display = {width = 450, height = 450, font = 450},
        button = {width = 0, height = 0, font = 100},
        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
	}
    buttons.params.sizes.mid = {
        display = {width = 0, height = 0, font = 400},
        button = {width = 0, height = 0, font = 200},
        offsets = { bottomButtons = {x = 0.28, y = 0, z = -0.3}, topButtons = {x = 0.1, y = 0, z = -0.17} }
    }
    buttons.params.sizes.big = {
        display = {width = 0, height = 0, font = 800},
        button = {width = 0, height = 0, font = 400},
        offsets = { bottomButtons = {x = 0.5, y = 0, z = -0.5}, topButtons = {x = 0.1, y = 0, z = -0.17} }
    }
    buttons.params.sizes.toggle = {
        display = {width = 0, height = 0, font = 200},
        button = {width = 0, height = 0, font = 200},
        offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
    }
    buttons.params.sizes.txt = {
        display = {width = 0, height = 0, font = 150},
        button = {width = 0, height = 0, font = 100},
        offsets = { bottomButtons = {x = 2, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
    }
    buttons.params.sizes.txt2 = {
        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
        offsets = { bottomButtons = {x = 0, y = 0, z = -0.68}, topButtons = {x = 0, y = 0, z = 0} }
    }
    buttons.params.sizes.txt3 = {
        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
        offsets = { bottomButtons = {x = 0, y = 0, z = -2}, topButtons = {x = 0, y = 0, z = 0} }
    }
	buttons.params.sizes.txt4 = {
        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,
        offsets = { bottomButtons = {x = 4.4, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
    }
    buttons.params.sizes.txtbig = {
        display = {width = 0, height = 0, font = 300},
        button = buttons.params.sizes.txt.button,
        offsets = { bottomButtons = {x = 3.8, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
    }
    buttons.params.sizes.txtbig2 = {
        display = {width = 0, height = 0, font = 300},
        button = buttons.params.sizes.txt.button,
        offsets = { bottomButtons = {x = 4, y = 0, z = 0}, topButtons = {x = 4, y = 0, z = 0} }
    }
end

---------------------------------------------------------------
--DO NO EDIT BELOW unless you know what you're doing
--SAVE/LOAD
---------------------------------------------------------------
--[[
function onSave()
	--unbracket this block to reset saved data
	saved_data = ''
	return saved_data
end
--]]

-------------------------------
--loading from full size
--------------------------------
function loadData(dataToLoad)
	for i,v in pairs(buttons) do
        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' and tostring(i) != 'm_minimize' and tostring != 'm_maximize' then
            buttons.counts[tostring(i)] = dataToLoad.saved_counts[tostring(i)]
        end
    end
	saved_data = JSON.encode(dataToLoad)
	self.script_state = saved_data
	startLuaCoroutine(self, 'updateAfterLoad')
end

function updateAfterLoad()
	for i = 1, 5 do
		coroutine.yield(0)
	end
	updateDisplay(false)
	return 1
end

------------------------------------------------
--INIT
------------------------------------------------

function onload(saved_data)
    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}
    initButtonsTable()
    objs = {}
	initCustomButtons()
	
    for i,v in pairs(buttons) do
        buttons.counts[tostring(i)] = 0
        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
            self.setVar(tostring(i) .. 'ToggleClick', function () toggleClick(tostring(i)) end)
            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)
			self.setVar(tostring(i) .. 'Minimize', function () minimizeSheet(tostring(i)) end)
			self.setVar(tostring(i) .. 'Maximize', function () maximizeSheet(tostring(i)) end)
        end
    end
	
    generateButtonParameters()

    --loads existing data
	if saved_data != '' and saved_data != nil then
        local loaded_data = JSON.decode(saved_data)
        buttons.counts = loaded_data.saved_counts
        for i,v in pairs(buttons) do
            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
                if buttons.counts[tostring(i)] == nil then
                    buttons.counts[tostring(i)] = 0
                end
            end
        end
    elseif saved_data != '' then
        local loaded_data = JSON.decode(saved_data)
        buttons.counts = loaded_data.saved_counts
        for i,v in pairs(buttons) do
            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
                if buttons.counts[tostring(i)] == nil then
                    buttons.counts[tostring(i)] = 0
                end
            end
        end
    else
        for i,v in pairs(buttons) do
            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then
                buttons.counts[tostring(i)] = 0
            end
        end
    end

    updateDisplay(true)
end

--------------------------
--creates buttons by type
-------------------------

function createToggle(name, px, py)
    createCounter('t_' .. name, 'toggle', px, py)
end

function createCounter(name, btype, px, py)
    buttons[name] = {type = btype}
    buttons.params.positions[name] = {x = px, y = thick, z = py}
end

function createTextField(sname, type, px, py)
    name = '__' .. sname;
    buttons[name] = { type = type }
    buttons.params.positions[name] = {x = px, y = thick, z = py}
end

function createMinimize(name, type, px, py)
	name = 'm-' .. name
	buttons[name] = {type = type}
	buttons.params.positions[name] = {x = px, y = thick, z = py}
end

function createMaximize(name, type, px, py)
	name = 'm+' .. name
	buttons[name] = {type = type}
	buttons.params.positions[name] = {x = px, y = thick, z = py}
end

function dud()
end

function generateButtonParameters()
    for i,v in pairs(buttons) do
        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
            btn = tostring(i)
            prefix = string.sub(btn, 1, 2)
            if (prefix == "__") then
                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
                buttons[tostring(i)].isText = true
			elseif (prefix == "m-") then
				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Minimize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
				buttons[tostring(i)].isMinimize = true
			elseif (prefix == "m+") then
				buttons[tostring(i)].display = setupButton(tostring(i) .. 'Maximize', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
				buttons[tostring(i)].isMaximize = true
            elseif (prefix != "t_") then
                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
            else
                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ToggleClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
                buttons[tostring(i)].isToggle = true
            end
        end
    end
end

function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
    local buttonInfo = {}
        buttonInfo.function_owner = self
        buttonInfo.index = buttons.index
        buttonInfo.click_function = targetFunc
		--reverse things for backside
		if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
			buttonInfo.rotation = {0,0,180}
			if offsets != nil then
				reverse_x = -offsets.x
			end
		elseif offsets != nil then
			reverse_x = offsets.x
		end
		--reversed
        if isLeft then
            orientationModifier = -1
        else
            orientationModifier = 1
        end

        if offsets == nil then
            buttonInfo.position = {positions.x, positions.y, positions.z}
        else
            buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
        end
        buttonInfo.width = sizes.width
        buttonInfo.height = sizes.height
        buttonInfo.font_size = sizes.font
        buttonInfo.label = label
    buttons.index = buttons.index + 1
    return buttonInfo
end

----------------------------------------------
--Utility functions
----------------------------------------------

function updateDisplay(firstTime)
    for i,v in pairs(buttons) do
        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then
			if (buttons[tostring(i)].isMinimize == true) then
				buttons[tostring(i)].display.label = '-'
			elseif (buttons[tostring(i)].isMaximize == true) then
				buttons[tostring(i)].display.label = '+'
            elseif (buttons[tostring(i)].isToggle == true) then
				if (buttons.counts[tostring(i)] > 0) then
                    buttons[tostring(i)].display.label = "X"
                else
                    buttons[tostring(i)].display.label = ""
                end
            else
                if (buttons[tostring(i)].isText == true) then
                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
                    if (objs[tostring(i)] == nil) then
                        buttons[tostring(i)].minusOne.label = ""
                    else
                        buttons[tostring(i)].minusOne.label = "Done"
                    end
                else
                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
                end
            end
            if (firstTime) then
                self.createButton(buttons[tostring(i)].display)
                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end
                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end
            else
                self.editButton(buttons[tostring(i)].display)
            end
        end
    end
	if (firstTime) then
		self.setName(buttons.counts['__survivor_name'])
	end
end
---------------------------------------------
--functions activated by button click/other
--------------------------------------------
function toggleClick(location)
	if buttons.counts[location] > 0 then
		buttons.counts[location] = 0
		if location == "t_gender_m" or location == "t_b_gender_m" then
			buttons.counts["t_b_gender_m"] = 0
			buttons.counts["t_gender_m"] = 0
		elseif location == "t_gender_f" or location == "t_b_gender_f" then
			buttons.counts["t_b_gender_f"] = 0
			buttons.counts["t_gender_f"] = 0
		end
	else
		buttons.counts[location] = 1
		if location == "t_gender_m" or location == "t_b_gender_m" then
			buttons.counts["t_gender_f"] = 0
			buttons.counts["t_b_gender_f"] = 0
			buttons.counts["t_b_gender_m"] = 1
			buttons.counts["t_gender_m"] = 1
		elseif location == "t_gender_f" or location == "t_b_gender_f" then
			buttons.counts["t_gender_f"] = 1
			buttons.counts["t_b_gender_f"] = 1
			buttons.counts["t_b_gender_m"] = 0
			buttons.counts["t_gender_m"] = 0
		end
	end
    updateDisplay(false)
end

function plus(location, amount)
    buttons.counts[location] = buttons.counts[location] + amount
    updateDisplay(false)
end

function minus(location, amount)
    --Prevents count from going below 0
    --if buttons.counts[location] > amount - 1 then
        buttons.counts[location] = buttons.counts[location] - amount
    --else
    --    buttons.counts[location] = 0
    --end
    updateDisplay(false)
end

function editclick(location)
    nm = tostring(location) --string.gsub(location, "", "")
    local sizes = buttons.params.sizes[buttons[nm].type].offsets
    mpos = self.getPosition(); pos = buttons.params.positions[nm]
    local btns = self.getButtons()
    if (btns == nil) then return end
    button = nil
    fname = tostring(location) .. 'EditClick'
    ppos = {pos.x + 2, pos.y, pos.z}
    if (objs[nm] != nil) then
        buttons.counts[nm] = objs[nm].getDescription()
			if nm == '__survivor_name' then
				buttons.counts.__b_survivor_name = objs[nm].getDescription()
				buttons.counts.__b_fam_self = objs[nm].getDescription()
				self.setName(objs[nm].getDescription())
			elseif nm == '__b_survivor_name' then
				buttons.counts.__survivor_name = objs[nm].getDescription()
				buttons.counts.__b_fam_self = objs[nm].getDescription()
				self.setName(objs[nm].getDescription())
			end
        destroyObject(objs[nm])
        objs[nm] = nil
    else
        local pos = self.getPosition()
        local rot = self.getRotation()
        local sca = self.getScale()
        local pawn_pos = {}
        pawn_pos['x'] = pos['x']+ppos[1]--+1.2
        pawn_pos['z'] = pos['z']-ppos[3] --1.8
        --translate point to origin
        local tempX = (pawn_pos['x'] - pos['x'])*sca['x']
        local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']
        --now apply rotation
        local rad_rot = math.rad(original_rot['y'] - rot['y'])
        local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)
        local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);
        --translate back
        local new_pawn_x = obj_rotatedX + pos['x'];
        local new_pawn_z = obj_rotatedZ + pos['z'];
        local params = {}
        local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}

        o = spawnObject({
            type = 'go_game_piece_black',
            position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},
            scale = {1, 1, 1}
        })
        objs[nm] = o
        o.setDescription(tostring(buttons.counts[nm]))
		o.setName('Edit my description and re-click Edit')
    end
    updateDisplay(false)
end

--------------------------
--transfer to full size
--------------------------
function maximizeSheet()
	self.setState(2)
end
